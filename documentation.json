{
  "pipes": [
    {
      "name": "SafeHtmlPipe",
      "id": "pipe-SafeHtmlPipe-9ad2b0441f41b4757eef5a27f27b78a87c87db488cdfad538d91667aebdc9911184560ddb5ad49b136c28f3722dac71a3cdff891bcfddde1307121b24272518f",
      "file": "src/app/shared/pipes/safeHtml/safe-html.pipe.ts",
      "type": "pipe",
      "deprecated": false,
      "deprecationMessage": "",
      "description": "<p>safeHtml\nPipe para sanitizar el contenido HTML y evitar ataques XSS</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;div [innerHTML]=&quot;html | safeHtml&quot;&gt;&lt;/div&gt;</code></pre></div>",
      "rawdescription": "\n\nsafeHtml\nPipe para sanitizar el contenido HTML y evitar ataques XSS\n```html\n<div [innerHTML]=\"html | safeHtml\"></div>\n```",
      "properties": [],
      "methods": [
        {
          "name": "transform",
          "args": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 20,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "standalone": true,
      "ngname": "safeHtml",
      "sourceCode": "import { DomSanitizer } from '@angular/platform-browser'\r\nimport { PipeTransform, Pipe } from \"@angular/core\";\r\n\r\n/**\r\n * @name\r\n * safeHtml\r\n * @description\r\n * Pipe para sanitizar el contenido HTML y evitar ataques XSS\r\n * @example\r\n * <div [innerHTML]=\"html | safeHtml\"></div>\r\n */\r\n@Pipe({\r\n  name: 'safeHtml',\r\n  standalone: true\r\n})\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitized: DomSanitizer) { }\r\n\r\n  transform(value: any) {\r\n    return this.sanitized.bypassSecurityTrustHtml(value);\r\n  }\r\n}\r\n"
    },
    {
      "name": "SnakeTextToStringPipe",
      "id": "pipe-SnakeTextToStringPipe-17f20c9125d951357fcdc93f40de946f4543e17164e4ac059d6e3baf70f0b9a449cad1977dc23f985584333d6a800c8f4e364da7164fb9f553893ee8fcf4ec9d",
      "file": "src/app/shared/pipes/snake-text-to-string/snake-text-to-string.pipe.ts",
      "type": "pipe",
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "properties": [],
      "methods": [
        {
          "name": "transform",
          "args": [
            {
              "name": "text",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 9,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "text",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "standalone": true,
      "ngname": "snakeTextToString",
      "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'snakeTextToString',\r\n  standalone: true\r\n})\r\nexport class SnakeTextToStringPipe implements PipeTransform {\r\n\r\n  transform(text: any): string {\r\n    const stakeToText = text.replace(/^[-_]*(.)/, (_: any, c: any) => c.toLowerCase()).replace(/[-_]+(.)/g, (_: any, c: any) => ' ' + c.toLowerCase());\r\n    return typeof stakeToText === 'string'\r\n      ? (stakeToText.slice(0, 1).toUpperCase() + stakeToText.slice(1))\r\n      : stakeToText;\r\n  }\r\n\r\n}\r\n"
    },
    {
      "name": "StripHtmlPipe",
      "id": "pipe-StripHtmlPipe-b21575f8314140cdd4815b9edf68f05cbe41c82378b311ca736c5b25be25e64a86634bbaf46322f4d30baee9e0846978bdc480f408bfb00425319e84217a1b9f",
      "file": "src/app/shared/pipes/striphtml/striphtml.pipe.ts",
      "type": "pipe",
      "deprecated": false,
      "deprecationMessage": "",
      "description": "<p>striphtml\nPipe para eliminar las etiquetas HTML de un texto y devolver solo el texto plano</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;div&gt;{{ html | striphtml }}&lt;/div&gt;\nconst html = &#39;&lt;div&gt;Texto&lt;/div&gt;&#39; =&gt; &#39;Texto&#39;</code></pre></div>",
      "rawdescription": "\n\nstriphtml\nPipe para eliminar las etiquetas HTML de un texto y devolver solo el texto plano\n```html\n<div>{{ html | striphtml }}</div>\nconst html = '<div>Texto</div>' => 'Texto'\n```",
      "properties": [],
      "methods": [
        {
          "name": "transform",
          "args": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 17,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "standalone": true,
      "ngname": "striphtml",
      "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/**\r\n * @name\r\n * striphtml\r\n * @description\r\n * Pipe para eliminar las etiquetas HTML de un texto y devolver solo el texto plano\r\n * @example\r\n * <div>{{ html | striphtml }}</div>\r\n * const html = '<div>Texto</div>' => 'Texto'\r\n */\r\n@Pipe({\r\n  name: 'striphtml',\r\n  standalone: true\r\n})\r\nexport class StripHtmlPipe implements PipeTransform {\r\n  transform(value: any): any {\r\n    if ((value === null) || (value === '')) {\r\n      return '';\r\n    } else {\r\n      return value?.replace(/<(?:.|\\n)*?>/gm, ' ') || '';\r\n    }\r\n  }\r\n}\r\n"
    },
    {
      "name": "TruncatePipe",
      "id": "pipe-TruncatePipe-5dc54937c658104082adf5366eea5e8ffe68e4a774ed3c379baff3d7abe66cfd251163f7d1b131fbcb2a9b0157e0a878150fd00f797e216232a28fd6bba01696",
      "file": "src/app/shared/pipes/truncate/truncate.pipe.ts",
      "type": "pipe",
      "deprecated": false,
      "deprecationMessage": "",
      "description": "<p>truncate\nPipe para truncar un texto a un número de caracteres determinado y añadir puntos suspensivos al final</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;div&gt;{{ text | truncate:25:true:&#39;...&#39; }}&lt;/div&gt;\nHola mundo perfecto -&gt; Hola mundo perfe...</code></pre></div>",
      "rawdescription": "\n\ntruncate\nPipe para truncar un texto a un número de caracteres determinado y añadir puntos suspensivos al final\n```html\n<div>{{ text | truncate:25:true:'...' }}</div>\nHola mundo perfecto -> Hola mundo perfe...\n```",
      "properties": [],
      "methods": [
        {
          "name": "transform",
          "args": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "limit",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "25"
            },
            {
              "name": "completeWords",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false"
            },
            {
              "name": "ellipsis",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'...'"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 17,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "limit",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "25",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "completeWords",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "ellipsis",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'...'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "standalone": true,
      "ngname": "truncate",
      "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/**\r\n * @name\r\n * truncate\r\n * @description\r\n * Pipe para truncar un texto a un número de caracteres determinado y añadir puntos suspensivos al final\r\n * @example\r\n * <div>{{ text | truncate:25:true:'...' }}</div>\r\n * Hola mundo perfecto -> Hola mundo perfe...\r\n */\r\n@Pipe({\r\n  name: 'truncate',\r\n  standalone: true\r\n})\r\nexport class TruncatePipe implements PipeTransform {\r\n  transform(value: string, limit = 25, completeWords = false, ellipsis = '...') {\r\n    if (completeWords) {\r\n      limit = value.substring(0, limit).lastIndexOf(' ');\r\n    }\r\n    return value.length > limit ? value.substring(0, limit) + ellipsis : value;\r\n  }\r\n}\r\n"
    },
    {
      "name": "UcwordcasePipe",
      "id": "pipe-UcwordcasePipe-40d9eed6ad02673ca6888cabc34bace3745040392333530397b3a6e9944fc8adea8bd74293ae5da8a6662ba03da7e824da3c9214e8a2c52c07d8f492df8fea3f",
      "file": "src/app/shared/pipes/ucwordcase/ucwordcase.pipe.ts",
      "type": "pipe",
      "deprecated": false,
      "deprecationMessage": "",
      "description": "<p>ucwordcase\nPipe para convertir la primera letra del string a mayúsculas y el resto a minúsculas</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;div&gt;{{ text | ucwordcase }}&lt;/div&gt;\nhola mundo =&gt; Hola mundo\nHola Mundo =&gt; Hola mundo</code></pre></div>",
      "rawdescription": "\n\nucwordcase\nPipe para convertir la primera letra del string a mayúsculas y el resto a minúsculas\n```html\n<div>{{ text | ucwordcase }}</div>\nhola mundo => Hola mundo\nHola Mundo => Hola mundo\n```",
      "properties": [],
      "methods": [
        {
          "name": "transform",
          "args": [
            {
              "name": "text",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 19,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "text",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "standalone": true,
      "ngname": "ucwordcase",
      "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/**\r\n * @name\r\n * ucwordcase\r\n * @description\r\n * Pipe para convertir la primera letra del string a mayúsculas y el resto a minúsculas\r\n * @example\r\n * <div>{{ text | ucwordcase }}</div>\r\n * hola mundo => Hola mundo\r\n * Hola Mundo => Hola mundo\r\n */\r\n@Pipe({\r\n  name: 'ucwordcase',\r\n  standalone: true\r\n})\r\nexport class UcwordcasePipe implements PipeTransform {\r\n\r\n  transform(text: any): string {\r\n    return typeof text === 'string'\r\n      ? (text.toLowerCase().slice(0, 1).toUpperCase() + text.toLowerCase().slice(1))\r\n      : text;\r\n  }\r\n\r\n}\r\n"
    }
  ],
  "interfaces": [
    {
      "name": "BreadCrumbEntity",
      "id": "interface-BreadCrumbEntity-aa0dae4c3093c1e09dfa211cce91a1d9eb03b50247f81d1d70963b4ae9fd1fca20f836fc3d7940414a0f81148eb00e4f793746a58c96c8e59454aa3df1a857fc",
      "file": "src/app/shared/components/breadcrum/models/breadcrum.entity.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface BreadCrumbEntity {\r\n  label: string;\r\n  url: string;\r\n}\r\n",
      "properties": [
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "url",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": []
    },
    {
      "name": "DateSelected",
      "id": "interface-DateSelected-0d9015e8ed56ff20f27088b69c588c7a016d6b4440fde0e86de12fbb4e6fb710d73accffa8a80c4b6b69677a954023d5773ddc06082bd786440ee58e38f84311",
      "file": "src/app/shared/components/form-fields/input-date-picker/models/date-picker.entity.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface DateSelected {\r\n  date?: string | string[];\r\n  closePicker?: boolean;\r\n}\r\n\r\nexport const DEFAULT_FORMAT = 'YYYY-MM-DD';\r\n\r\nexport type ViewMode = 'years' | 'months' | 'default';\r\nexport type CalendarType = 'week' | 'day' | 'range';\r\nexport type DatePickerType = 'day' | 'week' | 'range';\r\n",
      "properties": [
        {
          "name": "closePicker",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 3
        },
        {
          "name": "date",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | string[]",
          "optional": true,
          "description": "",
          "line": 2
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": []
    },
    {
      "name": "MenuEntity",
      "id": "interface-MenuEntity-1c36ac4e31427d42f7f9389a6be0ebd2d91dd3f79abaea6e7d8059a844a87ecd63a723c9ff18f4564f8c8fe611d8028158782185e0e507087acc9edda1d4ec41",
      "file": "src/app/shared/components/side-menu/model/menu.entity.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface MenuEntity {\r\n  label: string;\r\n  route?: string;\r\n  icon?: string;\r\n  active?: boolean;\r\n  expanded?: boolean;\r\n  shortcut?: boolean;\r\n  childrens?: MenuEntity[];\r\n}\r\n\r\n/**\r\n * Enumerado para la posición del menú lateral\r\n */\r\nexport enum SideMenuPosition {\r\n  LEFT = 'left',\r\n  RIGHT = 'right',\r\n}\r\n\r\n/**\r\n * Tamaño por defecto y posición por defecto del menú lateral si no se especifica\r\n */\r\nexport const DEFAULT_MENU_POSITION = SideMenuPosition.LEFT;\r\n",
      "properties": [
        {
          "name": "active",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 5
        },
        {
          "name": "childrens",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MenuEntity[]",
          "optional": true,
          "description": "",
          "line": 8
        },
        {
          "name": "expanded",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 6
        },
        {
          "name": "icon",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 4
        },
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "route",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 3
        },
        {
          "name": "shortcut",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 7
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": []
    },
    {
      "name": "ModalOptionsEntity",
      "id": "interface-ModalOptionsEntity-4fd9560c7538d4101709c05a9c6d0b90852ffa6077af41355f3af1c5b1b89a51d9082342fc820b1798eb1c2236edd15c9882a14707a7b50345ec9c2472d8d02e",
      "file": "src/app/shared/components/modal/models/modal.entity.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { MatDialogConfig } from \"@angular/material/dialog\";\r\n\r\nexport interface ModalOptionsEntity extends MatDialogConfig {\r\n  title?: string;\r\n  iconTitle?: string;\r\n  id?: string;\r\n  message?: string;\r\n  cancelText?: string;\r\n  confirmText?: string;\r\n  height?: string;\r\n  minHeight?: string;\r\n  width?: string;\r\n  minWidth?: string;\r\n  canBeClosed?: boolean;\r\n  disableClose?: boolean;\r\n  position?: { top?: string; bottom?: string; right?: string; left?: string };\r\n  data?: any;\r\n}\r\n",
      "properties": [
        {
          "name": "canBeClosed",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 14
        },
        {
          "name": "cancelText",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 8
        },
        {
          "name": "confirmText",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 9
        },
        {
          "name": "data",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": true,
          "description": "",
          "line": 17
        },
        {
          "name": "disableClose",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 15
        },
        {
          "name": "height",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 10
        },
        {
          "name": "iconTitle",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 5
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 6
        },
        {
          "name": "message",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 7
        },
        {
          "name": "minHeight",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 11
        },
        {
          "name": "minWidth",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 13
        },
        {
          "name": "position",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "optional": true,
          "description": "",
          "line": 16
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 4
        },
        {
          "name": "width",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 12
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": ["MatDialogConfig"]
    },
    {
      "name": "ModalSpinnerEntity",
      "id": "interface-ModalSpinnerEntity-db8805f6ceb99e4e73203ea6d3a4025c856fffa300dd2b2ceca6b0fee7a72f1f662b313aea5dd74759105bea415b4c922bdad576e83fd06f1c29378b66f2c289",
      "file": "src/app/shared/components/modal-spinner/models/modal-spinner.entity.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface ModalSpinnerEntity {\r\n  title?: string;\r\n  iconTitle?: string;\r\n  label?: string;\r\n  canBeClosed?: boolean;\r\n  disableClose?: boolean;\r\n}\r\n",
      "properties": [
        {
          "name": "canBeClosed",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 5
        },
        {
          "name": "disableClose",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 6
        },
        {
          "name": "iconTitle",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 3
        },
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 4
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 2
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": []
    },
    {
      "name": "SidebarbarPanelEntity",
      "id": "interface-SidebarbarPanelEntity-30fcca2af740d7c26ef5ad6f04fb907d7cf5827ef53bcaf2366d6caabc9f78361af8c967d8f42e19188dac9afdb382fcfd5abec0d955433a6facde4fe0284dcc",
      "file": "src/app/shared/components/sidebar-panel/models/sidebar-panel.entity.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Type } from \"@angular/core\";\r\n\r\n/**\r\n * Interfaz para el panel lateral\r\n */\r\nexport interface SidebarbarPanelEntity {\r\n  component: Type<any>;\r\n  inputs?: SidebarbarPanelInputsEntity[];\r\n  size?: SidebarbarPanelSize;\r\n  position?: SidebarbarPanelPosition;\r\n  title?: string;\r\n  classes?: string[];\r\n}\r\n\r\n/**\r\n * Interfaz para los inputs que recibe el panel lateral\r\n */\r\nexport interface SidebarbarPanelInputsEntity {\r\n  name: string;\r\n  value: any; // Puede ser un string o un objeto\r\n}\r\n\r\n/**\r\n * Enumerado para el tamaño del panel lateral\r\n */\r\nexport enum SidebarbarPanelSize {\r\n  SMALL = 's',\r\n  MEDIUM = 'm',\r\n  LARGE = 'l',\r\n  EXTRA_LARGE = 'xl'\r\n}\r\n\r\n/**\r\n * Enumerado para la posición del panel lateral\r\n */\r\nexport enum SidebarbarPanelPosition {\r\n  LEFT = 'left',\r\n  RIGHT = 'right',\r\n  TOP = 'top',\r\n  BOTTOM = 'bottom'\r\n}\r\n\r\n/**\r\n * Tamaño por defecto y posición por defecto del panel lateral si no se especifica\r\n */\r\nexport const DEFAULT_POSITION = SidebarbarPanelPosition.RIGHT;\r\nexport const DEFAULT_SIZE = SidebarbarPanelSize.SMALL;\r\n",
      "properties": [
        {
          "name": "classes",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string[]",
          "optional": true,
          "description": "",
          "line": 12
        },
        {
          "name": "component",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Type<any>",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "inputs",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "SidebarbarPanelInputsEntity[]",
          "optional": true,
          "description": "",
          "line": 8
        },
        {
          "name": "position",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "SidebarbarPanelPosition",
          "optional": true,
          "description": "",
          "line": 10
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "SidebarbarPanelSize",
          "optional": true,
          "description": "",
          "line": 9
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 11
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "description": "<p>Interfaz para el panel lateral</p>\n",
      "rawdescription": "\n\nInterfaz para el panel lateral\n",
      "methods": [],
      "extends": []
    },
    {
      "name": "SidebarbarPanelInputsEntity",
      "id": "interface-SidebarbarPanelInputsEntity-30fcca2af740d7c26ef5ad6f04fb907d7cf5827ef53bcaf2366d6caabc9f78361af8c967d8f42e19188dac9afdb382fcfd5abec0d955433a6facde4fe0284dcc",
      "file": "src/app/shared/components/sidebar-panel/models/sidebar-panel.entity.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Type } from \"@angular/core\";\r\n\r\n/**\r\n * Interfaz para el panel lateral\r\n */\r\nexport interface SidebarbarPanelEntity {\r\n  component: Type<any>;\r\n  inputs?: SidebarbarPanelInputsEntity[];\r\n  size?: SidebarbarPanelSize;\r\n  position?: SidebarbarPanelPosition;\r\n  title?: string;\r\n  classes?: string[];\r\n}\r\n\r\n/**\r\n * Interfaz para los inputs que recibe el panel lateral\r\n */\r\nexport interface SidebarbarPanelInputsEntity {\r\n  name: string;\r\n  value: any; // Puede ser un string o un objeto\r\n}\r\n\r\n/**\r\n * Enumerado para el tamaño del panel lateral\r\n */\r\nexport enum SidebarbarPanelSize {\r\n  SMALL = 's',\r\n  MEDIUM = 'm',\r\n  LARGE = 'l',\r\n  EXTRA_LARGE = 'xl'\r\n}\r\n\r\n/**\r\n * Enumerado para la posición del panel lateral\r\n */\r\nexport enum SidebarbarPanelPosition {\r\n  LEFT = 'left',\r\n  RIGHT = 'right',\r\n  TOP = 'top',\r\n  BOTTOM = 'bottom'\r\n}\r\n\r\n/**\r\n * Tamaño por defecto y posición por defecto del panel lateral si no se especifica\r\n */\r\nexport const DEFAULT_POSITION = SidebarbarPanelPosition.RIGHT;\r\nexport const DEFAULT_SIZE = SidebarbarPanelSize.SMALL;\r\n",
      "properties": [
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 20
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "description": "<p>Interfaz para los inputs que recibe el panel lateral</p>\n",
      "rawdescription": "\n\nInterfaz para los inputs que recibe el panel lateral\n",
      "methods": [],
      "extends": []
    }
  ],
  "injectables": [
    {
      "name": "CalendarService",
      "id": "injectable-CalendarService-6a2a3229d6fc68bd9b8132e08125c57c10cf43bb186f9d3df7ca4ace268fb208126c8db8ea141781c9b2a0047ad59453155f6bf47a7565d4f8cfa37b58bfaa37",
      "file": "src/app/shared/components/form-fields/input-date-picker/services/calendar.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "buildValidMomentDate",
          "args": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 36,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para devolver la fecha en tipo \"momentjs\" según el tipo de valor que venga\n",
          "description": "<p>Función para devolver la fecha en tipo &quot;momentjs&quot; según el tipo de valor que venga</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 953,
                "end": 958,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "value"
              },
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 941,
                "end": 946,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 947,
                "end": 952,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 948,
                  "end": 951,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 133
                }
              }
            },
            {
              "tagName": {
                "pos": 966,
                "end": 973,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "returns"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "isRangeDate",
          "args": [
            {
              "name": "day",
              "type": "moment.Moment | string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "startDate",
              "type": "moment.Moment | string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "endDate",
              "type": "moment.Moment | string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 56,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para comprobar si la fecha se encuentra en el rango de fechas\n",
          "description": "<p>Función para comprobar si la fecha se encuentra en el rango de fechas</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 1635,
                "end": 1638,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "day"
              },
              "type": "moment.Moment | string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1604,
                "end": 1609,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1610,
                "end": 1634,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 1611,
                  "end": 1633,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 192,
                  "types": [
                    {
                      "pos": 1611,
                      "end": 1624,
                      "flags": 16777216,
                      "modifierFlagsCache": 0,
                      "transformFlags": 1,
                      "kind": 183,
                      "typeName": {
                        "pos": 1611,
                        "end": 1624,
                        "flags": 16777216,
                        "modifierFlagsCache": 0,
                        "transformFlags": 0,
                        "kind": 166,
                        "left": {
                          "pos": 1611,
                          "end": 1617,
                          "flags": 16777216,
                          "modifierFlagsCache": 0,
                          "transformFlags": 0,
                          "kind": 80,
                          "escapedText": "moment"
                        },
                        "right": {
                          "pos": 1618,
                          "end": 1624,
                          "flags": 16777216,
                          "modifierFlagsCache": 0,
                          "transformFlags": 0,
                          "kind": 80,
                          "escapedText": "Moment"
                        }
                      }
                    },
                    {
                      "pos": 1626,
                      "end": 1633,
                      "flags": 16777216,
                      "modifierFlagsCache": 0,
                      "transformFlags": 1,
                      "kind": 154
                    }
                  ]
                }
              }
            },
            {
              "name": {
                "pos": 1677,
                "end": 1686,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "startDate"
              },
              "type": "moment.Moment | string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1646,
                "end": 1651,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1652,
                "end": 1676,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 1653,
                  "end": 1675,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 192,
                  "types": [
                    {
                      "pos": 1653,
                      "end": 1666,
                      "flags": 16777216,
                      "modifierFlagsCache": 0,
                      "transformFlags": 1,
                      "kind": 183,
                      "typeName": {
                        "pos": 1653,
                        "end": 1666,
                        "flags": 16777216,
                        "modifierFlagsCache": 0,
                        "transformFlags": 0,
                        "kind": 166,
                        "left": {
                          "pos": 1653,
                          "end": 1659,
                          "flags": 16777216,
                          "modifierFlagsCache": 0,
                          "transformFlags": 0,
                          "kind": 80,
                          "escapedText": "moment"
                        },
                        "right": {
                          "pos": 1660,
                          "end": 1666,
                          "flags": 16777216,
                          "modifierFlagsCache": 0,
                          "transformFlags": 0,
                          "kind": 80,
                          "escapedText": "Moment"
                        }
                      }
                    },
                    {
                      "pos": 1668,
                      "end": 1675,
                      "flags": 16777216,
                      "modifierFlagsCache": 0,
                      "transformFlags": 1,
                      "kind": 154
                    }
                  ]
                }
              }
            },
            {
              "name": {
                "pos": 1725,
                "end": 1732,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "endDate"
              },
              "type": "moment.Moment | string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1694,
                "end": 1699,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1700,
                "end": 1724,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 1701,
                  "end": 1723,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 192,
                  "types": [
                    {
                      "pos": 1701,
                      "end": 1714,
                      "flags": 16777216,
                      "modifierFlagsCache": 0,
                      "transformFlags": 1,
                      "kind": 183,
                      "typeName": {
                        "pos": 1701,
                        "end": 1714,
                        "flags": 16777216,
                        "modifierFlagsCache": 0,
                        "transformFlags": 0,
                        "kind": 166,
                        "left": {
                          "pos": 1701,
                          "end": 1707,
                          "flags": 16777216,
                          "modifierFlagsCache": 0,
                          "transformFlags": 0,
                          "kind": 80,
                          "escapedText": "moment"
                        },
                        "right": {
                          "pos": 1708,
                          "end": 1714,
                          "flags": 16777216,
                          "modifierFlagsCache": 0,
                          "transformFlags": 0,
                          "kind": 80,
                          "escapedText": "Moment"
                        }
                      }
                    },
                    {
                      "pos": 1716,
                      "end": 1723,
                      "flags": 16777216,
                      "modifierFlagsCache": 0,
                      "transformFlags": 1,
                      "kind": 154
                    }
                  ]
                }
              }
            },
            {
              "tagName": {
                "pos": 1740,
                "end": 1747,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "returns"
              },
              "comment": "",
              "returnType": "boolean"
            }
          ]
        },
        {
          "name": "isToday",
          "args": [
            {
              "name": "day",
              "type": "moment.Moment | string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 67,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para comprobar si la fecha es hoy\n",
          "description": "<p>Función para comprobar si la fecha es hoy</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 2286,
                "end": 2289,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "day"
              },
              "type": "moment.Moment | string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2255,
                "end": 2260,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 2261,
                "end": 2285,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 2262,
                  "end": 2284,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 192,
                  "types": [
                    {
                      "pos": 2262,
                      "end": 2275,
                      "flags": 16777216,
                      "modifierFlagsCache": 0,
                      "transformFlags": 1,
                      "kind": 183,
                      "typeName": {
                        "pos": 2262,
                        "end": 2275,
                        "flags": 16777216,
                        "modifierFlagsCache": 0,
                        "transformFlags": 0,
                        "kind": 166,
                        "left": {
                          "pos": 2262,
                          "end": 2268,
                          "flags": 16777216,
                          "modifierFlagsCache": 0,
                          "transformFlags": 0,
                          "kind": 80,
                          "escapedText": "moment"
                        },
                        "right": {
                          "pos": 2269,
                          "end": 2275,
                          "flags": 16777216,
                          "modifierFlagsCache": 0,
                          "transformFlags": 0,
                          "kind": 80,
                          "escapedText": "Moment"
                        }
                      }
                    },
                    {
                      "pos": 2277,
                      "end": 2284,
                      "flags": 16777216,
                      "modifierFlagsCache": 0,
                      "transformFlags": 1,
                      "kind": 154
                    }
                  ]
                }
              }
            },
            {
              "tagName": {
                "pos": 2297,
                "end": 2304,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "returns"
              },
              "comment": "",
              "returnType": "boolean"
            }
          ]
        },
        {
          "name": "weeksOfMonth",
          "args": [
            {
              "name": "date",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 16,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para obtener las semanas de un mes en base a una fecha\n",
          "description": "<p>Función para obtener las semanas de un mes en base a una fecha</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 272,
                "end": 276,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "date"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 257,
                "end": 262,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 263,
                "end": 271,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 264,
                  "end": 270,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 154
                }
              }
            },
            {
              "tagName": {
                "pos": 284,
                "end": 291,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "returns"
              },
              "comment": "",
              "returnType": "number"
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport moment from 'moment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CalendarService {\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Función para obtener las semanas de un mes en base a una fecha\r\n   * @param {string} date\r\n   * @returns {number}\r\n   */\r\n  weeksOfMonth(date: string): number {\r\n\r\n    const input = moment(new Date(date));\r\n\r\n    const startMonth = input.clone().startOf('month');\r\n    const startWeek = startMonth.clone().startOf('isoWeek');\r\n    const startOffset = startMonth.diff(startWeek, 'days');\r\n\r\n    const endMonth = input.clone().endOf('month');\r\n    const endWeek = endMonth.clone().endOf('isoWeek');\r\n    const endOffset = endWeek.diff(endMonth, 'days');\r\n\r\n    return Math.ceil((endMonth.diff(startMonth, 'days') + startOffset + endOffset) / 7);\r\n  }\r\n\r\n  /**\r\n   * Función para devolver la fecha en tipo \"momentjs\" según el tipo de valor que venga\r\n   * @param {any} value\r\n   * @returns\r\n   */\r\n  buildValidMomentDate(value: any) {\r\n    switch (true) {\r\n      case (typeof value === 'object' && value?.isValid()): // Es de tipo \"momentjs\"\r\n        return value;\r\n      case (typeof value === 'string' && moment(new Date(value)).isValid()): // Es de tipo \"string\" y se comprueba que sea fecha\r\n        return moment(new Date(value));\r\n      case (value instanceof Date && moment(value).isValid()): // Es de tipo \"Date\" y se comprueba si es válida\r\n        return moment(value);\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Función para comprobar si la fecha se encuentra en el rango de fechas\r\n   * @param {moment.Moment | string} day\r\n   * @param {moment.Moment | string} startDate\r\n   * @param {moment.Moment | string} endDate\r\n   * @returns {boolean}\r\n   */\r\n  isRangeDate(day: moment.Moment | string, startDate: moment.Moment | string, endDate: moment.Moment | string): boolean {\r\n    const dateStart = moment(startDate);\r\n    const dateEnd = moment(endDate);\r\n    return (moment(day)).format('DD-MM-YYYY') === dateStart.format('DD-MM-YYYY') || (moment(day)).format('DD-MM-YYYY') === dateEnd.format('DD-MM-YYYY') || ((moment(day)).isBetween(dateStart, dateEnd)) ? true : false;\r\n  }\r\n\r\n  /**\r\n   * Función para comprobar si la fecha es hoy\r\n   * @param {moment.Moment | string} day\r\n   * @returns {boolean}\r\n   */\r\n  isToday(day: moment.Moment | string): boolean {\r\n    return ((moment(day)).format('DD-MM-YYYY') === moment().format('DD-MM-YYYY')) ? true : false;\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 7
      },
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "InputsUtilsService",
      "id": "injectable-InputsUtilsService-d6438bcd85798599e23dc5645a032af5935aa5d5082e43151b0d233979cf6698d4cbf831f8e691efd945b8b4ff745fba3b02fcc72951a59f95694c4c720d5c63",
      "file": "src/app/shared/components/form-fields/services/inputs-utils.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "createUniqueId",
          "args": [
            {
              "name": "name",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 19,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para crear un ID único a partir del nombre, label u otro valor\n```html\n```",
          "description": "<p>Función para crear un ID único a partir del nombre, label u otro valor</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div>",
          "jsdoctags": [
            {
              "name": {
                "pos": 447,
                "end": 451,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "name"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 432,
                "end": 437,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Nombre o label del campo a convertir en labelId</li>\n</ul>\n",
              "typeExpression": {
                "pos": 438,
                "end": 446,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 439,
                  "end": 445,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 154
                }
              }
            },
            {
              "tagName": {
                "pos": 371,
                "end": 378,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "example"
              },
              "comment": "<p>&#39;Nombre del campo&#39; =&gt; &#39;nombre_del_campo_1234&#39;</p>\n"
            },
            {
              "tagName": {
                "pos": 509,
                "end": 516,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "returns"
              },
              "comment": "<ul>\n<li>LabelId creado a partir del nombre o label del campo</li>\n</ul>\n",
              "returnType": "string"
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { UtilsService } from '../../../../core/services/utils/utils.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class InputsUtilsService {\r\n\r\n  constructor(\r\n    private readonly _utilsService: UtilsService\r\n  ) { }\r\n\r\n  /**\r\n   * Función para crear un ID único a partir del nombre, label u otro valor\r\n   * @example 'Nombre del campo' => 'nombre_del_campo_1234'\r\n   * @param {string} name - Nombre o label del campo a convertir en labelId\r\n   * @returns {string} - LabelId creado a partir del nombre o label del campo\r\n   */\r\n  createUniqueId(name: string): string {\r\n    return `${this._utilsService.stringToSlug(name, '_')}_${(Math.floor(Math.random() * 9999))}`;\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_utilsService",
            "type": "UtilsService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 7,
        "jsdoctags": [
          {
            "name": "_utilsService",
            "type": "UtilsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "MenuService",
      "id": "injectable-MenuService-bee3b39b8f1aefc5875e70c51f6a8936f3295c46aaceebd3d16ced3dc7a91d58facf9700a717a19b16890b1467f2d8e37e39a994998efa1c039722526f6e227f",
      "file": "src/app/shared/components/side-menu/services/menu.service.ts",
      "properties": [
        {
          "name": "_isMenuVisible",
          "defaultValue": "signal(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<boolean>",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [123]
        },
        {
          "name": "currentMenu",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MenuEntity[]",
          "optional": false,
          "description": "",
          "line": 13
        }
      ],
      "methods": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 51,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para cerrar el menú lateral de la aplicación.\n",
          "description": "<p>Método para cerrar el menú lateral de la aplicación.</p>\n"
        },
        {
          "name": "getMenu",
          "args": [],
          "optional": false,
          "returnType": "MenuEntity[]",
          "typeParameters": [],
          "line": 28,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para obtener el menú de la aplicación\n",
          "description": "<p>Método para obtener el menú de la aplicación</p>\n",
          "jsdoctags": [
            {
              "tagName": {
                "pos": 654,
                "end": 661,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "returns"
              },
              "comment": "<p>Array con la estructura del menú de la aplicación.</p>\n",
              "returnType": "[]"
            }
          ]
        },
        {
          "name": "isMenuVisible",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 36,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para obtener si el menú lateral de la aplicación está visible o no.\n",
          "description": "<p>Método para obtener si el menú lateral de la aplicación está visible o no.</p>\n",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "tagName": {
                "pos": 902,
                "end": 909,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "returns"
              },
              "comment": "<p>Indica si el menú lateral de la aplicación está visible o no.</p>\n",
              "returnType": "boolean"
            }
          ]
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 58,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para abrir el menú lateral de la aplicación.\n",
          "description": "<p>Método para abrir el menú lateral de la aplicación.</p>\n"
        },
        {
          "name": "setMenu",
          "args": [
            {
              "name": "menu",
              "type": "MenuEntity[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 20,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para obtener el menú de la aplicación y guardarlo en la variable `currentMenu`.\n",
          "description": "<p>Método para obtener el menú de la aplicación y guardarlo en la variable <code>currentMenu</code>.</p>\n",
          "jsdoctags": [
            {
              "name": "menu",
              "type": "MenuEntity[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setMenuVisibility",
          "args": [
            {
              "name": "isVisible",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 44,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para establecer si el menú lateral de la aplicación está visible o no.\n",
          "description": "<p>Método para establecer si el menú lateral de la aplicación está visible o no.</p>\n",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": {
                "pos": 1172,
                "end": 1181,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "isVisible"
              },
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1166,
                "end": 1171,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "toggle",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 64,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para abrir o cerrar el menú lateral de la aplicación.\n",
          "description": "<p>Método para abrir o cerrar el menú lateral de la aplicación.</p>\n"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "<p>Servicio que se encarga de gestionar el menú lateral de la aplicación.</p>\n",
      "rawdescription": "\n\nServicio que se encarga de gestionar el menú lateral de la aplicación.\n",
      "sourceCode": "import { Injectable, WritableSignal, signal } from '@angular/core';\r\nimport { MenuEntity } from '../model/menu.entity';\r\n\r\n/**\r\n * Servicio que se encarga de gestionar el menú lateral de la aplicación.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MenuService {\r\n\r\n  private _isMenuVisible: WritableSignal<boolean> = signal(false);\r\n  currentMenu: MenuEntity[] = [];\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Método para obtener el menú de la aplicación y guardarlo en la variable `currentMenu`.\r\n   */\r\n  setMenu(menu: MenuEntity[]): void {\r\n    this.currentMenu = menu;\r\n  }\r\n\r\n  /**\r\n   * Método para obtener el menú de la aplicación\r\n   * @returns {MenuEntity[]} Array con la estructura del menú de la aplicación.\r\n   */\r\n  getMenu(): MenuEntity[] {\r\n    return this.currentMenu || [];\r\n  }\r\n\r\n  /**\r\n   * Método para obtener si el menú lateral de la aplicación está visible o no.\r\n   * @returns {boolean} Indica si el menú lateral de la aplicación está visible o no.\r\n   */\r\n  public isMenuVisible(): boolean {\r\n    return this._isMenuVisible();\r\n  }\r\n\r\n  /**\r\n   * Método para establecer si el menú lateral de la aplicación está visible o no.\r\n   * @param isVisible\r\n   */\r\n  private setMenuVisibility(isVisible: boolean): void {\r\n    this._isMenuVisible.set(isVisible);\r\n  }\r\n\r\n  /**\r\n   * Método para cerrar el menú lateral de la aplicación.\r\n   */\r\n  close() {\r\n    this.setMenuVisibility(false);\r\n  }\r\n\r\n  /**\r\n   * Método para abrir el menú lateral de la aplicación.\r\n   */\r\n  open() {\r\n    this.setMenuVisibility(true);\r\n  }\r\n  /**\r\n   * Método para abrir o cerrar el menú lateral de la aplicación.\r\n   */\r\n  toggle() {\r\n    this.setMenuVisibility(!this._isMenuVisible());\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 13
      },
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "ModalDialogService",
      "id": "injectable-ModalDialogService-844757bbecb7d9230b5fed8e482999dcc70b14fc16135210525b7b21a9f654fdeac4884b08b29abaa60dc9a15547471242dcc1eaad6c06f3049f12bbef53e7b7",
      "file": "src/app/shared/components/modal/services/modal-dialog.service.ts",
      "properties": [
        {
          "name": "dialogRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MatDialogRef<ModalDialogComponent>",
          "optional": false,
          "description": "",
          "line": 14
        }
      ],
      "methods": [
        {
          "name": "afterClosed",
          "args": [],
          "optional": false,
          "returnType": "Observable<any>",
          "typeParameters": [],
          "line": 71,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para cerrar un modal y devolver un observable con el resultado\n",
          "description": "<p>Método para cerrar un modal y devolver un observable con el resultado</p>\n",
          "jsdoctags": [
            {
              "tagName": {
                "pos": 2558,
                "end": 2565,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "returns"
              },
              "comment": "",
              "returnType": ""
            }
          ]
        },
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 83,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para cerrar un modal\n",
          "description": "<p>Método para cerrar un modal</p>\n"
        },
        {
          "name": "isDialogOpenById",
          "args": [
            {
              "name": "dialogId",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 63,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para comprobar si un modal está abierto por su id\n",
          "description": "<p>Método para comprobar si un modal está abierto por su id</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 2307,
                "end": 2315,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "dialogId"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2292,
                "end": 2297,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 2298,
                "end": 2306,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 2299,
                  "end": 2305,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 154
                }
              }
            },
            {
              "tagName": {
                "pos": 2323,
                "end": 2330,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "returns"
              },
              "comment": "",
              "returnType": "boolean"
            }
          ]
        },
        {
          "name": "open",
          "args": [
            {
              "name": "options",
              "type": "ModalOptionsEntity | null",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "null"
            },
            {
              "name": "component",
              "type": "ComponentType<any>",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "MatDialogRef<any>",
          "typeParameters": [],
          "line": 27,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para abrir un modal\n",
          "description": "<p>Método para abrir un modal</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 726,
                "end": 733,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "options"
              },
              "type": "ModalOptionsEntity | null",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "null",
              "tagName": {
                "pos": 692,
                "end": 697,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 698,
                "end": 725,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 699,
                  "end": 724,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 192,
                  "types": [
                    {
                      "pos": 699,
                      "end": 717,
                      "flags": 16777216,
                      "modifierFlagsCache": 0,
                      "transformFlags": 1,
                      "kind": 183,
                      "typeName": {
                        "pos": 699,
                        "end": 717,
                        "flags": 16777216,
                        "modifierFlagsCache": 0,
                        "transformFlags": 0,
                        "kind": 80,
                        "escapedText": "ModalOptionsEntity"
                      }
                    },
                    {
                      "pos": 719,
                      "end": 724,
                      "flags": 16777216,
                      "modifierFlagsCache": 0,
                      "transformFlags": 1,
                      "kind": 201,
                      "literal": {
                        "pos": 719,
                        "end": 724,
                        "flags": 16777216,
                        "modifierFlagsCache": 0,
                        "transformFlags": 0,
                        "kind": 106
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": {
                "pos": 763,
                "end": 772,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "component"
              },
              "type": "ComponentType<any>",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "pos": 741,
                "end": 746,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 747,
                "end": 762,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 748,
                  "end": 761,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 748,
                    "end": 761,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "ComponentType"
                  }
                }
              }
            },
            {
              "tagName": {
                "pos": 780,
                "end": 787,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "returns"
              },
              "comment": "",
              "returnType": ""
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { ComponentType, Overlay } from '@angular/cdk/overlay';\r\nimport { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogConfig, MatDialogRef } from '@angular/material/dialog';\r\nimport { Observable } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\nimport { ModalDialogComponent } from '../modal-dialog.component';\r\nimport { ModalOptionsEntity } from '../models/modal.entity';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ModalDialogService {\r\n\r\n  dialogRef!: MatDialogRef<ModalDialogComponent>;\r\n\r\n  constructor(\r\n    private readonly overlay: Overlay,\r\n    private readonly dialog: MatDialog\r\n  ) { }\r\n\r\n  /**\r\n   * Método para abrir un modal\r\n   * @param {ModalOptionsEntity | null} options\r\n   * @param {ComponentType} component\r\n   * @returns {MatDialogRef<ModalDialogComponent>}\r\n   */\r\n  open(options: ModalOptionsEntity | null = null, component?: ComponentType<any>): MatDialogRef<any> {\r\n\r\n    const componentOrDialog = component ? component : ModalDialogComponent;\r\n    let data = null;\r\n\r\n    if (component) {\r\n      data = options?.data || null;\r\n    } else {\r\n      data = {\r\n        title: options?.title || '',\r\n        iconTitle: options?.iconTitle || '',\r\n        message: options?.message || '',\r\n        cancelText: options?.cancelText || '',\r\n        confirmText: options?.confirmText || '',\r\n        canBeClosed: options?.canBeClosed || true,\r\n      }\r\n    }\r\n\r\n    return this.dialogRef = this.dialog.open(componentOrDialog, {\r\n      scrollStrategy: this.overlay.scrollStrategies.noop(), // Deshabilita el scroll del body\r\n      height: options?.height || 'auto', // Altura del modal\r\n      width: options?.width || 'auto', // Ancho del modal\r\n      minHeight: options?.minHeight, // Altura mínima del modal\r\n      minWidth: options?.minWidth, // Ancho mínimo del modal\r\n      position: options?.position, // Posición del modal (top, bottom, left, right)\r\n      id: options?.id || null, // Id del modal\r\n      disableClose: options?.disableClose, // Deshabilita el cierre del modal al hacer click fuera\r\n      data: data, // Datos que se pasan al modal (título, mensaje, texto de los botones, un objeto concreto, etc)\r\n    } as MatDialogConfig);\r\n  }\r\n\r\n  /**\r\n   * Método para comprobar si un modal está abierto por su id\r\n   * @param {string} dialogId\r\n   * @returns {boolean}\r\n   */\r\n  isDialogOpenById(dialogId: string): boolean {\r\n    return this.dialog.getDialogById(dialogId) ? true : false;\r\n  }\r\n\r\n  /**\r\n   * Método para cerrar un modal y devolver un observable con el resultado\r\n   * @returns {Observable<any>}\r\n   */\r\n  afterClosed(): Observable<any> {\r\n    return this.dialogRef.afterClosed().pipe(\r\n      take(1),\r\n      map((res) => {\r\n        return res;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Método para cerrar un modal\r\n   */\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "overlay",
            "type": "Overlay",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "dialog",
            "type": "MatDialog",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "overlay",
            "type": "Overlay",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "dialog",
            "type": "MatDialog",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "ModalSpinnerService",
      "id": "injectable-ModalSpinnerService-1a9ba1b34a598e7d458993561ca5231b38b8edd7d9ff79bf016f09bb79f1ce5771acc9e6c161a8993031435ecaa6303a19cd7da8054aebb4f6e8c06ea1638c49",
      "file": "src/app/shared/components/modal-spinner/services/modal-spinner.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "openSpinnerModal",
          "args": [
            {
              "name": "data",
              "type": "ModalSpinnerEntity",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "MatDialogRef<ModalSpinnerComponent>",
          "typeParameters": [],
          "line": 20,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para abrir el modal de spinner\n",
          "description": "<p>Método para abrir el modal de spinner</p>\n",
          "jsdoctags": [
            {
              "name": "data",
              "type": "ModalSpinnerEntity",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { ModalOptionsEntity } from '@shared/components/modal/models/modal.entity';\r\nimport { ModalDialogService } from '@shared/components/modal/services/modal-dialog.service';\r\nimport { ModalSpinnerComponent } from '../modal-spinner.component';\r\nimport { ModalSpinnerEntity } from '../models/modal-spinner.entity';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ModalSpinnerService {\r\n\r\n  constructor(\r\n    private readonly _modalDialogService: ModalDialogService,\r\n  ) { }\r\n\r\n  /**\r\n  * Método para abrir el modal de spinner\r\n  */\r\n  openSpinnerModal(data?: ModalSpinnerEntity): MatDialogRef<ModalSpinnerComponent> {\r\n\r\n    // Creando objeto de datos para el modal de spinner\r\n    const dataSpinner = data as ModalSpinnerEntity;\r\n    dataSpinner.title = data?.title || ''; // Título del modal de spinner\r\n    dataSpinner.label = data?.label || ''; // Etiqueta del modal de spinner\r\n    dataSpinner.iconTitle = data?.iconTitle || ''; // Icono del título del modal de spinner\r\n    dataSpinner.canBeClosed = data?.canBeClosed || true; // Por defecto se puede cerrar el modal de spinner pulsando el botón de Cancelar o Cerrar\r\n    dataSpinner.disableClose = data?.disableClose || true; // Por defecto no se puede cerrar el modal de spinner usando el backdrop o la tecla \"ESC\"\r\n\r\n    // Creando objeto de opciones para el modal de spinner\r\n    const options: ModalOptionsEntity = {\r\n      disableClose: dataSpinner.disableClose,\r\n      canBeClosed: dataSpinner.canBeClosed,\r\n      data: dataSpinner\r\n    };\r\n\r\n    // Abriendo modal de spinner para mostrar que se está generando el PDF\r\n    const spinnerDialog: MatDialogRef<ModalSpinnerComponent> = this._modalDialogService.open(options, ModalSpinnerComponent);\r\n\r\n    return spinnerDialog;\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_modalDialogService",
            "type": "ModalDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "_modalDialogService",
            "type": "ModalDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "SidebarPanelService",
      "id": "injectable-SidebarPanelService-45548b982868f8c75ea088c439883b98bdf8baf9475402e6474410dc8d539e3dc685412dfb48db2f20ad36e528af89e763a50a0f96ab145d71ab2d26fc48be62",
      "file": "src/app/shared/components/sidebar-panel/services/sidebar-panel.service.ts",
      "properties": [
        {
          "name": "_isPanelVisible",
          "defaultValue": "new BehaviorSubject<boolean>(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BehaviorSubject<boolean>",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [123, 148]
        },
        {
          "name": "_sidebarPanelContent",
          "defaultValue": "new BehaviorSubject<SidebarbarPanelEntity | null>(null)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BehaviorSubject<SidebarbarPanelEntity | null>",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [123, 148]
        }
      ],
      "methods": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 85,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para cerrar el panel\n",
          "description": "<p>Método para cerrar el panel</p>\n",
          "modifierKind": [125]
        },
        {
          "name": "getPanelContent",
          "args": [],
          "optional": false,
          "returnType": "SidebarbarPanelEntity | null",
          "typeParameters": [],
          "line": 54,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para obtener el contenido del panel\n",
          "description": "<p>Método para obtener el contenido del panel</p>\n",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "tagName": {
                "pos": 1571,
                "end": 1578,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "returns"
              },
              "comment": "",
              "returnType": ""
            }
          ]
        },
        {
          "name": "isPanelVisible",
          "args": [],
          "optional": false,
          "returnType": "Observable<boolean>",
          "typeParameters": [],
          "line": 22,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para comprobar si el panel está visible\n",
          "description": "<p>Método para comprobar si el panel está visible</p>\n",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "tagName": {
                "pos": 698,
                "end": 705,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "returns"
              },
              "comment": "",
              "returnType": ""
            }
          ]
        },
        {
          "name": "isPanelVisibleValue",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 38,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para comprobar si el panel está visible\n",
          "description": "<p>Método para comprobar si el panel está visible</p>\n",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "tagName": {
                "pos": 1117,
                "end": 1124,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "returns"
              },
              "comment": "",
              "returnType": "boolean"
            }
          ]
        },
        {
          "name": "open",
          "args": [
            {
              "name": "data",
              "type": "SidebarbarPanelEntity",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 70,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para abrir el panel con un contenido\n",
          "description": "<p>Método para abrir el panel con un contenido</p>\n",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": {
                "pos": 2045,
                "end": 2049,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "data"
              },
              "type": "SidebarbarPanelEntity",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "pos": 2015,
                "end": 2020,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 2021,
                "end": 2044,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 2022,
                  "end": 2043,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 2022,
                    "end": 2043,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "SidebarbarPanelEntity"
                  }
                }
              }
            }
          ]
        },
        {
          "name": "panelContentChanged",
          "args": [],
          "optional": false,
          "returnType": "Observable<SidebarbarPanelEntity | null>",
          "typeParameters": [],
          "line": 46,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para comprobar si el contenido del panel ha cambiado\n",
          "description": "<p>Método para comprobar si el contenido del panel ha cambiado</p>\n",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "tagName": {
                "pos": 1313,
                "end": 1320,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "returns"
              },
              "comment": "",
              "returnType": ""
            }
          ]
        },
        {
          "name": "setPanelContent",
          "args": [
            {
              "name": "data",
              "type": "SidebarbarPanelEntity",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 62,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para establecer el contenido del panel\n",
          "description": "<p>Método para establecer el contenido del panel</p>\n",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": {
                "pos": 1825,
                "end": 1829,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "data"
              },
              "type": "SidebarbarPanelEntity",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1795,
                "end": 1800,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1801,
                "end": 1824,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 1802,
                  "end": 1823,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 1802,
                    "end": 1823,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "SidebarbarPanelEntity"
                  }
                }
              }
            }
          ]
        },
        {
          "name": "setPanelVisibility",
          "args": [
            {
              "name": "isVisible",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 30,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para establecer la visibilidad del panel\n",
          "description": "<p>Método para establecer la visibilidad del panel</p>\n",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": {
                "pos": 925,
                "end": 934,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "isVisible"
              },
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 909,
                "end": 914,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 915,
                "end": 924,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 916,
                  "end": 923,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 136
                }
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable, Inject } from '@angular/core';\r\nimport { SidebarbarPanelEntity } from '../models/sidebar-panel.entity';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SidebarPanelService {\r\n\r\n  private readonly _isPanelVisible: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\r\n  private readonly _sidebarPanelContent: BehaviorSubject<SidebarbarPanelEntity | null> = new BehaviorSubject<SidebarbarPanelEntity | null>(null);\r\n\r\n  constructor(\r\n    @Inject(DOCUMENT) private document: Document\r\n  ) { }\r\n\r\n  /**\r\n   * Método para comprobar si el panel está visible\r\n   * @returns {Observable<boolean>}\r\n   */\r\n  public isPanelVisible(): Observable<boolean> {\r\n    return this._isPanelVisible.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Método para establecer la visibilidad del panel\r\n   * @param {boolean} isVisible\r\n   */\r\n  private setPanelVisibility(isVisible: boolean): void {\r\n    this._isPanelVisible.next(isVisible);\r\n  }\r\n\r\n  /**\r\n   * Método para comprobar si el panel está visible\r\n   * @returns {boolean}\r\n   */\r\n  private isPanelVisibleValue(): boolean {\r\n    return this._isPanelVisible.value;\r\n  }\r\n\r\n  /**\r\n   * Método para comprobar si el contenido del panel ha cambiado\r\n   * @returns {Observable<SidebarbarPanelEntity | null>}\r\n   */\r\n  public panelContentChanged(): Observable<SidebarbarPanelEntity | null> {\r\n    return this._sidebarPanelContent.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Método para obtener el contenido del panel\r\n   * @returns {SidebarbarPanelEntity | null}\r\n   */\r\n  public getPanelContent(): SidebarbarPanelEntity | null {\r\n    return this._sidebarPanelContent.value;\r\n  }\r\n\r\n  /**\r\n   * Método para establecer el contenido del panel\r\n   * @param {SidebarbarPanelEntity} data\r\n   */\r\n  private setPanelContent(data: SidebarbarPanelEntity): void {\r\n    this._sidebarPanelContent.next(data);\r\n  }\r\n\r\n  /**\r\n   * Método para abrir el panel con un contenido\r\n   * @param {SidebarbarPanelEntity} data\r\n   */\r\n  public open(data?: SidebarbarPanelEntity): void {\r\n\r\n    if (data && Object.keys(data).length > 0)\r\n      this.setPanelContent(data);\r\n\r\n    if (!this.isPanelVisibleValue()) {\r\n      this.setPanelVisibility(true);\r\n      this.document.body.classList.add('sidebar-opened');\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Método para cerrar el panel\r\n   */\r\n  public close(): void {\r\n    this._isPanelVisible.next(false);\r\n    this._sidebarPanelContent.next(null);\r\n    this.document.body.classList.remove('sidebar-opened');\r\n  }\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "document",
            "type": "Document",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 12,
        "jsdoctags": [
          {
            "name": "document",
            "type": "Document",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "ThemesService",
      "id": "injectable-ThemesService-2873a1bfa0ae4ffe3b2e2ebcdefedb331d46220f645ffe4f9ab38a3cab672f3ce8f1add2d1ab3ba4e29cd462c949d5cb31bdea04ef5f425495e1caf8ad57b109",
      "file": "src/app/shared/components/theme-toggle/service/themes.service.ts",
      "properties": [
        {
          "name": "colorScheme",
          "defaultValue": "signal(LIGHT_THEME)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<ThemeType>",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [123]
        },
        {
          "name": "renderer",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Renderer2",
          "optional": false,
          "description": "",
          "line": 10,
          "modifierKind": [123]
        }
      ],
      "methods": [
        {
          "name": "_detectPrefersColorScheme",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 23,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para detectar si el navegador admite `prefers-color-scheme` y establecer el tema en consecuencia\n- Si el navegador admite `prefers-color-scheme`, establecemos el tema en función del sistema operativo o del navegador\n- Si el navegador no admite `prefers-color-scheme`, establecer el tema claro por defecto\n",
          "description": "<p>Función para detectar si el navegador admite <code>prefers-color-scheme</code> y establecer el tema en consecuencia</p>\n<ul>\n<li>Si el navegador admite <code>prefers-color-scheme</code>, establecemos el tema en función del sistema operativo o del navegador</li>\n<li>Si el navegador no admite <code>prefers-color-scheme</code>, establecer el tema claro por defecto</li>\n</ul>\n",
          "modifierKind": [123]
        },
        {
          "name": "_getColorScheme",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 46,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para obtener el tema del localStorage o del sistema operativo\n- Si el tema del localStorage existe, lo establecemos.\n- Si no, detectamos el tema del sistema operativo o del navegador.\n",
          "description": "<p>Función para obtener el tema del localStorage o del sistema operativo</p>\n<ul>\n<li>Si el tema del localStorage existe, lo establecemos.</li>\n<li>Si no, detectamos el tema del sistema operativo o del navegador.</li>\n</ul>\n",
          "modifierKind": [123]
        },
        {
          "name": "_setColorScheme",
          "args": [
            {
              "name": "scheme",
              "type": "ThemeType",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 36,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para establecer el tema en el servicio y en localStorage\n",
          "description": "<p>Función para establecer el tema en el servicio y en localStorage</p>\n",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": {
                "pos": 1488,
                "end": 1494,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "scheme"
              },
              "type": "ThemeType",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1470,
                "end": 1475,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>Tema a establecer</li>\n</ul>\n",
              "typeExpression": {
                "pos": 1476,
                "end": 1487,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 1477,
                  "end": 1486,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 1477,
                    "end": 1486,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "ThemeType"
                  }
                }
              }
            }
          ]
        },
        {
          "name": "getCurrentTheme",
          "args": [],
          "optional": false,
          "returnType": "ThemeType",
          "typeParameters": [],
          "line": 82,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para obtener el tema actual\n",
          "description": "<p>Función para obtener el tema actual</p>\n",
          "jsdoctags": [
            {
              "tagName": {
                "pos": 3211,
                "end": 3218,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "returns"
              },
              "comment": "",
              "returnType": ""
            }
          ]
        },
        {
          "name": "initTheme",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 62,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para inicializar el tema en el servicio y establecer la clase correspondiente en el body\n",
          "description": "<p>Función para inicializar el tema en el servicio y establecer la clase correspondiente en el body</p>\n"
        },
        {
          "name": "setTheme",
          "args": [
            {
              "name": "scheme",
              "type": "ThemeType",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 72,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para establecer el tema en el servicio y establecer la clase correspondiente en el body.\nEsta función se usa para cambiar el tema manualmente desde el componente `theme-toggle`\n",
          "description": "<p>Función para establecer el tema en el servicio y establecer la clase correspondiente en el body.\nEsta función se usa para cambiar el tema manualmente desde el componente <code>theme-toggle</code></p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 2861,
                "end": 2867,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "scheme"
              },
              "type": "ThemeType",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2855,
                "end": 2860,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable, Renderer2, RendererFactory2, WritableSignal, signal } from '@angular/core';\r\nimport { environment } from '@environments/environment';\r\nimport { DARK_THEME, LIGHT_THEME, PREFIX_THEME_CLASS, ThemeType } from '../model/theme.entity';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ThemesService {\r\n\r\n  private renderer: Renderer2;\r\n  private colorScheme: WritableSignal<ThemeType> = signal(LIGHT_THEME);\r\n\r\n  constructor(rendererFactory: RendererFactory2) {\r\n    // Crea un nuevo renderizador desde renderFactory, para que sea posible usar renderer2 en un servicio\r\n    this.renderer = rendererFactory.createRenderer(null, null);\r\n  }\r\n\r\n  /**\r\n   * Función para detectar si el navegador admite `prefers-color-scheme` y establecer el tema en consecuencia\r\n   * - Si el navegador admite `prefers-color-scheme`, establecemos el tema en función del sistema operativo o del navegador\r\n   * - Si el navegador no admite `prefers-color-scheme`, establecer el tema claro por defecto\r\n   */\r\n  private _detectPrefersColorScheme() {\r\n    // Primero detectamos si el navegador admite `prefers-color-scheme`\r\n    if (window.matchMedia('(prefers-color-scheme)').media !== 'not all') {\r\n      this.colorScheme.set(window.matchMedia('(prefers-color-scheme: dark)').matches ? DARK_THEME : LIGHT_THEME);\r\n    } else {\r\n      this.colorScheme.set(LIGHT_THEME);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Función para establecer el tema en el servicio y en localStorage\r\n   * @param {ThemeType} scheme - Tema a establecer\r\n   */\r\n  private _setColorScheme(scheme: ThemeType) {\r\n    this.colorScheme.set(scheme);\r\n    localStorage.setItem(environment.THEME_STORAGE_KEY, scheme);\r\n  }\r\n\r\n  /**\r\n   * Función para obtener el tema del localStorage o del sistema operativo\r\n   * - Si el tema del localStorage existe, lo establecemos.\r\n   * - Si no, detectamos el tema del sistema operativo o del navegador.\r\n   */\r\n  private _getColorScheme() {\r\n\r\n    // Obtenemos el tema del localStorage si existe\r\n    const localStorageColorScheme: ThemeType | null = (localStorage.getItem(environment.THEME_STORAGE_KEY) as ThemeType) || null;\r\n\r\n    // Si el tema del localStorage existe, lo establecemos. Si no, detectamos el tema del sistema operativo\r\n    if (localStorageColorScheme) {\r\n      this.colorScheme.set(localStorageColorScheme);\r\n    } else {\r\n      this._detectPrefersColorScheme();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Función para inicializar el tema en el servicio y establecer la clase correspondiente en el body\r\n   */\r\n  initTheme() {\r\n    this._getColorScheme();\r\n    this.renderer.addClass(document.body, PREFIX_THEME_CLASS + this.colorScheme());\r\n  }\r\n\r\n  /**\r\n   * Función para establecer el tema en el servicio y establecer la clase correspondiente en el body.\r\n   * Esta función se usa para cambiar el tema manualmente desde el componente `theme-toggle`\r\n   * @param scheme\r\n   */\r\n  setTheme(scheme: ThemeType) {\r\n    this._setColorScheme(scheme);\r\n    this.renderer.removeClass(document.body, PREFIX_THEME_CLASS + (this.colorScheme() === DARK_THEME ? LIGHT_THEME : DARK_THEME));\r\n    this.renderer.addClass(document.body, PREFIX_THEME_CLASS + scheme);\r\n  }\r\n\r\n  /**\r\n   * Función para obtener el tema actual\r\n   * @returns {ThemeType}\r\n   */\r\n  getCurrentTheme(): ThemeType {\r\n    return this.colorScheme();\r\n  }\r\n\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "rendererFactory",
            "type": "RendererFactory2",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "rendererFactory",
            "type": "RendererFactory2",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "type": "injectable"
    }
  ],
  "guards": [],
  "interceptors": [],
  "classes": [],
  "directives": [
    {
      "name": "AutofocusDirective",
      "id": "directive-AutofocusDirective-7a3a86c20dc0ba9e3ca967da01694f0b9c7b6981bd33bc05e742a898abacba84dc30df0dc59213afa0d1acd35eee55a85bdc8a551781b6f1bcc760cca8729f29",
      "file": "src/app/shared/directives/autofocus.directive.ts",
      "type": "directive",
      "description": "<p>autoFocus\nDirectiva para hacer focus en un elemento de forma automática.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;input type=&#39;text&#39; autoFocus/&gt;\n&lt;button autoFocus&gt;Botón&lt;/button&gt;</code></pre></div>",
      "rawdescription": "\n\nautoFocus\nDirectiva para hacer focus en un elemento de forma automática.\n```html\n<input type='text' autoFocus/>\n<button autoFocus>Botón</button>\n```",
      "sourceCode": "import { AfterContentInit, Directive, ElementRef, Input } from \"@angular/core\";\r\n\r\n/**\r\n * @name\r\n * autoFocus\r\n * @description\r\n * Directiva para hacer focus en un elemento de forma automática.\r\n * @example\r\n * <input type='text' autoFocus/>\r\n * <button autoFocus>Botón</button>\r\n */\r\n@Directive({\r\n  selector: \"[autoFocus]\",\r\n  standalone: true\r\n})\r\nexport class AutofocusDirective implements AfterContentInit {\r\n\r\n  public constructor(private el: ElementRef) { }\r\n\r\n  public ngAfterContentInit() {\r\n    setTimeout(() => this.el.nativeElement.focus(), 100);\r\n  }\r\n}\r\n",
      "selector": "[autoFocus]",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 20,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "implements": ["AfterContentInit"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "el",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 16,
        "modifierKind": [125],
        "jsdoctags": [
          {
            "name": "el",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "CapsLockDirective",
      "id": "directive-CapsLockDirective-789c27a436d31613be1cdeb784dbab35e013e210c57f83d5873575acecebda9ac48b29372737c065c1475d81cb523a8806789bb4e7768c00bd0e2d57f666bfce",
      "file": "src/app/shared/directives/caps-lock.directive.ts",
      "type": "directive",
      "description": "<p>pesCapsLock\nDirectiva para detectar si la tecla de bloqueo de mayúsculas está activada.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;input pesCapsLock (capsLock)=&quot;onCapsLock($event)&quot;&gt;</code></pre></div>",
      "rawdescription": "\n\npesCapsLock\nDirectiva para detectar si la tecla de bloqueo de mayúsculas está activada.\n```html\n<input pesCapsLock (capsLock)=\"onCapsLock($event)\">\n```",
      "sourceCode": "import { Directive, EventEmitter, HostListener, Output } from '@angular/core';\r\n\r\n/**\r\n * @name\r\n * pesCapsLock\r\n * @description\r\n * Directiva para detectar si la tecla de bloqueo de mayúsculas está activada.\r\n * @example\r\n * <input pesCapsLock (capsLock)=\"onCapsLock($event)\">\r\n */\r\n@Directive({\r\n  selector: '[pesCapsLock]',\r\n  standalone: true\r\n})\r\nexport class CapsLockDirective {\r\n\r\n  @Output('capsLock') capsLock = new EventEmitter<boolean>();\r\n\r\n  @HostListener('window:keydown', ['$event'])\r\n  @HostListener('window:keyup', ['$event'])\r\n  @HostListener('window:click', ['$event'])\r\n  @HostListener('document:click', ['$event'])\r\n  @HostListener('document:touchstart', ['$event'])\r\n  checkCapsLock(event: KeyboardEvent): void {\r\n    this.capsLock.emit(event.getModifierState && event.getModifierState('CapsLock'));\r\n  }\r\n}\r\n",
      "selector": "[pesCapsLock]",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [],
      "outputsClass": [
        {
          "name": "capsLock",
          "defaultValue": "new EventEmitter<boolean>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "EventEmitter"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "document:click",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24
        },
        {
          "name": "document:touchstart",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24
        },
        {
          "name": "window:click",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24
        },
        {
          "name": "window:keydown",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24
        },
        {
          "name": "window:keyup",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "checkCapsLock",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 24,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'window:keydown', ['$event']"
            },
            {
              "name": "HostListener",
              "stringifiedArguments": "'window:keyup', ['$event']"
            },
            {
              "name": "HostListener",
              "stringifiedArguments": "'window:click', ['$event']"
            },
            {
              "name": "HostListener",
              "stringifiedArguments": "'document:click', ['$event']"
            },
            {
              "name": "HostListener",
              "stringifiedArguments": "'document:touchstart', ['$event']"
            }
          ],
          "modifierKind": [170, 170, 170, 170, 170],
          "jsdoctags": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "extends": []
    },
    {
      "name": "CardHeaderDirective",
      "id": "directive-CardHeaderDirective-83040e9d60b336d5507fe9a433a40a3fa02143c89838640a6e21a5562428d9a7749e747bef42a2db881e0ecd3614bc19b5dd898f3c9bc3fac98a6c109a77d659",
      "file": "src/app/shared/components/card/card-header/card-header.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: 'neo-card-header',\r\n  exportAs: 'neoCardHeader',\r\n  standalone: true\r\n})\r\nexport class CardHeaderDirective {\r\n\r\n  constructor() { }\r\n\r\n}\r\n",
      "selector": "neo-card-header",
      "providers": [],
      "exportAs": "neoCardHeader",
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 8
      }
    },
    {
      "name": "ClickableDirective",
      "id": "directive-ClickableDirective-df85de1dd253eacaefc34e0f4a281f2330837a1fd709bcd4e7b8675c57eaaf9f5d1e191a8076d9b9d731a95e5e72a18fbaaa65c3bfc0a8d7caa7231cd1bb6489",
      "file": "src/app/shared/directives/clickable.directive.ts",
      "type": "directive",
      "description": "<p>clickable\nCon esta directiva permitimos que un elemento sea &quot;interactuable&quot; tanto mediante un click normal de ratón,\ncomo al posicionarnos encima tabulando (de ahí el tabindex=0), y pulsar enter / space para ello.\nPodemos usar, junto con esta, la propia directiva &quot;(click)&quot; para ejecutar lo que queramos</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;button clickable (click)=&quot;doSomething()&quot;&gt;Click me!&lt;/button&gt;</code></pre></div>",
      "rawdescription": "\n\nclickable\nCon esta directiva permitimos que un elemento sea \"interactuable\" tanto mediante un click normal de ratón,\ncomo al posicionarnos encima tabulando (de ahí el tabindex=0), y pulsar enter / space para ello.\nPodemos usar, junto con esta, la propia directiva \"(click)\" para ejecutar lo que queramos\n```html\n<button clickable (click)=\"doSomething()\">Click me!</button>\n```",
      "sourceCode": "import { Directive, ElementRef, HostListener } from \"@angular/core\";\r\n\r\n/**\r\n * @name\r\n * clickable\r\n * @description\r\n * Con esta directiva permitimos que un elemento sea \"interactuable\" tanto mediante un click normal de ratón,\r\n * como al posicionarnos encima tabulando (de ahí el tabindex=0), y pulsar enter / space para ello.\r\n * Podemos usar, junto con esta, la propia directiva \"(click)\" para ejecutar lo que queramos\r\n * @example\r\n * <button clickable (click)=\"doSomething()\">Click me!</button>\r\n */\r\n@Directive({\r\n  selector: \"[clickable]\",\r\n  host: {\r\n    \"tabindex\": \"0\",\r\n    \"role\": \"button\"\r\n  },\r\n  standalone: true\r\n})\r\nexport class ClickableDirective {\r\n\r\n  constructor(protected eleRef: ElementRef) { }\r\n\r\n  @HostListener('keydown.enter', [\"$event\"])\r\n  @HostListener('keydown.space', [\"$event\"])\r\n  public onClickElement(): void {\r\n    this.eleRef.nativeElement.click();\r\n  }\r\n\r\n}\r\n",
      "selector": "[clickable]",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "keydown.enter",
          "args": [],
          "argsDecorator": ["$event"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27
        },
        {
          "name": "keydown.space",
          "args": [],
          "argsDecorator": ["$event"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "onClickElement",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 27,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'keydown.enter', ['$event']"
            },
            {
              "name": "HostListener",
              "stringifiedArguments": "'keydown.space', ['$event']"
            }
          ],
          "modifierKind": [170, 170, 125]
        }
      ],
      "extends": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "eleRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 21,
        "jsdoctags": [
          {
            "name": "eleRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClickOutsideDirective",
      "id": "directive-ClickOutsideDirective-042ef3774504edd18111016ffdec2b587fb2ded3d68fe6cd4604367ddaaa41120c1b357fac5dc66291c64eff342bd5e74295a6fbe45599339cb9fe1b9088aea4",
      "file": "src/app/shared/directives/click-outside.directive.ts",
      "type": "directive",
      "description": "<p>clickOutside\nDirectiva para detectar si se ha hecho click fuera de un elemento.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;div clickOutside (clickOutside)=&quot;onClickedOutside($event)&quot;&gt;&lt;/div&gt;</code></pre></div>",
      "rawdescription": "\n\nclickOutside\nDirectiva para detectar si se ha hecho click fuera de un elemento.\n```html\n<div clickOutside (clickOutside)=\"onClickedOutside($event)\"></div>\n```",
      "sourceCode": "import { Directive, ElementRef, Output, EventEmitter, HostListener } from '@angular/core';\r\n\r\n/**\r\n * @name\r\n * clickOutside\r\n * @description\r\n * Directiva para detectar si se ha hecho click fuera de un elemento.\r\n * @example\r\n * <div clickOutside (clickOutside)=\"onClickedOutside($event)\"></div>\r\n */\r\n@Directive({\r\n  selector: '[clickOutside]',\r\n  standalone: true\r\n})\r\nexport class ClickOutsideDirective {\r\n\r\n  constructor(private _elementRef: ElementRef) {}\r\n\r\n  @Output()\r\n  public clickOutside = new EventEmitter();\r\n\r\n  @HostListener('document:click', ['$event.target'])\r\n  public onClick(targetElement: any) {\r\n    const clickedInside = this._elementRef.nativeElement.contains(targetElement);\r\n    if (!clickedInside)\r\n      this.clickOutside.emit(null);\r\n  }\r\n}\r\n",
      "selector": "[clickOutside]",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [],
      "outputsClass": [
        {
          "name": "clickOutside",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "EventEmitter"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "document:click",
          "args": [
            {
              "name": "targetElement",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event.target"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "onClick",
          "args": [
            {
              "name": "targetElement",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 23,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'document:click', ['$event.target']"
            }
          ],
          "modifierKind": [170, 125],
          "jsdoctags": [
            {
              "name": "targetElement",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "extends": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 15,
        "jsdoctags": [
          {
            "name": "_elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "CustomThemesDirective",
      "id": "directive-CustomThemesDirective-2fa19453e375338b8ba6e225da75f9e510bbae90e901fc156564bb79200a024fb9861486925493b8e5f5840938cb5192105a60755800e4be03db733682f8734c",
      "file": "src/app/shared/components/theme-toggle/directive/custom-themes.directive.ts",
      "type": "directive",
      "description": "<p>theme\nDirectiva que asignará el tema por actual mediante una clase a un div o cualquier otro elemento HTML que se le asigne</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;div theme&gt;&lt;/div&gt;</code></pre></div>",
      "rawdescription": "\n\ntheme\nDirectiva que asignará el tema por actual mediante una clase a un div o cualquier otro elemento HTML que se le asigne\n```html\n<div theme></div>\n```",
      "sourceCode": "import { Directive, HostBinding, Injector, OnInit, Signal, computed, effect, signal } from '@angular/core';\r\nimport { ThemesService } from '@shared/components/theme-toggle/service/themes.service';\r\nimport { LIGHT_THEME } from '../model/theme.entity';\r\n\r\n/**\r\n * @name\r\n * theme\r\n * @description\r\n * Directiva que asignará el tema por actual mediante una clase a un div o cualquier otro elemento HTML que se le asigne\r\n * @example\r\n * <div theme></div>\r\n */\r\n@Directive({\r\n  selector: '[theme]',\r\n  standalone: true,\r\n})\r\nexport class CustomThemesDirective implements OnInit {\r\n\r\n  @HostBinding('class') classTheme = LIGHT_THEME; // Por defecto el tema es light\r\n  _classTheme: Signal<string> = signal(LIGHT_THEME);\r\n\r\n  constructor(\r\n    private readonly injector: Injector,\r\n    private readonly _themeService: ThemesService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this._classTheme = computed(() => this._themeService.getCurrentTheme());\r\n    effect(() => this.classTheme = this._classTheme(), { injector: this.injector });\r\n  }\r\n}\r\n",
      "selector": "[theme]",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class",
          "defaultValue": "LIGHT_THEME",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "any",
          "decorators": []
        }
      ],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "_classTheme",
          "defaultValue": "signal(LIGHT_THEME)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Signal<string>",
          "optional": false,
          "description": "",
          "line": 20
        },
        {
          "name": "classTheme",
          "defaultValue": "LIGHT_THEME",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 19,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class'"
            }
          ],
          "modifierKind": [170]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 27,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "extends": [],
      "implements": ["OnInit"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "injector",
            "type": "Injector",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_themeService",
            "type": "ThemesService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 20,
        "jsdoctags": [
          {
            "name": "injector",
            "type": "Injector",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_themeService",
            "type": "ThemesService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "EscapeKeyDirective",
      "id": "directive-EscapeKeyDirective-659fd5aabe3a97ab2d71990e69a128774b4f3bb18327138ce09ad20657c34d0d874f214baf3a2f7968dfead10281f27cc1ff39ad7f5f17e8ca68dc44f45b07f8",
      "file": "src/app/shared/directives/escape-key.directive.ts",
      "type": "directive",
      "description": "<p>escapeKey\nDirectiva que permite detectar el evento de escape y emitir un evento para, por ejemplo, cerrar un modal, un menú, etc.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;div escapeKey (escapeKey)=&quot;onEscapeKey($event)&quot;&gt;&lt;/div&gt;</code></pre></div>",
      "rawdescription": "\n\nescapeKey\nDirectiva que permite detectar el evento de escape y emitir un evento para, por ejemplo, cerrar un modal, un menú, etc.\n```html\n<div escapeKey (escapeKey)=\"onEscapeKey($event)\"></div>\n```",
      "sourceCode": "import { Directive, Output, EventEmitter, HostListener } from '@angular/core';\r\n\r\n/**\r\n * @name\r\n * escapeKey\r\n * @description\r\n * Directiva que permite detectar el evento de escape y emitir un evento para, por ejemplo, cerrar un modal, un menú, etc.\r\n * @example\r\n * <div escapeKey (escapeKey)=\"onEscapeKey($event)\"></div>\r\n */\r\n@Directive({\r\n  selector: '[escapeKey]',\r\n  standalone: true\r\n})\r\nexport class EscapeKeyDirective {\r\n  constructor() {}\r\n\r\n  @Output()\r\n  public escapeKey = new EventEmitter();\r\n\r\n  @HostListener('keydown', ['$event'])\r\n  _onKeydownHandler(event: KeyboardEvent) {\r\n    const keyCode = event.key;\r\n    if (keyCode === 'Escape') {\r\n      this.escapeKey.emit(event);\r\n    }\r\n  }\r\n}\r\n",
      "selector": "[escapeKey]",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [],
      "outputsClass": [
        {
          "name": "escapeKey",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "EventEmitter"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "keydown",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "_onKeydownHandler",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 22,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'keydown', ['$event']"
            }
          ],
          "modifierKind": [170],
          "jsdoctags": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "extends": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 15
      }
    },
    {
      "name": "ResizeColumnDirective",
      "id": "directive-ResizeColumnDirective-157274d3429bddf96f09c7ee2fbef6c5687ec835f453a8930549da571795c379c143cf9985910c0a1da61534bf8c051ebd4b055b9dc32b7f239395a96e9fc122",
      "file": "src/app/shared/directives/resize-column.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, OnInit, Renderer2, Input, ElementRef, HostListener } from \"@angular/core\";\r\nimport { IColumnsFormat } from \"@entities/table.entity\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\n\r\n@Directive({\r\n  selector: \"[resizeColumn]\",\r\n  standalone: true\r\n})\r\nexport class ResizeColumnDirective implements OnInit {\r\n\r\n  @Input(\"resizeColumn\") resizable: boolean = true;\r\n  @Input() index!: number;\r\n  @Input() column!: IColumnsFormat;\r\n\r\n  private startX!: number;\r\n  private startWidth!: number;\r\n  private columnElement!: HTMLElement;\r\n  private table!: HTMLElement;\r\n  private pressed!: boolean;\r\n\r\n  constructor(\r\n    private readonly renderer: Renderer2,\r\n    private readonly el: ElementRef,\r\n    private readonly _translateService: TranslateService\r\n  ) {\r\n    this.columnElement = this.el.nativeElement;\r\n  }\r\n\r\n  ngAfterContentChecked(): void {\r\n    if (this.column.width)\r\n      this.setColumnSize(this.column.width);\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    if (this.resizable) {\r\n      const row = this.renderer.parentNode(this.columnElement);\r\n      const thead = this.renderer.parentNode(row);\r\n      this.table = this.renderer.parentNode(thead);\r\n\r\n      const resizer = this.renderer.createElement(\"span\");\r\n      resizer.setAttribute(\"title\", this._translateService.instant(\"TABLE.RESIZE_COLUMN\"));\r\n      this.renderer.addClass(resizer, \"resize-holder\");\r\n      this.renderer.appendChild(this.columnElement, resizer);\r\n      this.renderer.listen(resizer, \"click\", this.onClick);\r\n      this.renderer.listen(resizer, \"mousedown\", this.onMouseDown);\r\n      this.renderer.listen(this.table, \"mousemove\", this.onMouseMove);\r\n      this.renderer.listen(\"document\", \"mouseup\", this.onMouseUp);\r\n    }\r\n  }\r\n\r\n  onClick = (event: MouseEvent) => {\r\n    event?.preventDefault();\r\n    event?.stopPropagation();\r\n  };\r\n\r\n  onMouseDown = (event: MouseEvent) => {\r\n    event?.preventDefault();\r\n    event?.stopPropagation();\r\n    this.pressed = true;\r\n    this.startX = event.pageX;\r\n    this.startWidth = this.columnElement.offsetWidth;\r\n  };\r\n\r\n  onMouseMove = (event: MouseEvent) => {\r\n\r\n    event?.preventDefault();\r\n    event?.stopPropagation();\r\n\r\n    if (this.pressed && event.buttons) {\r\n\r\n      // Add class to table to prevent text selection\r\n      this.renderer.addClass(this.table, \"resizing\");\r\n\r\n      // Calculate width of column\r\n      let width = this.startWidth + (event.pageX - this.startX);\r\n\r\n      // Set min and max width\r\n      this.setColumnSize(width);\r\n    }\r\n  };\r\n\r\n  onMouseUp = (event: MouseEvent) => {\r\n\r\n    event?.preventDefault();\r\n    event?.stopPropagation();\r\n\r\n    if (this.pressed) {\r\n      this.pressed = false;\r\n      this.renderer.removeClass(this.table, \"resizing\");\r\n    }\r\n  };\r\n\r\n  setColumnSize(width: string | number) {\r\n    const tableCells = Array.from(this.table.querySelectorAll(\".mat-mdc-row\")).map(\r\n      (row: any) => row.querySelectorAll(\".mat-mdc-cell\").item(this.index)\r\n    );\r\n\r\n    // Set table header width\r\n    this.renderer.setStyle(this.columnElement, \"min-width\", `${width}px`);\r\n    this.renderer.setStyle(this.columnElement, \"max-width\", `${width}px`);\r\n    this.renderer.setStyle(this.columnElement, \"width\", `${width}px`);\r\n    this.column.width = width;\r\n\r\n    // Set table cells width\r\n    for (const cell of tableCells) {\r\n      this.renderer.setStyle(cell, \"min-width\", `${width}px`);\r\n      this.renderer.setStyle(cell, \"max-width\", `${width}px`);\r\n      this.renderer.setStyle(cell, \"width\", `${width}px`);\r\n    }\r\n  }\r\n}\r\n",
      "selector": "[resizeColumn]",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "name": "column",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 13,
          "type": "IColumnsFormat",
          "decorators": []
        },
        {
          "name": "index",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 12,
          "type": "number",
          "decorators": []
        },
        {
          "name": "resizeColumn",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 11,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "columnElement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "HTMLElement",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [123]
        },
        {
          "name": "onClick",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 52
        },
        {
          "name": "onMouseDown",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 57
        },
        {
          "name": "onMouseMove",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 65
        },
        {
          "name": "onMouseUp",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 83
        },
        {
          "name": "pressed",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 19,
          "modifierKind": [123]
        },
        {
          "name": "startWidth",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [123]
        },
        {
          "name": "startX",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [123]
        },
        {
          "name": "table",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "HTMLElement",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [123]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterContentChecked",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 29,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 34,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "setColumnSize",
          "args": [
            {
              "name": "width",
              "type": "string | number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 94,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "width",
              "type": "string | number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "extends": [],
      "implements": ["OnInit"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "el",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_translateService",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 19,
        "jsdoctags": [
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_translateService",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "TabContentDirective",
      "id": "directive-TabContentDirective-1011fb6e4851568a34b7604f76801afd3c773d1ba3320c7732cdb5c16073a17d105c7e2a5ed75eb6d0ec295eae29b77731f8a52511f58649e8657a6d5b4a2c28",
      "file": "src/app/shared/components/tabs/directives/tab-content.directive.ts",
      "type": "directive",
      "description": "<p>TabContentDirective\nDirectiva para indicar donde irá el contenido de una tab junto con los componentes <code>neo-tabs-header</code>, <code>neo-tabs-body</code> y <code>neo-tabs-footer</code>.\nÚtil cuándo se quiere tener un control de la estructura de las tabs y el contenido de éstas no se encuentra como hijo directo del componente <code>neo-tabs</code>.\nPor ejemplo: tenemos <neo-tabs></neo-tabs> y dentro de éste un componente hijo diferente.\nEn este caso, se puede utilizar esta directiva para indicar que el contenido de las tabs se encuentra dentro de este componente hijo.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;div neoTabContent&gt;\n &lt;neo-tabs-header&gt;&lt;/neo-tabs-header&gt;\n &lt;neo-tabs-body&gt;&lt;/neo-tabs-body&gt;\n &lt;neo-tabs-footer&gt;&lt;/neo-tabs-footer&gt;\n&lt;/div&gt;</code></pre></div>",
      "rawdescription": "\n\nTabContentDirective\nDirectiva para indicar donde irá el contenido de una tab junto con los componentes `neo-tabs-header`, `neo-tabs-body` y `neo-tabs-footer`.\nÚtil cuándo se quiere tener un control de la estructura de las tabs y el contenido de éstas no se encuentra como hijo directo del componente `neo-tabs`.\nPor ejemplo: tenemos <neo-tabs></neo-tabs> y dentro de éste un componente hijo diferente.\nEn este caso, se puede utilizar esta directiva para indicar que el contenido de las tabs se encuentra dentro de este componente hijo.\n```html\n<div neoTabContent>\n <neo-tabs-header></neo-tabs-header>\n <neo-tabs-body></neo-tabs-body>\n <neo-tabs-footer></neo-tabs-footer>\n</div>\n```",
      "sourceCode": "import { ContentChild, Directive, HostBinding } from '@angular/core';\r\nimport { TabsHeaderComponent } from '../tabs-item/tabs-header/tabs-header.component';\r\n\r\n/**\r\n * @name\r\n * TabContentDirective\r\n * @description\r\n * Directiva para indicar donde irá el contenido de una tab junto con los componentes `neo-tabs-header`, `neo-tabs-body` y `neo-tabs-footer`.\r\n * Útil cuándo se quiere tener un control de la estructura de las tabs y el contenido de éstas no se encuentra como hijo directo del componente `neo-tabs`.\r\n * Por ejemplo: tenemos <neo-tabs></neo-tabs> y dentro de éste un componente hijo diferente.\r\n * En este caso, se puede utilizar esta directiva para indicar que el contenido de las tabs se encuentra dentro de este componente hijo.\r\n * @example\r\n * <div neoTabContent>\r\n *  <neo-tabs-header></neo-tabs-header>\r\n *  <neo-tabs-body></neo-tabs-body>\r\n *  <neo-tabs-footer></neo-tabs-footer>\r\n * </div>\r\n */\r\n@Directive({\r\n  selector: '[neoTabContent]',\r\n  standalone: true\r\n})\r\nexport class TabContentDirective {\r\n\r\n  @ContentChild(TabsHeaderComponent) tabHeader: TabsHeaderComponent | null = null;\r\n\r\n  @HostBinding('class.tabs__content__item')\r\n  get contentItem() {\r\n    return true;\r\n  }\r\n\r\n  @HostBinding('class.tabs__content__item--no_header')\r\n  get noHeader() {\r\n    return !this.tabHeader;\r\n  }\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n}\r\n",
      "selector": "[neoTabContent]",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class.tabs__content__item",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "class.tabs__content__item--no_header",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "boolean",
          "decorators": []
        }
      ],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "tabHeader",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TabsHeaderComponent | null",
          "optional": false,
          "description": "",
          "line": 25,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "TabsHeaderComponent"
            }
          ],
          "modifierKind": [170]
        }
      ],
      "methodsClass": [],
      "extends": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 35
      },
      "accessors": {
        "contentItem": {
          "name": "contentItem",
          "getSignature": {
            "name": "contentItem",
            "type": "",
            "returnType": "",
            "line": 28
          }
        },
        "noHeader": {
          "name": "noHeader",
          "getSignature": {
            "name": "noHeader",
            "type": "",
            "returnType": "",
            "line": 33
          }
        }
      }
    },
    {
      "name": "TabLabelDirective",
      "id": "directive-TabLabelDirective-70126d1b70df50b9918448d415553e7eb18083866a12b2e1b8a19438c1f0eaf2b128ed6054ccd272b54d96050c361a5744823af7834dfecaa462492a0fb43eef",
      "file": "src/app/shared/components/tabs/directives/tab-label.directive.ts",
      "type": "directive",
      "description": "<p>neoTabsItemLabel\nDirectiva para crear el label de un tab en el componente &quot;neo-tabs-item&quot;\nde forma personalizada. Se puede utilizar tanto con <code>*neoTabsItemLabel</code> en HTML como con <code>[neoTabsItemLabel]</code> en un <code>ng-template</code>.</p>\n",
      "rawdescription": "\n\nneoTabsItemLabel\nDirectiva para crear el label de un tab en el componente \"neo-tabs-item\"\nde forma personalizada. Se puede utilizar tanto con `*neoTabsItemLabel` en HTML como con `[neoTabsItemLabel]` en un `ng-template`.\n",
      "sourceCode": "import { Directive, TemplateRef } from '@angular/core';\r\n\r\n/**\r\n * @name\r\n * neoTabsItemLabel\r\n * @description\r\n * Directiva para crear el label de un tab en el componente \"neo-tabs-item\"\r\n * de forma personalizada. Se puede utilizar tanto con `*neoTabsItemLabel` en HTML como con `[neoTabsItemLabel]` en un `ng-template`.\r\n */\r\n@Directive({\r\n  selector: '[neoTabsItemLabel]'\r\n})\r\nexport class TabLabelDirective {\r\n  constructor(public templateRef: TemplateRef<any>) { }\r\n}\r\n",
      "selector": "[neoTabsItemLabel]",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "templateRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [125]
        }
      ],
      "methodsClass": [],
      "extends": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "templateRef",
            "type": "TemplateRef<any>",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 13,
        "jsdoctags": [
          {
            "name": "templateRef",
            "type": "TemplateRef<any>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    }
  ],
  "components": [
    {
      "name": "BreadcrumComponent",
      "id": "component-BreadcrumComponent-ac0e8e71b4550029a24f8f4d83946334d55321d5232860ad27e0a8f1a0fda679f6366ccc4330c68eb0d24342e187f2c9f9318620cacd8d4e22a998c6b4061db2",
      "file": "src/app/shared/components/breadcrum/breadcrum.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-breadcrum",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./breadcrum.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "breadcrumbs",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BreadCrumbEntity[]",
          "optional": false,
          "description": "<p>Array de <code>breadcrumbs</code> que almacenará las rutas de la aplicación en las que se encuentre el usuario</p>\n",
          "line": 29,
          "rawdescription": "\n\nArray de `breadcrumbs` que almacenará las rutas de la aplicación en las que se encuentre el usuario\n",
          "modifierKind": [125]
        }
      ],
      "methodsClass": [
        {
          "name": "buildBreadCrumb",
          "args": [
            {
              "name": "route",
              "type": "ActivatedRoute",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "url",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "''"
            },
            {
              "name": "breadcrumbs",
              "type": "BreadCrumbEntity[]",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "[]"
            }
          ],
          "optional": false,
          "returnType": "BreadCrumbEntity[]",
          "typeParameters": [],
          "line": 53,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para construir un `breadcrumb` a partir de las rutas de la aplicación en las que se encuentre el usuario\n",
          "description": "<p>Función para construir un <code>breadcrumb</code> a partir de las rutas de la aplicación en las que se encuentre el usuario</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 1678,
                "end": 1683,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "route"
              },
              "type": "ActivatedRoute",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1655,
                "end": 1660,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1661,
                "end": 1677,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 1662,
                  "end": 1676,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 1662,
                    "end": 1676,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "ActivatedRoute"
                  }
                }
              }
            },
            {
              "name": {
                "pos": 1706,
                "end": 1709,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "url"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "''",
              "tagName": {
                "pos": 1691,
                "end": 1696,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1697,
                "end": 1705,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 1698,
                  "end": 1704,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 154
                }
              }
            },
            {
              "name": {
                "pos": 1744,
                "end": 1755,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "breadcrumbs"
              },
              "type": "BreadCrumbEntity[]",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "[]",
              "tagName": {
                "pos": 1717,
                "end": 1722,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1723,
                "end": 1743,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 1724,
                  "end": 1742,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 188,
                  "elementType": {
                    "pos": 1724,
                    "end": 1740,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 1,
                    "kind": 183,
                    "typeName": {
                      "pos": 1724,
                      "end": 1740,
                      "flags": 16777216,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 80,
                      "escapedText": "BreadCrumbEntity"
                    }
                  }
                }
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 38,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "RouterLink"
        },
        {
          "name": "RouterLinkActive"
        },
        {
          "name": "TranslateModule",
          "type": "module"
        },
        {
          "name": "ClickableDirective",
          "type": "directive"
        }
      ],
      "description": "<p>neo-breadcrum\nComponente para la creación de un <code>breadcrumb</code> a partir de las rutas de la aplicación</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;neo-breadcrum&gt;&lt;/neo-breadcrum&gt;</code></pre></div>",
      "rawdescription": "\n\nneo-breadcrum\nComponente para la creación de un `breadcrumb` a partir de las rutas de la aplicación\n```html\n<neo-breadcrum></neo-breadcrum>\n```",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\r\nimport { Router, ActivatedRoute, NavigationEnd, RouterLink, RouterLinkActive } from '@angular/router';\r\nimport { BreadCrumbEntity } from './models/breadcrum.entity';\r\nimport { filter, distinctUntilChanged } from 'rxjs';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { ClickableDirective } from '@shared/directives/clickable.directive';\r\n\r\n/**\r\n * @name\r\n * neo-breadcrum\r\n * @description\r\n * Componente para la creación de un `breadcrumb` a partir de las rutas de la aplicación\r\n * @example\r\n * <neo-breadcrum></neo-breadcrum>\r\n */\r\n@Component({\r\n  selector: 'neo-breadcrum',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterLink, RouterLinkActive, TranslateModule, ClickableDirective],\r\n  templateUrl: './breadcrum.component.html',\r\n  styleUrl: './breadcrum.component.scss'\r\n})\r\nexport class BreadcrumComponent {\r\n\r\n  /**\r\n   * Array de `breadcrumbs` que almacenará las rutas de la aplicación en las que se encuentre el usuario\r\n   */\r\n  public breadcrumbs: BreadCrumbEntity[]\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private activatedRoute: ActivatedRoute,\r\n  ) {\r\n    this.breadcrumbs = this.buildBreadCrumb(this.activatedRoute.root);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.router.events.pipe(\r\n      filter((event) => event instanceof NavigationEnd),\r\n      distinctUntilChanged(),\r\n    ).subscribe(() => {\r\n      this.breadcrumbs = this.buildBreadCrumb(this.activatedRoute.root);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Función para construir un `breadcrumb` a partir de las rutas de la aplicación en las que se encuentre el usuario\r\n   * @param {ActivatedRoute} route\r\n   * @param {string} url\r\n   * @param {BreadCrumbEntity[]} breadcrumbs\r\n   */\r\n  buildBreadCrumb(route: ActivatedRoute, url: string = '', breadcrumbs: BreadCrumbEntity[] = []): BreadCrumbEntity[] {\r\n\r\n    // Si no hay `routeConfig` disponible, significa que estamos en la ruta inicial\r\n    let label = route.routeConfig && route.routeConfig.data ? route.routeConfig.data['breadcrumb'] : '';\r\n    let path = route.routeConfig && route.routeConfig.data ? route.routeConfig.path : '';\r\n\r\n    // Si la ruta es una ruta dinámica como ':id', la eliminamos\r\n    const lastRoutePart = path?.split('/').pop() || '';\r\n    const isDynamicRoute = lastRoutePart?.startsWith(':');\r\n    if (isDynamicRoute && !!route.snapshot) {\r\n      const paramName = lastRoutePart?.split(':')[1];\r\n      path = path?.replace(lastRoutePart, route.snapshot.params[paramName]);\r\n      label = route.snapshot.params[paramName];\r\n    }\r\n\r\n    // En `routeConfig` la ruta completa no está disponible, por lo que la reconstruimos cada vez\r\n    const nextUrl = path ? `${url}/${path}` : url;\r\n\r\n    const breadcrumb: BreadCrumbEntity = {\r\n      label: label,\r\n      url: nextUrl,\r\n    };\r\n\r\n    // Solo añadiremos rutas cuya etiqueta no esté vacía\r\n    const newBreadcrumbs = breadcrumb.label ? [...breadcrumbs, breadcrumb] : [...breadcrumbs];\r\n    if (route.firstChild) {\r\n      // Si el siguiente es un hijo, seguimos construyendo el breadcrumb\r\n      return this.buildBreadCrumb(route.firstChild, nextUrl, newBreadcrumbs);\r\n    }\r\n    return newBreadcrumbs;\r\n  }\r\n\r\n}\r\n",
      "styleUrl": "./breadcrum.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "activatedRoute",
            "type": "ActivatedRoute",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 29,
        "jsdoctags": [
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "activatedRoute",
            "type": "ActivatedRoute",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "templateData": "<div class=\"breadcrumb\">\r\n  <div\r\n    class=\"breadcrumb__item\"\r\n    clickable\r\n    [title]=\"'APP.HOME' | translate\"\r\n    [routerLink]=\"['/']\"\r\n    [routerLinkActiveOptions]=\"{ exact: true }\"\r\n    routerLinkActive=\"breadcrumb__item--active\"\r\n  >\r\n    {{ \"APP.HOME\" | translate }}\r\n  </div>\r\n  @for (breadcrumb of breadcrumbs; track breadcrumb; let isLast = $last) {\r\n    <i class=\"breadcrumb__separator ri-arrow-right-s-line\"></i>\r\n    <div\r\n      class=\"breadcrumb__item\"\r\n      clickable\r\n      [title]=\"breadcrumb.label | translate\"\r\n      [routerLink]=\"[breadcrumb.url]\"\r\n      [routerLinkActiveOptions]=\"{ exact: true }\"\r\n      routerLinkActive=\"breadcrumb__item--active\"\r\n    >\r\n      {{ breadcrumb.label | translate }}\r\n    </div>\r\n  }\r\n</div>\r\n"
    },
    {
      "name": "ButtonComponent",
      "id": "component-ButtonComponent-c1e0e7980a0b44579d490a21fdf4e72a40b6b3157e5707c230bb37208ec5b5e42d38509dedfb07eee0af6f6e033fda7fa8cbd69931e0fdf41f5e3615ac18f292",
      "file": "src/app/shared/components/button/button.component.ts",
      "encapsulation": ["ViewEncapsulation.None"],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-button",
      "styleUrls": ["./button.component.scss"],
      "styles": [],
      "templateUrl": ["./button.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "allWidth",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nPermite que el botón ocupe todo el ancho del contenedor padre (true, false)\n",
          "description": "<p>Permite que el botón ocupe todo el ancho del contenedor padre (true, false)</p>\n",
          "line": 46,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "color",
          "defaultValue": "'primary'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nColor del botón (primary, secondary) de tipo `ButtonColor`\n",
          "description": "<p>Color del botón (primary, secondary) de tipo <code>ButtonColor</code></p>\n",
          "line": 36,
          "type": "ButtonColor",
          "decorators": []
        },
        {
          "name": "disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nPermite añadir la clase `disabled` al botón para deshabilitarlo (true, false)\n",
          "description": "<p>Permite añadir la clase <code>disabled</code> al botón para deshabilitarlo (true, false)</p>\n",
          "line": 56,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "focus",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nPermite indicar si el botón tiene el foco (true, false)\n",
          "description": "<p>Permite indicar si el botón tiene el foco (true, false)</p>\n",
          "line": 61,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "mode",
          "defaultValue": "'button'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nModo del botón (button, icon) de tipo `ButtonMode`\n",
          "description": "<p>Modo del botón (button, icon) de tipo <code>ButtonMode</code></p>\n",
          "line": 31,
          "type": "ButtonMode",
          "decorators": []
        },
        {
          "name": "size",
          "defaultValue": "'m'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nTamaño del botón (xs, s, xm, m, l, xl) de tipo `ButtonSize`\n",
          "description": "<p>Tamaño del botón (xs, s, xm, m, l, xl) de tipo <code>ButtonSize</code></p>\n",
          "line": 41,
          "type": "ButtonSize",
          "decorators": []
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nTítulo del botón\n",
          "description": "<p>Título del botón</p>\n",
          "line": 73,
          "type": "string",
          "decorators": []
        },
        {
          "name": "transparent",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nPermite indicar si el botón es transparente (true, false)\n",
          "description": "<p>Permite indicar si el botón es transparente (true, false)</p>\n",
          "line": 66,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "type",
          "defaultValue": "'button'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nTipo del botón (button, submit, reset) de tipo `ButtonType`\n",
          "description": "<p>Tipo del botón (button, submit, reset) de tipo <code>ButtonType</code></p>\n",
          "line": 51,
          "type": "ButtonType",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "click",
          "defaultValue": "new EventEmitter<any>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nEmite el evento click del botón\n",
          "description": "<p>Emite el evento click del botón</p>\n",
          "line": 84,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "_title",
          "defaultValue": "signal('')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string>",
          "optional": false,
          "description": "",
          "line": 68
        },
        {
          "name": "btnContent",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 26,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'btnContent'"
            }
          ],
          "modifierKind": [170]
        }
      ],
      "methodsClass": [
        {
          "name": "clickOnButton",
          "args": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 95,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nAl hacer click en el botón, emitimos su evento\n",
          "description": "<p>Al hacer click en el botón, emitimos su evento</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 2532,
                "end": 2537,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "event"
              },
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2518,
                "end": 2523,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 2524,
                "end": 2531,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 2525,
                  "end": 2530,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 2525,
                    "end": 2530,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "Event"
                  }
                }
              }
            }
          ]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 86,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [],
      "description": "<p>neo-button\nComponente para crear un botón personalizado con diferentes tamaños, colores y modos.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;neo-button [mode]=&quot;&#39;button&#39;&#39;&quot; [color]=&quot;&#39;red&#39;&#39;&quot; [size]=&quot;&#39;xm&#39;&quot; (click)=&quot;clickButton($event)&quot;&gt;&lt;/neo-button&gt;</code></pre></div>",
      "rawdescription": "\n\nneo-button\nComponente para crear un botón personalizado con diferentes tamaños, colores y modos.\n```html\n<neo-button [mode]=\"'button''\" [color]=\"'red''\" [size]=\"'xm'\" (click)=\"clickButton($event)\"></neo-button>\n```",
      "type": "component",
      "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, ElementRef, EventEmitter, HostBinding, Input, Output, ViewChild, ViewEncapsulation, WritableSignal, signal } from '@angular/core';\r\nimport { ButtonColor, ButtonMode, ButtonSize, ButtonType } from './models/button.entity';\r\n\r\n/**\r\n * @name\r\n * neo-button\r\n * @description\r\n * Componente para crear un botón personalizado con diferentes tamaños, colores y modos.\r\n * @example\r\n * <neo-button [mode]=\"'button''\" [color]=\"'red''\" [size]=\"'xm'\" (click)=\"clickButton($event)\"></neo-button>\r\n */\r\n@Component({\r\n  selector: 'neo-button',\r\n  host: {\r\n    '[class.disabled]': 'disabled',\r\n  },\r\n  templateUrl: './button.component.html',\r\n  styleUrls: ['./button.component.scss'],\r\n  standalone: true,\r\n  imports: [],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class ButtonComponent {\r\n\r\n  @ViewChild('btnContent') btnContent!: ElementRef;\r\n\r\n  /**\r\n   * Modo del botón (button, icon) de tipo `ButtonMode`\r\n   */\r\n  @Input() mode: ButtonMode = 'button';\r\n\r\n  /**\r\n   * Color del botón (primary, secondary) de tipo `ButtonColor`\r\n   */\r\n  @Input() color: ButtonColor = 'primary';\r\n\r\n  /**\r\n   * Tamaño del botón (xs, s, xm, m, l, xl) de tipo `ButtonSize`\r\n   */\r\n  @Input() size: ButtonSize = 'm';\r\n\r\n  /**\r\n   * Permite que el botón ocupe todo el ancho del contenedor padre (true, false)\r\n   */\r\n  @Input() allWidth: boolean = false;\r\n\r\n  /**\r\n   * Tipo del botón (button, submit, reset) de tipo `ButtonType`\r\n   */\r\n  @Input() type: ButtonType = 'button';\r\n\r\n  /**\r\n   * Permite añadir la clase `disabled` al botón para deshabilitarlo (true, false)\r\n   */\r\n  @Input() @HostBinding('class.disabled') disabled: boolean = false;\r\n\r\n  /**\r\n   * Permite indicar si el botón tiene el foco (true, false)\r\n   */\r\n  @Input() focus: boolean = false;\r\n\r\n  /**\r\n   * Permite indicar si el botón es transparente (true, false)\r\n   */\r\n  @Input() transparent: boolean = false;\r\n\r\n  _title: WritableSignal<string> = signal('');\r\n\r\n  /**\r\n   * Título del botón\r\n   */\r\n  @Input() set title(value: string) {\r\n    this._title.set(value);\r\n  }\r\n\r\n  get title(): string {\r\n    return this._title();\r\n  }\r\n\r\n  /**\r\n   * Emite el evento click del botón\r\n   */\r\n  @Output() readonly click: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  ngAfterViewInit(): void {\r\n    if (this._title() === '')\r\n      this._title.set(this.btnContent?.nativeElement?.innerHTML.replace(/(<([^>]+)>)/gi, \"\") || '');\r\n  }\r\n\r\n  /**\r\n   * Al hacer click en el botón, emitimos su evento\r\n   * @param {Event} event\r\n   */\r\n  clickOnButton(event: Event) {\r\n    if (!this.disabled) {\r\n      event?.preventDefault();\r\n      event?.stopPropagation();\r\n      this.click.emit(event);\r\n    }\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import 'base';\r\n\r\n:host {\r\n  display: inline-block;\r\n  cursor: pointer;\r\n}\r\n\r\n[disabled],\r\n.disabled {\r\n  pointer-events: none;\r\n  cursor: default;\r\n}\r\n\r\n.neo-btn {\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  cursor: pointer;\r\n  display: flex;\r\n  border-radius: 5px;\r\n  font-weight: normal;\r\n  font-stretch: normal;\r\n  font-style: normal;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  &--all-width {\r\n    width: 100%;\r\n  }\r\n\r\n  span,\r\n  p,\r\n  div {\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n  }\r\n\r\n  i {\r\n    font-weight: normal;\r\n  }\r\n\r\n  &:not(.neo-btn-icon):not(.neo-btn-transparent) {\r\n    border-width: 1px;\r\n    border-style: solid;\r\n  }\r\n\r\n  &[disabled],\r\n  &.disabled {\r\n    opacity: 0.5;\r\n    pointer-events: none;\r\n    cursor: default;\r\n  }\r\n\r\n  &.neo-btn-xs {\r\n    padding: 3px 10px;\r\n    font-size: 0.6rem;\r\n    font-weight: 600;\r\n    line-height: 12px;\r\n    height: 20px;\r\n\r\n    &.neo-btn-transparent:not(.neo-btn-icon) {\r\n      i {\r\n        font-size: 0.7rem;\r\n      }\r\n    }\r\n  }\r\n\r\n  &.neo-btn-s {\r\n    padding: 5px 10px;\r\n    font-size: 0.75rem;\r\n    font-weight: 600;\r\n    line-height: 0.75rem;\r\n    height: 25px;\r\n\r\n    &.neo-btn-transparent:not(.neo-btn-icon) {\r\n      i {\r\n        font-size: 0.85rem;\r\n      }\r\n    }\r\n  }\r\n\r\n  &.neo-btn-xm {\r\n    padding: 10px 15px;\r\n    font-size: 0.80rem;\r\n    font-weight: 700;\r\n    line-height: 0.80rem;\r\n    height: 30px;\r\n  }\r\n\r\n  &.neo-btn-m {\r\n    padding: 10px 15px;\r\n    font-size: 0.9rem;\r\n    font-weight: 700;\r\n    line-height: 0.9rem;\r\n    height: 35px;\r\n\r\n    &.neo-btn-transparent:not(.neo-btn-icon) {\r\n      i {\r\n        font-size: 1rem;\r\n      }\r\n    }\r\n  }\r\n\r\n  &.neo-btn-l {\r\n    padding: 15px 20px;\r\n    font-size: 1rem;\r\n    font-weight: 700;\r\n    line-height: 1rem;\r\n    height: 40px;\r\n\r\n    &.neo-btn-transparent:not(.neo-btn-icon) {\r\n      i {\r\n        font-size: 1.10rem;\r\n      }\r\n    }\r\n  }\r\n\r\n  &.neo-btn-xl {\r\n    padding: 20px 25px;\r\n    font-size: 1.2rem;\r\n    font-weight: 700;\r\n    line-height: 1.2rem;\r\n    height: 45px;\r\n\r\n    &.neo-btn-transparent:not(.neo-btn-icon) {\r\n      i {\r\n        font-size: 1.30rem;\r\n      }\r\n    }\r\n  }\r\n\r\n  &.neo-btn-transparent {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n    gap: 5px;\r\n    padding: 0px;\r\n\r\n    &:not(.neo-btn-icon) {\r\n      height: auto;\r\n    }\r\n\r\n    &:hover,\r\n    &:focus,\r\n    &:active {\r\n\r\n      span,\r\n      div,\r\n      p {\r\n        text-decoration-line: underline;\r\n      }\r\n    }\r\n  }\r\n\r\n  &.neo-btn-none {\r\n    padding: 0;\r\n  }\r\n\r\n  &.neo-btn-icon {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 5px;\r\n    border-radius: 5px;\r\n\r\n    &.neo-btn-xs {\r\n      font-size: 0.75rem;\r\n      width: 20px;\r\n      height: 20px;\r\n    }\r\n\r\n    &.neo-btn-s {\r\n      font-size: 0.9rem;\r\n      width: 25px;\r\n      height: 25px;\r\n    }\r\n\r\n    &.neo-btn-xm {\r\n      font-size: 1rem;\r\n      width: 30px;\r\n      height: 30px;\r\n    }\r\n\r\n    &.neo-btn-m {\r\n      font-size: 1.25rem;\r\n      width: 35px;\r\n      height: 35px;\r\n    }\r\n\r\n    &.neo-btn-l {\r\n      font-size: 1.35rem;\r\n      width: 40px;\r\n      height: 40px;\r\n    }\r\n\r\n    &.neo-btn-xl {\r\n      font-size: 1.60rem;\r\n      width: 45px;\r\n      height: 45px;\r\n    }\r\n  }\r\n\r\n  &.neo-btn-transparent,\r\n  &.neo-btn-icon {\r\n    box-shadow: none;\r\n    color: var(--text-color);\r\n    background-color: transparent;\r\n    border: none;\r\n  }\r\n\r\n  &.neo-btn-secondary,\r\n  &.neo-btn-primary {\r\n\r\n    &.neo-btn-transparent,\r\n    &.neo-btn-icon {\r\n      box-shadow: none;\r\n      background-color: transparent;\r\n      border: none;\r\n\r\n      &:hover,\r\n      &:focus,\r\n      &:active {\r\n        background-color: transparent;\r\n      }\r\n    }\r\n  }\r\n\r\n  &.neo-btn-primary {\r\n\r\n    &:not(.neo-btn-transparent):not(.neo-btn-icon),\r\n    &.neo-btn-icon:not(.neo-btn-transparent) {\r\n      background-color: var(--bg-btn-primary-color);\r\n      border-color: var(--border-btn-primary-color);\r\n      box-shadow: var(--shadow-btn);\r\n      color: var(--text-btn-primary-color);\r\n\r\n      &:hover,\r\n      &:focus,\r\n      &:active {\r\n        background-color: var(--hover-btn-primary-color);\r\n      }\r\n\r\n      &.neo-btn-icon {\r\n        i::before {\r\n          color: var(--text-btn-primary-color);\r\n        }\r\n      }\r\n    }\r\n\r\n    &.neo-btn-transparent {\r\n      color: var(--text-btn-primary-transparent-color);\r\n\r\n      &.neo-btn-icon {\r\n        color: var(--icon-btn-primary-color);\r\n      }\r\n\r\n      &:not(.neo-btn-icon) {\r\n        i::before {\r\n          color: var(--icon-btn-primary-transparent-color);\r\n        }\r\n      }\r\n    }\r\n\r\n    &.neo-btn-icon {\r\n\r\n      i::before {\r\n        color: var(--icon-btn-primary-color);\r\n      }\r\n\r\n      &.neo-btn-transparent {\r\n\r\n        &:hover,\r\n        &:focus,\r\n        &:active {\r\n          background-color: var(--hover-bg-btn-primary-transparent-color);\r\n        }\r\n      }\r\n\r\n      &:not(.neo-btn-transparent) {\r\n\r\n        &:hover,\r\n        &:focus,\r\n        &:active {\r\n          background-color: var(--hover-btn-primary-color);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  &.neo-btn-secondary {\r\n\r\n    &:not(.neo-btn-transparent):not(.neo-btn-icon),\r\n    &.neo-btn-icon:not(.neo-btn-transparent) {\r\n      background-color: var(--bg-btn-secondary-color);\r\n      border-color: var(--border-btn-secondary-color);\r\n      box-shadow: var(--shadow-btn);\r\n\r\n      color: var(--text-btn-secondary-color);\r\n\r\n      &:hover,\r\n      &:focus,\r\n      &:active {\r\n        background-color: var(--hover-btn-secondary-color);\r\n      }\r\n\r\n      &.neo-btn-icon {\r\n        i::before {\r\n          color: var(--text-btn-secondary-color);\r\n        }\r\n      }\r\n    }\r\n\r\n    &.neo-btn-transparent {\r\n\r\n      color: var(--text-btn-secondary-transparent-color);\r\n\r\n      &.neo-btn-icon {\r\n        i::before {\r\n          color: var(--icon-btn-secondary-color);\r\n        }\r\n      }\r\n\r\n      &:not(.neo-btn-icon) {\r\n        i::before {\r\n          color: var(--icon-btn-secondary-transparent-color);\r\n        }\r\n      }\r\n    }\r\n\r\n    &.neo-btn-icon {\r\n      i::before {\r\n        color: var(--icon-btn-secondary-color);\r\n      }\r\n\r\n      &.neo-btn-transparent {\r\n\r\n        &:hover,\r\n        &:focus,\r\n        &:active {\r\n          background-color: var(--hover-bg-btn-secondary-transparent-color);\r\n        }\r\n      }\r\n\r\n      &:not(.neo-btn-transparent) {\r\n\r\n        &:hover,\r\n        &:focus,\r\n        &:active {\r\n          background-color: var(--hover-btn-secondary-color);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
          "styleUrl": "./button.component.scss"
        }
      ],
      "stylesData": "",
      "extends": [],
      "accessors": {
        "title": {
          "name": "title",
          "setSignature": {
            "name": "title",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 73,
            "rawdescription": "\n\nTítulo del botón\n",
            "description": "<p>Título del botón</p>\n",
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "title",
            "type": "string",
            "returnType": "string",
            "line": 77
          }
        }
      },
      "templateData": "<button\r\n  #btnContent\r\n  class=\"neo-btn neo-btn-{{ size }} neo-btn-{{ color }} neo-btn-{{ mode }}\"\r\n  [class.neo-btn--all-width]=\"allWidth\"\r\n  [attr.type]=\"type\"\r\n  [disabled]=\"disabled\"\r\n  [autofocus]=\"focus\"\r\n  [class.disabled]=\"disabled\"\r\n  [class.neo-btn-transparent]=\"transparent\"\r\n  [title]=\"_title()\"\r\n  [attr.aria-label]=\"_title()\"\r\n  (click)=\"clickOnButton($event)\"\r\n  clickable\r\n>\r\n  <ng-content></ng-content>\r\n</button>\r\n"
    },
    {
      "name": "CalendarPickerComponent",
      "id": "component-CalendarPickerComponent-ecdb0930d4f4f26cae59e5bb98069dbd61a3a84dfa16648f915ab28aa4545bea42ebe7627f1d990a7e485704e359e6b27449e4e726b7a12023155cc1c0519556",
      "file": "src/app/shared/components/form-fields/input-date-picker/calendar-picker/calendar-picker.component.ts",
      "encapsulation": ["ViewEncapsulation.None"],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-calendar-picker",
      "styleUrls": ["./calendar-picker.component.scss"],
      "styles": [],
      "templateUrl": ["./calendar-picker.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "defaultDate",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "string | moment.Moment",
          "decorators": []
        },
        {
          "name": "endDate",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 54,
          "type": "string | moment.Moment",
          "decorators": []
        },
        {
          "name": "startDate",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "string | moment.Moment",
          "decorators": []
        },
        {
          "name": "type",
          "defaultValue": "'day'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "CalendarType",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "dateSelected",
          "defaultValue": "new EventEmitter<DateSelected>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_defaultDate",
          "defaultValue": "signal(moment().format(DEFAULT_FORMAT))",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string>",
          "optional": false,
          "description": "",
          "line": 32
        },
        {
          "name": "_endDate",
          "defaultValue": "signal(moment().format(DEFAULT_FORMAT))",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string>",
          "optional": false,
          "description": "",
          "line": 50
        },
        {
          "name": "_startDate",
          "defaultValue": "signal(moment().format(DEFAULT_FORMAT))",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string>",
          "optional": false,
          "description": "",
          "line": 41
        },
        {
          "name": "allMonths",
          "defaultValue": "signal([])",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string[]>",
          "optional": false,
          "description": "",
          "line": 60
        },
        {
          "name": "allYears",
          "defaultValue": "signal([])",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string[]>",
          "optional": false,
          "description": "",
          "line": 61
        },
        {
          "name": "calendarWeeks",
          "defaultValue": "signal([])",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<Array<any>>",
          "optional": false,
          "description": "",
          "line": 64
        },
        {
          "name": "currentCalendar",
          "defaultValue": "signal(moment().format(DEFAULT_FORMAT))",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string>",
          "optional": false,
          "description": "",
          "line": 67
        },
        {
          "name": "viewMode",
          "defaultValue": "signal('default')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<ViewMode>",
          "optional": false,
          "description": "",
          "line": 59
        }
      ],
      "methodsClass": [
        {
          "name": "chageViewMode",
          "args": [
            {
              "name": "viewMode",
              "type": "ViewMode",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 298,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para cambiar la vista del calendario (días, meses o años)\n",
          "description": "<p>Función para cambiar la vista del calendario (días, meses o años)</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 11202,
                "end": 11210,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "viewMode"
              },
              "type": "ViewMode",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 11185,
                "end": 11190,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 11191,
                "end": 11201,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 11192,
                  "end": 11200,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 11192,
                    "end": 11200,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "ViewMode"
                  }
                }
              }
            },
            {
              "name": {
                "pos": 11232,
                "end": 11237,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "event"
              },
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "pos": 11218,
                "end": 11223,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 11224,
                "end": 11231,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 11225,
                  "end": 11230,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 11225,
                    "end": 11230,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "Event"
                  }
                }
              }
            }
          ]
        },
        {
          "name": "CALENAR.CHANGE_MONTH",
          "args": [
            {
              "name": "month",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 315,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para cambiar el mes\n",
          "description": "<p>Función para cambiar el mes</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 11665,
                "end": 11670,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "month"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 11650,
                "end": 11655,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 11656,
                "end": 11664,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 11657,
                  "end": 11663,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 150
                }
              }
            },
            {
              "name": {
                "pos": 11692,
                "end": 11697,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "event"
              },
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "pos": 11678,
                "end": 11683,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 11684,
                "end": 11691,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 11685,
                  "end": 11690,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 11685,
                    "end": 11690,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "Event"
                  }
                }
              }
            }
          ]
        },
        {
          "name": "changeYear",
          "args": [
            {
              "name": "year",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 346,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para cambiar el año\n",
          "description": "<p>Función para cambiar el año</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 12509,
                "end": 12513,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "year"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 12494,
                "end": 12499,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 12500,
                "end": 12508,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 12501,
                  "end": 12507,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 154
                }
              }
            },
            {
              "name": {
                "pos": 12535,
                "end": 12540,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "event"
              },
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "pos": 12521,
                "end": 12526,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 12527,
                "end": 12534,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 12528,
                  "end": 12533,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 12528,
                    "end": 12533,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "Event"
                  }
                }
              }
            }
          ]
        },
        {
          "name": "checkCurrentCalendarDate",
          "args": [
            {
              "name": "date",
              "type": "string | moment.Moment",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 95,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para establecer la \"defaultDate\" a hoy si no es válida\n",
          "description": "<p>Función para establecer la &quot;defaultDate&quot; a hoy si no es válida</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 3715,
                "end": 3719,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "date"
              },
              "type": "string | moment.Moment",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3684,
                "end": 3689,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 3690,
                "end": 3714,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 3691,
                  "end": 3713,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 192,
                  "types": [
                    {
                      "pos": 3691,
                      "end": 3697,
                      "flags": 16777216,
                      "modifierFlagsCache": 0,
                      "transformFlags": 1,
                      "kind": 154
                    },
                    {
                      "pos": 3699,
                      "end": 3713,
                      "flags": 16777216,
                      "modifierFlagsCache": 0,
                      "transformFlags": 1,
                      "kind": 183,
                      "typeName": {
                        "pos": 3699,
                        "end": 3713,
                        "flags": 16777216,
                        "modifierFlagsCache": 0,
                        "transformFlags": 0,
                        "kind": 166,
                        "left": {
                          "pos": 3699,
                          "end": 3706,
                          "flags": 16777216,
                          "modifierFlagsCache": 0,
                          "transformFlags": 0,
                          "kind": 80,
                          "escapedText": "moment"
                        },
                        "right": {
                          "pos": 3707,
                          "end": 3713,
                          "flags": 16777216,
                          "modifierFlagsCache": 0,
                          "transformFlags": 0,
                          "kind": 80,
                          "escapedText": "Moment"
                        }
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "name": "emitDateSelected",
          "args": [
            {
              "name": "date",
              "type": "string | string[]",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "closePickerSelector",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "true"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 255,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para emitir el valor seleccionado\n",
          "description": "<p>Función para emitir el valor seleccionado</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 9910,
                "end": 9914,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "date"
              },
              "type": "string | string[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 9884,
                "end": 9889,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 9890,
                "end": 9909,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 9891,
                  "end": 9908,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 192,
                  "types": [
                    {
                      "pos": 9891,
                      "end": 9897,
                      "flags": 16777216,
                      "modifierFlagsCache": 0,
                      "transformFlags": 1,
                      "kind": 154
                    },
                    {
                      "pos": 9899,
                      "end": 9908,
                      "flags": 16777216,
                      "modifierFlagsCache": 0,
                      "transformFlags": 1,
                      "kind": 188,
                      "elementType": {
                        "pos": 9899,
                        "end": 9906,
                        "flags": 16777216,
                        "modifierFlagsCache": 0,
                        "transformFlags": 1,
                        "kind": 154
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": {
                "pos": 9938,
                "end": 9957,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "closePickerSelector"
              },
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "true",
              "tagName": {
                "pos": 9922,
                "end": 9927,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 9928,
                "end": 9937,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 9929,
                  "end": 9936,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 136
                }
              }
            }
          ]
        },
        {
          "name": "initCalendar",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 80,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para inicializar el calendario\n",
          "description": "<p>Función para inicializar el calendario</p>\n"
        },
        {
          "name": "isRangeDate",
          "args": [
            {
              "name": "day",
              "type": "moment.Moment",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 278,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para comprobar si la fecha se encuentra en el rango de fechas\n",
          "description": "<p>Función para comprobar si la fecha se encuentra en el rango de fechas</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 10622,
                "end": 10625,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "day"
              },
              "type": "moment.Moment",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 10600,
                "end": 10605,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 10606,
                "end": 10621,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 10607,
                  "end": 10620,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 10607,
                    "end": 10620,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 166,
                    "left": {
                      "pos": 10607,
                      "end": 10613,
                      "flags": 16777216,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 80,
                      "escapedText": "moment"
                    },
                    "right": {
                      "pos": 10614,
                      "end": 10620,
                      "flags": 16777216,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 80,
                      "escapedText": "Moment"
                    }
                  }
                }
              }
            },
            {
              "tagName": {
                "pos": 10633,
                "end": 10640,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "returns"
              },
              "comment": "",
              "returnType": "boolean"
            }
          ]
        },
        {
          "name": "isSameSelectedDay",
          "args": [
            {
              "name": "day",
              "type": "moment.Moment",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 267,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para comprobar si la fecha actual es igual al día pasado\n",
          "description": "<p>Función para comprobar si la fecha actual es igual al día pasado</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 10261,
                "end": 10264,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "day"
              },
              "type": "moment.Moment",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 10239,
                "end": 10244,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 10245,
                "end": 10260,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 10246,
                  "end": 10259,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 10246,
                    "end": 10259,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 166,
                    "left": {
                      "pos": 10246,
                      "end": 10252,
                      "flags": 16777216,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 80,
                      "escapedText": "moment"
                    },
                    "right": {
                      "pos": 10253,
                      "end": 10259,
                      "flags": 16777216,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 80,
                      "escapedText": "Moment"
                    }
                  }
                }
              }
            },
            {
              "tagName": {
                "pos": 10272,
                "end": 10279,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "returns"
              },
              "comment": "",
              "returnType": "boolean"
            }
          ]
        },
        {
          "name": "isToday",
          "args": [
            {
              "name": "day",
              "type": "moment.Moment",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 289,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para comprobar si la fecha es la actual\n",
          "description": "<p>Función para comprobar si la fecha es la actual</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 10966,
                "end": 10969,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "day"
              },
              "type": "moment.Moment",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 10944,
                "end": 10949,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 10950,
                "end": 10965,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 10951,
                  "end": 10964,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 10951,
                    "end": 10964,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 166,
                    "left": {
                      "pos": 10951,
                      "end": 10957,
                      "flags": 16777216,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 80,
                      "escapedText": "moment"
                    },
                    "right": {
                      "pos": 10958,
                      "end": 10964,
                      "flags": 16777216,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 80,
                      "escapedText": "Moment"
                    }
                  }
                }
              }
            },
            {
              "tagName": {
                "pos": 10977,
                "end": 10984,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "returns"
              },
              "comment": "",
              "returnType": "boolean"
            }
          ]
        },
        {
          "name": "nextMonth",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 336,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para cambiar al mes siguiente\n",
          "description": "<p>Función para cambiar al mes siguiente</p>\n"
        },
        {
          "name": "nextYears",
          "args": [
            {
              "name": "lastYear",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "this.allYears()[this.allYears().length - 1]"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 360,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para cambiar al año anterior, lo que obtendrá los próximos 30 años con respescto al último del array de años\n",
          "description": "<p>Función para cambiar al año anterior, lo que obtendrá los próximos 30 años con respescto al último del array de años</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 12996,
                "end": 13004,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "lastYear"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "this.allYears()[this.allYears().length - 1]",
              "tagName": {
                "pos": 12981,
                "end": 12986,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 12987,
                "end": 12995,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 12988,
                  "end": 12994,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 154
                }
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 73,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "CALENAR.PREV_MONTH",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 328,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para cambiar al mes anterior\n",
          "description": "<p>Función para cambiar al mes anterior</p>\n"
        },
        {
          "name": "prevYears",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 368,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para cambiar al año siguiente, lo que obtendrá los anteriores 30 años con respescto al último del array de años\n",
          "description": "<p>Función para cambiar al año siguiente, lo que obtendrá los anteriores 30 años con respescto al último del array de años</p>\n"
        },
        {
          "name": "setCalendar",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 115,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para construir el calendario según una fecha dada\n",
          "description": "<p>Función para construir el calendario según una fecha dada</p>\n"
        },
        {
          "name": "setDay",
          "args": [
            {
              "name": "date",
              "type": "moment.Moment",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            },
            {
              "name": "closePickerSelector",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "true"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 169,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para establecer el día seleccionado\n",
          "description": "<p>Función para establecer el día seleccionado</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 6389,
                "end": 6393,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "date"
              },
              "type": "moment.Moment",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 6367,
                "end": 6372,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 6373,
                "end": 6388,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 6374,
                  "end": 6387,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 6374,
                    "end": 6387,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 166,
                    "left": {
                      "pos": 6374,
                      "end": 6380,
                      "flags": 16777216,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 80,
                      "escapedText": "moment"
                    },
                    "right": {
                      "pos": 6381,
                      "end": 6387,
                      "flags": 16777216,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 80,
                      "escapedText": "Moment"
                    }
                  }
                }
              }
            },
            {
              "name": {
                "pos": 6415,
                "end": 6420,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "event"
              },
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "pos": 6401,
                "end": 6406,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 6407,
                "end": 6414,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 6408,
                  "end": 6413,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 6408,
                    "end": 6413,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "Event"
                  }
                }
              }
            },
            {
              "name": {
                "pos": 6444,
                "end": 6463,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "closePickerSelector"
              },
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "true",
              "tagName": {
                "pos": 6428,
                "end": 6433,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 6434,
                "end": 6443,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 6435,
                  "end": 6442,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 136
                }
              }
            }
          ]
        },
        {
          "name": "setRangeDate",
          "args": [
            {
              "name": "date",
              "type": "moment.Moment",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            },
            {
              "name": "cleanDates",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "true"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 217,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para establecer un rango de fechas\n",
          "description": "<p>Función para establecer un rango de fechas</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 8099,
                "end": 8103,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "date"
              },
              "type": "moment.Moment",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 8077,
                "end": 8082,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 8083,
                "end": 8098,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 8084,
                  "end": 8097,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 8084,
                    "end": 8097,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 166,
                    "left": {
                      "pos": 8084,
                      "end": 8090,
                      "flags": 16777216,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 80,
                      "escapedText": "moment"
                    },
                    "right": {
                      "pos": 8091,
                      "end": 8097,
                      "flags": 16777216,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 80,
                      "escapedText": "Moment"
                    }
                  }
                }
              }
            },
            {
              "name": {
                "pos": 8125,
                "end": 8130,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "event"
              },
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "pos": 8111,
                "end": 8116,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 8117,
                "end": 8124,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 8118,
                  "end": 8123,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 8118,
                    "end": 8123,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "Event"
                  }
                }
              }
            },
            {
              "name": {
                "pos": 8154,
                "end": 8164,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "cleanDates"
              },
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "true",
              "tagName": {
                "pos": 8138,
                "end": 8143,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 8144,
                "end": 8153,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 8145,
                  "end": 8152,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 136
                }
              }
            }
          ]
        },
        {
          "name": "setWeekDate",
          "args": [
            {
              "name": "weekIdx",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 185,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para establecer la semana seleccionada\n",
          "description": "<p>Función para establecer la semana seleccionada</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 6922,
                "end": 6929,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "weekIdx"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 6907,
                "end": 6912,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 6913,
                "end": 6921,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 6914,
                  "end": 6920,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 150
                }
              }
            },
            {
              "name": {
                "pos": 6951,
                "end": 6956,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "event"
              },
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "pos": 6937,
                "end": 6942,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 6943,
                "end": 6950,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 6944,
                  "end": 6949,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 6944,
                    "end": 6949,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "Event"
                  }
                }
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "TranslateModule",
          "type": "module"
        },
        {
          "name": "A11yModule",
          "type": "module"
        },
        {
          "name": "ClickableDirective",
          "type": "directive"
        }
      ],
      "description": "<p>neo-calendar-picker\nComponente para crear un calendario</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;neo-calendar-picker [type]=&quot;&#39;day&#39;&quot; [defaultDate]=&quot;&#39;2021-12-31&#39;&quot; (dateSelected)=&quot;dateSelected($event)&quot;&gt;&lt;/neo-calendar-picker&gt;</code></pre></div>",
      "rawdescription": "\n\nneo-calendar-picker\nComponente para crear un calendario\n```html\n<neo-calendar-picker [type]=\"'day'\" [defaultDate]=\"'2021-12-31'\" (dateSelected)=\"dateSelected($event)\"></neo-calendar-picker>\n```",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation, WritableSignal, signal } from '@angular/core';\r\nimport { CalendarType, DEFAULT_FORMAT, DateSelected, ViewMode } from '../models/date-picker.entity';\r\nimport { CalendarService } from '../services/calendar.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { A11yModule } from '@angular/cdk/a11y';\r\nimport moment from 'moment';\r\nimport { ClickableDirective } from '@shared/directives/clickable.directive';\r\n\r\n/**\r\n * @name\r\n * neo-calendar-picker\r\n * @description\r\n * Componente para crear un calendario\r\n * @example\r\n * <neo-calendar-picker [type]=\"'day'\" [defaultDate]=\"'2021-12-31'\" (dateSelected)=\"dateSelected($event)\"></neo-calendar-picker>\r\n */\r\n@Component({\r\n  selector: 'neo-calendar-picker',\r\n  templateUrl: './calendar-picker.component.html',\r\n  styleUrls: ['./calendar-picker.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule, TranslateModule, A11yModule, ClickableDirective],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class CalendarPickerComponent implements OnInit {\r\n\r\n  @Input() type: CalendarType = 'day'; // Tipo: Día (day), Semana (week) o Rango (range), para marcarlo de una forma u otra segúna una fecha\r\n  @Output() dateSelected = new EventEmitter<DateSelected>();\r\n\r\n  _defaultDate: WritableSignal<string> = signal(moment().format(DEFAULT_FORMAT)); // Por defecto, la fecha actual\r\n  get defaultDate(): string {\r\n    return this._defaultDate();\r\n  }\r\n  @Input() set defaultDate(value: string | moment.Moment) {\r\n    this._defaultDate.set(this._calendarService.buildValidMomentDate(value));\r\n    this.currentCalendar.set(this._defaultDate());\r\n  }\r\n\r\n  _startDate: WritableSignal<string> = signal(moment().format(DEFAULT_FORMAT)); // Por defecto, la fecha actual\r\n  get startDate(): string {\r\n    return this._startDate();\r\n  }\r\n  @Input() set startDate(value: string | moment.Moment) {\r\n    this._startDate.set(this._calendarService.buildValidMomentDate(value));\r\n    this.currentCalendar.set(this._startDate());\r\n  }\r\n\r\n  _endDate: WritableSignal<string> = signal(moment().format(DEFAULT_FORMAT)); // Por defecto, la fecha actual\r\n  get endDate(): string {\r\n    return this._endDate();\r\n  }\r\n  @Input() set endDate(value: string | moment.Moment) {\r\n    this._endDate.set(this._calendarService.buildValidMomentDate(value));\r\n  }\r\n\r\n  // Tipo de vista (Calendario normal, selección de año o de mes)\r\n  viewMode: WritableSignal<ViewMode> = signal('default');\r\n  allMonths: WritableSignal<string[]> = signal([]); // Array que se rellenará con todos los meses (usando momentjs)\r\n  allYears: WritableSignal<string[]> = signal([]); // Array que se rellenará con los años, en un intervalo de 10 años hacia arriba o abajo\r\n\r\n  // Array que guardará los días del mes por semana\r\n  calendarWeeks: WritableSignal<Array<any>> = signal([]);\r\n\r\n  // Variable para saber en que calendario estamos cuándo nos movemos por los meses\r\n  currentCalendar: WritableSignal<string> = signal(moment().format(DEFAULT_FORMAT));\r\n\r\n  constructor(\r\n    private readonly _calendarService: CalendarService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.initCalendar();\r\n  }\r\n\r\n  /**\r\n   * Función para inicializar el calendario\r\n   */\r\n  initCalendar() {\r\n    setTimeout(() => {\r\n\r\n      this.checkCurrentCalendarDate(this.currentCalendar());\r\n\r\n      // Establecemos los meses del calendario\r\n      this.allMonths.set(moment.months());\r\n      this.setCalendar();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Función para establecer la \"defaultDate\" a hoy si no es válida\r\n   * @param {string | moment.Moment} date\r\n   */\r\n  checkCurrentCalendarDate(date: string | moment.Moment) {\r\n\r\n    // Comprobamos si la fecha es un string o un objeto Moment\r\n    if (date instanceof moment)\r\n      date = (date).format(DEFAULT_FORMAT);\r\n\r\n    // Comprobamos si la fecha no es válida asignamos la fecha de hoy,\r\n    // en caso contrario, asignamos la fecha indicada\r\n    if (!moment(date).isValid())\r\n      this._defaultDate.set(moment().format(DEFAULT_FORMAT));\r\n    else\r\n      this._defaultDate.set(moment(date).format(DEFAULT_FORMAT));\r\n\r\n    this.currentCalendar.set(this._defaultDate());\r\n\r\n  }\r\n\r\n  /**\r\n   * Función para construir el calendario según una fecha dada\r\n   */\r\n  setCalendar() {\r\n\r\n    let _calendarWeeks: Array<any> = [];\r\n    this.calendarWeeks.set(_calendarWeeks);\r\n\r\n    // Obtenemos el año y el mes de la fecha seleccionada\r\n    const currentMonth = moment(new Date(this.currentCalendar())).month();\r\n\r\n    // Obtenemos el primer día del mes seleccionado\r\n    const firstDayOfMonth = moment(new Date(this.currentCalendar())).startOf('month');\r\n\r\n    // Obtenemos el primer día de la semana del mes (por si compartimos días con el mes antarior)\r\n    const dayFirstWeek = firstDayOfMonth.clone().startOf('isoWeek');\r\n\r\n    // Recorremos cada semana y obtenemos los días de cada una de ellas hasta un máximo de 6 semanas\r\n    // para que siempre se muestren 42 días (6 semanas * 7 días) e incluso si el mes no empieza en lunes\r\n    // para que se muestren los primeros días del mes siguiente. De esta forma el calendario siempre estará completo\r\n    for (let week = 0; week < 6; week++) {\r\n\r\n      // Sumamos la cantidad de semanas con respescto al primer día del mes\r\n      const firstDayOfWeek = dayFirstWeek.clone().add(week, 'week');\r\n\r\n      // Recorremos los días (7) de la semana y formamos el objeto para la fecha\r\n      for (let dayOfWeek = 0; dayOfWeek < 7; dayOfWeek++) {\r\n\r\n        // Vamos sumando un día a partir del primer día de la semana\r\n        const date = firstDayOfWeek.clone().add(dayOfWeek, 'day');\r\n\r\n        if (!_calendarWeeks[week])\r\n          _calendarWeeks[week] = [];\r\n\r\n        if (_calendarWeeks[week] && !_calendarWeeks[week][dayOfWeek])\r\n          _calendarWeeks[week][dayOfWeek] = [];\r\n\r\n        // Creamos el objeto con la semana y el día de la misma como claves, y los datos de la fecha\r\n        _calendarWeeks[week][dayOfWeek] = {\r\n          date: date,\r\n          isCurrentMonth: date.month() === currentMonth\r\n        };\r\n\r\n      }\r\n\r\n    }\r\n\r\n    // Asignamos el array de semanas a la signal\r\n    this.calendarWeeks.set(_calendarWeeks);\r\n  }\r\n\r\n  /**\r\n   * Función para establecer el día seleccionado\r\n   * @param {moment.Moment} date\r\n   * @param {Event} event\r\n   * @param {boolean} closePickerSelector\r\n   */\r\n  setDay(date: moment.Moment, event?: Event, closePickerSelector: boolean = true) {\r\n\r\n    event?.preventDefault();\r\n    event?.stopPropagation();\r\n\r\n    this._defaultDate.set(date.format(DEFAULT_FORMAT));\r\n    this.currentCalendar.set(date.format(DEFAULT_FORMAT));\r\n    this.setCalendar();\r\n    this.emitDateSelected(this._defaultDate(), closePickerSelector);\r\n  }\r\n\r\n  /**\r\n   * Función para establecer la semana seleccionada\r\n   * @param {number} weekIdx\r\n   * @param {Event} event\r\n   */\r\n  setWeekDate(weekIdx: number, event?: Event) {\r\n\r\n    event?.preventDefault();\r\n    event?.stopPropagation();\r\n\r\n    // Obtener los siete días de la semana en base al índice de la semana\r\n    const weekDays = this.calendarWeeks()[weekIdx].map((day: any) => day.date.format(DEFAULT_FORMAT));\r\n\r\n    // Obtenemos el primer y último día de la semana\r\n    const firstDay = moment(weekDays[0]);\r\n    const lastDay = moment(weekDays[weekDays.length - 1]);\r\n\r\n    // Asignamos el rango de fechas\r\n    this._startDate.set(firstDay.format(DEFAULT_FORMAT));\r\n    this._endDate.set(lastDay.format(DEFAULT_FORMAT));\r\n\r\n    // Si ya tenemos las dos fechas, emitimos el rango de fechas\r\n    if (this._startDate() !== '' && this._endDate() !== '') {\r\n      const rangeDate: string | string[] = this._startDate() !== '' && this._endDate() !== '' ? [this._startDate(), this._endDate()] : '';\r\n      this.currentCalendar.set(moment(this._startDate()).format(DEFAULT_FORMAT));\r\n      this.setCalendar();\r\n      this.emitDateSelected(rangeDate, true);\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Función para establecer un rango de fechas\r\n   * @param {moment.Moment} date\r\n   * @param {Event} event\r\n   * @param {boolean} cleanDates\r\n   */\r\n  setRangeDate(date: moment.Moment, event?: Event, cleanDates: boolean = true) {\r\n\r\n    event?.preventDefault();\r\n    event?.stopPropagation();\r\n\r\n    if (cleanDates && (this._startDate() !== '' && this._endDate() !== '')) {\r\n      this._startDate.set('');\r\n      this._endDate.set('');\r\n    }\r\n\r\n    if (this._startDate() === '') // Si no hay fecha de inicio, la establecemos\r\n      this._startDate.set(date.format(DEFAULT_FORMAT));\r\n    else if (this._endDate() === '' && date.isAfter(moment(this._startDate()))) // Si no hay fecha de fin, la establecemos\r\n      this._endDate.set(date.format(DEFAULT_FORMAT));\r\n    else if (moment(this._startDate()).format(DEFAULT_FORMAT) === date.format(DEFAULT_FORMAT)) { // Si la fecha de inicio es igual a la de fin, la establecemos\r\n      this._startDate.set(date.format(DEFAULT_FORMAT));\r\n      this._endDate.set(date.format(DEFAULT_FORMAT));\r\n    } else if (moment(this._startDate()).isAfter(moment(date))) { // Si la fecha de inicio es mayor que la de fin, las intercambiamos\r\n      const dateStart = moment(new Date(this._startDate()));\r\n      this._startDate.set(date.format(DEFAULT_FORMAT));\r\n      this._endDate.set(dateStart.format(DEFAULT_FORMAT));\r\n    }\r\n\r\n    // Si ya tenemos las dos fechas, emitimos el rango de fechas\r\n    if (this._startDate() !== '' && this._endDate() !== '') {\r\n      const rangeDate: string | string[] = this._startDate() !== '' && this._endDate() !== '' ? [this._startDate(), this._endDate()] : '';\r\n      this.currentCalendar.set(moment(this._endDate()).format(DEFAULT_FORMAT));\r\n      this.setCalendar();\r\n      this.emitDateSelected(rangeDate, true);\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Función para emitir el valor seleccionado\r\n   * @param {string | string[]} date\r\n   * @param {boolean} closePickerSelector\r\n   */\r\n  emitDateSelected(date: string | string[], closePickerSelector: boolean = true) {\r\n    this.dateSelected.emit({\r\n      date: date,\r\n      closePicker: closePickerSelector\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Función para comprobar si la fecha actual es igual al día pasado\r\n   * @param {moment.Moment} day\r\n   * @returns {boolean}\r\n   */\r\n  isSameSelectedDay(day: moment.Moment): boolean {\r\n    if (this.type !== \"day\")\r\n      return false;\r\n    return (day.format('DD-MM-YYYY') === moment(new Date(this._defaultDate())).format('DD-MM-YYYY'));\r\n  }\r\n\r\n  /**\r\n   * Función para comprobar si la fecha se encuentra en el rango de fechas\r\n   * @param {moment.Moment} day\r\n   * @returns {boolean}\r\n   */\r\n  isRangeDate(day: moment.Moment): boolean {\r\n    if (this.type !== \"week\" && this.type !== \"range\")\r\n      return false;\r\n    return this._calendarService.isRangeDate(day, this._startDate(), this._endDate());\r\n  }\r\n\r\n  /**\r\n   * Función para comprobar si la fecha es la actual\r\n   * @param {moment.Moment} day\r\n   * @returns {boolean}\r\n   */\r\n  isToday(day: moment.Moment): boolean {\r\n    return this._calendarService.isToday(day);\r\n  }\r\n\r\n  /**\r\n   * Función para cambiar la vista del calendario (días, meses o años)\r\n   * @param {ViewMode} viewMode\r\n   * @param {Event} event\r\n   */\r\n  chageViewMode(viewMode: ViewMode, event?: Event) {\r\n\r\n    event?.preventDefault();\r\n    event?.stopPropagation();\r\n\r\n    // Si la vista es la de años, creamos los años según el año de la fecha actual\r\n    if (viewMode === \"years\")\r\n      this.nextYears(moment(new Date(this.currentCalendar())).format('YYYY'));\r\n\r\n    this.viewMode.set(viewMode);\r\n  }\r\n\r\n  /**\r\n   * Función para cambiar el mes\r\n   * @param {number} month\r\n   * @param {Event} event\r\n   */\r\n  CALENAR.CHANGE_MONTH(month: number, event?: Event) {\r\n\r\n    event?.preventDefault();\r\n    event?.stopPropagation();\r\n\r\n    this.viewMode.set(\"default\");\r\n    this.currentCalendar.set(moment(new Date(this.currentCalendar())).set('month', month).format(DEFAULT_FORMAT));\r\n    this.setCalendar();\r\n  }\r\n\r\n  /**\r\n   * Función para cambiar al mes anterior\r\n   */\r\n  CALENAR.PREV_MONTH() {\r\n    this.currentCalendar.set(moment(new Date(this.currentCalendar())).subtract(\"1\", \"month\").format(DEFAULT_FORMAT));\r\n    this.setCalendar();\r\n  }\r\n\r\n  /**\r\n   * Función para cambiar al mes siguiente\r\n   */\r\n  nextMonth() {\r\n    this.currentCalendar.set(moment(new Date(this.currentCalendar())).add(\"1\", \"month\").format(DEFAULT_FORMAT));\r\n    this.setCalendar();\r\n  }\r\n\r\n  /**\r\n   * Función para cambiar el año\r\n   * @param {string} year\r\n   * @param {Event} event\r\n   */\r\n  changeYear(year: string, event?: Event) {\r\n\r\n    event?.preventDefault();\r\n    event?.stopPropagation();\r\n\r\n    this.viewMode.set(\"default\");\r\n    this.currentCalendar.set(moment(new Date(this._defaultDate())).set('year', Number(year)).format(DEFAULT_FORMAT));\r\n    this.setCalendar();\r\n  }\r\n\r\n  /**\r\n   * Función para cambiar al año anterior, lo que obtendrá los próximos 30 años con respescto al último del array de años\r\n   * @param {string} lastYear\r\n   */\r\n  nextYears(lastYear: string = this.allYears()[this.allYears().length - 1]) {\r\n    this.allYears.set(new Array(20).fill(null).map((_, year) => (moment(lastYear).add(year, 'year').format('YYYY'))));\r\n    this.allYears().sort();\r\n  }\r\n\r\n  /**\r\n  * Función para cambiar al año siguiente, lo que obtendrá los anteriores 30 años con respescto al último del array de años\r\n  */\r\n  prevYears() {\r\n    this.allYears.set(new Array(20).fill(null).map((_, year) => (moment(this.allYears()[0]).subtract(year, 'year').format('YYYY'))));\r\n    this.allYears().sort();\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import 'base';\r\n\r\n:host {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.calendar-picker {\r\n  width: 310px;\r\n  height: 310px;\r\n  border-radius: 5px;\r\n  min-height: 265px;\r\n  background-color: var(--bg-field-color);\r\n  color: var(--text-color);\r\n  box-shadow: var(--shadow-box);\r\n\r\n  @media (max-width: 576px) {\r\n    max-width: 315px;\r\n    min-height: 260px;\r\n  }\r\n\r\n  table {\r\n    table-layout: fixed;\r\n    width: 100%;\r\n\r\n    th,\r\n    td {\r\n      padding: 2px;\r\n      font-size: 13px;\r\n      font-weight: 500;\r\n      letter-spacing: normal;\r\n      text-align: center;\r\n      width: 30px;\r\n      overflow: hidden;\r\n    }\r\n\r\n    th,\r\n    td {\r\n      @media (max-width: 576px) {\r\n        height: 35px;\r\n        width: 35px;\r\n        font-size: 14px;\r\n      }\r\n    }\r\n\r\n    th {\r\n      font-weight: 600;\r\n      color: var(--text-color);\r\n    }\r\n  }\r\n\r\n  &__header {\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    margin-bottom: 5px;\r\n    font-size: 13px;\r\n    font-weight: 500;\r\n    padding: 10px;\r\n    height: 50px;\r\n    border-top-left-radius: 5px;\r\n    border-top-right-radius: 5px;\r\n    background-color: var(--bg-btn-primary-color);\r\n    color: var(--text-btn-primary-color);\r\n\r\n    &__btn {\r\n      display: flex;\r\n      flex-direction: row;\r\n      flex-wrap: nowrap;\r\n      align-content: center;\r\n      justify-content: center;\r\n      align-items: center;\r\n      cursor: pointer;\r\n      padding: 5px 10px;\r\n      border-radius: 5px;\r\n      background-color: var(--bg-btn-primary-color);\r\n      color: var(--text-btn-primary-color);\r\n      width: 30px;\r\n      height: 30px;\r\n\r\n      i::before {\r\n        color: var(--text-btn-primary-color);\r\n      }\r\n\r\n      &:hover,\r\n      &:focus,\r\n      &:active {\r\n        background-color: var(--hover-btn-primary-color);\r\n      }\r\n    }\r\n\r\n    &__actions {\r\n      display: flex;\r\n      flex-direction: row;\r\n      flex-wrap: nowrap;\r\n      justify-content: center;\r\n      align-items: center;\r\n      align-content: center;\r\n      color: var(--text-btn-primary-color);\r\n\r\n      &--selector {\r\n        display: flex;\r\n        flex-direction: row;\r\n        flex-wrap: nowrap;\r\n        align-content: center;\r\n        justify-content: center;\r\n        align-items: center;\r\n        cursor: pointer;\r\n        padding: 5px 10px;\r\n        border-radius: 5px;\r\n        background-color: var(--bg-btn-primary-color);\r\n        color: var(--text-btn-primary-color);\r\n\r\n        &:hover,\r\n        &:focus,\r\n        &:active {\r\n          background-color: var(--hover-btn-primary-color);\r\n        }\r\n\r\n        &:last-child {\r\n          margin-left: 10px;\r\n        }\r\n\r\n        i::before {\r\n          color: var(--text-btn-primary-color);\r\n        }\r\n      }\r\n\r\n      .arrow-dropdown {\r\n        width: 10px;\r\n        height: 10px;\r\n        font-size: 11px;\r\n        right: 10px;\r\n        margin-left: 5px;\r\n      }\r\n    }\r\n  }\r\n\r\n  &__content {\r\n    padding: 5px;\r\n  }\r\n\r\n  &__days {\r\n    &__item {\r\n      cursor: pointer;\r\n\r\n      span {\r\n        display: flex;\r\n        flex-direction: row;\r\n        flex-wrap: nowrap;\r\n        align-content: center;\r\n        justify-content: center;\r\n        align-items: center;\r\n        height: 30px;\r\n        width: 30px;\r\n        border: none;\r\n        border-radius: 5px;\r\n\r\n        @media (max-width: 576px) {\r\n          height: 35px;\r\n          width: 35px;\r\n          font-size: 14px;\r\n        }\r\n\r\n        &.no-day {\r\n          cursor: default;\r\n          filter: opacity(0.5);\r\n        }\r\n      }\r\n\r\n      &.selected {\r\n        span {\r\n          border: 1px solid #CCC;\r\n          color: var(--text-color);\r\n          background-color: var(--background-color);\r\n          border-radius: 5px;\r\n        }\r\n      }\r\n\r\n      &:has(.today) span {\r\n        color: red;\r\n      }\r\n    }\r\n  }\r\n\r\n  &__months,\r\n  &__years {\r\n    &__content {\r\n      display: flex;\r\n      flex-direction: row;\r\n      flex-wrap: wrap;\r\n      align-content: center;\r\n      justify-content: center;\r\n      align-items: center;\r\n    }\r\n\r\n    &__item {\r\n      display: flex;\r\n      flex-wrap: wrap;\r\n      align-items: center;\r\n      justify-content: center;\r\n      border-radius: 5px;\r\n      height: 30px;\r\n      letter-spacing: normal;\r\n      align-content: center;\r\n      flex-direction: row;\r\n      margin: 10px 2px;\r\n      cursor: pointer;\r\n      width: 30%;\r\n\r\n      span {\r\n        font-weight: 500;\r\n        font-size: 12px;\r\n        width: 100%;\r\n        height: 100%;\r\n        display: flex;\r\n        flex-direction: row;\r\n        flex-wrap: nowrap;\r\n        align-content: center;\r\n        justify-content: center;\r\n        align-items: center;\r\n        border-radius: 5px;\r\n      }\r\n\r\n      &:hover,\r\n      &:focus {\r\n        filter: opacity(0.5);\r\n      }\r\n    }\r\n  }\r\n\r\n  &__months {\r\n    .calendar-picker__header {\r\n      justify-content: center;\r\n    }\r\n\r\n    &__item {\r\n      span {\r\n        padding: 0 5px;\r\n      }\r\n    }\r\n  }\r\n\r\n  &__years {\r\n    &__item {\r\n      margin: 5px;\r\n      width: 20%;\r\n    }\r\n  }\r\n\r\n  &__months,\r\n  &__years,\r\n  &__days {\r\n    &__item {\r\n      color: var(--text-color);\r\n\r\n      &.today {\r\n        span {\r\n          color: var(--icon-color);\r\n        }\r\n      }\r\n\r\n      &:hover {\r\n        span {\r\n          color: var(--text-color);\r\n          background-color: var(--background-color);\r\n          border-radius: 5px;\r\n\r\n          &.no-day {\r\n            background: none;\r\n            border: none;\r\n            color: inherit;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
          "styleUrl": "./calendar-picker.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_calendarService",
            "type": "CalendarService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 67,
        "jsdoctags": [
          {
            "name": "_calendarService",
            "type": "CalendarService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "implements": ["OnInit"],
      "accessors": {
        "defaultDate": {
          "name": "defaultDate",
          "setSignature": {
            "name": "defaultDate",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | moment.Moment",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | moment.Moment",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "defaultDate",
            "type": "string",
            "returnType": "string",
            "line": 33
          }
        },
        "startDate": {
          "name": "startDate",
          "setSignature": {
            "name": "startDate",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | moment.Moment",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 45,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | moment.Moment",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "startDate",
            "type": "string",
            "returnType": "string",
            "line": 42
          }
        },
        "endDate": {
          "name": "endDate",
          "setSignature": {
            "name": "endDate",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | moment.Moment",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 54,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | moment.Moment",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "endDate",
            "type": "string",
            "returnType": "string",
            "line": 51
          }
        }
      },
      "templateData": "<div class=\"calendar-picker\">\r\n  @if (viewMode() === \"default\") {\r\n    <div class=\"calendar-picker__default\">\r\n      <div class=\"calendar-picker__header\">\r\n        <div\r\n          clickable\r\n          class=\"calendar-picker__header__btn\"\r\n          (click)=\"CALENAR.PREV_MONTH()\"\r\n          [title]=\"'calendar.CALENAR.PREV_MONTH' | translate\"\r\n        >\r\n          <i class=\"ri-arrow-left-s-line\"></i>\r\n        </div>\r\n        <div class=\"calendar-picker__header__actions\">\r\n          <span\r\n            class=\"calendar-picker__header__actions--selector\"\r\n            clickable\r\n            (click)=\"chageViewMode('months', $event)\"\r\n            [title]=\"'calendar.CALENAR.CHANGE_MONTH' | translate\"\r\n          >\r\n            {{\r\n              \"CALENDAR.\" + (currentCalendar() | date: \"MMMM\" | lowercase)\r\n                | translate\r\n            }}\r\n            <i class=\"ri-arrow-down-s-line arrow-dropdown\"></i>\r\n          </span>\r\n          <span\r\n            class=\"calendar-picker__header__actions--selector\"\r\n            clickable\r\n            (click)=\"chageViewMode('years', $event)\"\r\n            [title]=\"'CALENAR.CHANGE_YEAR' | translate\"\r\n          >\r\n            {{ currentCalendar() | date: \"yyyy\" }}\r\n            <i class=\"ri-arrow-down-s-line arrow-dropdown\"></i>\r\n          </span>\r\n        </div>\r\n        <div\r\n          clickable\r\n          class=\"calendar-picker__header__btn\"\r\n          (click)=\"nextMonth()\"\r\n          [title]=\"'CALENDAR.NEXT_MONTH' | translate\"\r\n        >\r\n          <i class=\"ri-arrow-right-s-line\"></i>\r\n        </div>\r\n      </div>\r\n      <table class=\"calendar-picker__content calendar-picker__days\">\r\n        <thead>\r\n          <tr class=\"calendar-picker__days__weekDays\">\r\n            <th scope=\"col\">\r\n              {{ \"CALENDAR.SHORT.MONDAY\" | translate }}\r\n            </th>\r\n            <th scope=\"col\">\r\n              {{ \"CALENDAR.SHORT.TUESDAY\" | translate }}\r\n            </th>\r\n            <th scope=\"col\">\r\n              {{ \"CALENDAR.SHORT.WEDNESDAY\" | translate }}\r\n            </th>\r\n            <th scope=\"col\">\r\n              {{ \"CALENDAR.SHORT.THURSDAY\" | translate }}\r\n            </th>\r\n            <th scope=\"col\">\r\n              {{ \"CALENDAR.SHORT.FRIDAY\" | translate }}\r\n            </th>\r\n            <th scope=\"col\">\r\n              {{ \"CALENDAR.SHORT.SATURDAY\" | translate }}\r\n            </th>\r\n            <th scope=\"col\">\r\n              {{ \"CALENDAR.SHORT.SUNDAY\" | translate }}\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr *ngFor=\"let week of calendarWeeks(); let weekIdx = index\">\r\n            <td\r\n              *ngFor=\"let day of week\"\r\n              class=\"calendar-picker__days__item\"\r\n              [ngClass]=\"{\r\n                selected: isSameSelectedDay(day.date) || isRangeDate(day.date),\r\n                today: isToday(day.date)\r\n              }\"\r\n            >\r\n              <span *ngIf=\"!day.isCurrentMonth\" class=\"no-day\">{{\r\n                day.date | date: \"dd\"\r\n              }}</span>\r\n              <span\r\n                *ngIf=\"day.isCurrentMonth\"\r\n                (click)=\"\r\n                  type === 'day'\r\n                    ? setDay(day.date, $event)\r\n                    : type === 'week'\r\n                      ? setWeekDate(weekIdx, $event)\r\n                      : setRangeDate(day.date, $event)\r\n                \"\r\n                clickable\r\n                [title]=\"\r\n                  (day.date | date: 'dd') +\r\n                  '/' +\r\n                  (day.date | date: 'MM') +\r\n                  '/' +\r\n                  (day.date | date: 'yyyy')\r\n                \"\r\n                >{{ day.date | date: \"dd\" }}</span\r\n              >\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  } @else if (viewMode() === \"months\") {\r\n    <div\r\n      class=\"calendar-picker__months\"\r\n      cdkTrapFocus\r\n      [cdkTrapFocusAutoCapture]=\"true\"\r\n    >\r\n      <div class=\"calendar-picker__header\">\r\n        <span>{{ \"CALENAR.MONTH\" | translate }}</span>\r\n      </div>\r\n      <div class=\"calendar-picker__content calendar-picker__months__content\">\r\n        <ng-container *ngFor=\"let month of allMonths(); let idxMonth = index\">\r\n          <div\r\n            class=\"calendar-picker__months__item\"\r\n            [ngClass]=\"{\r\n              selected: (currentCalendar() | date: 'MMMM') === month\r\n            }\"\r\n          >\r\n            <span\r\n              (click)=\"CALENAR.CHANGE_MONTH(idxMonth, $event)\"\r\n              clickable\r\n              [title]=\"'CALENDAR.' + month | lowercase | translate\"\r\n              >{{ \"CALENDAR.\" + month | lowercase | translate }}</span\r\n            >\r\n          </div>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  } @else {\r\n    <div\r\n      class=\"calendar-picker__years\"\r\n      cdkTrapFocus\r\n      [cdkTrapFocusAutoCapture]=\"true\"\r\n    >\r\n      <div class=\"calendar-picker__header\">\r\n        <div\r\n          clickable\r\n          class=\"calendar-picker__header__btn\"\r\n          (click)=\"prevYears()\"\r\n          [title]=\"'APP.PREVIOUS' | translate\"\r\n        >\r\n          <i class=\"ri-arrow-left-s-line\"></i>\r\n        </div>\r\n        <span>{{ \"date.year\" | translate }}</span>\r\n        <div\r\n          clickable\r\n          class=\"calendar-picker__header__btn\"\r\n          (click)=\"nextYears()\"\r\n          [title]=\"'APP.NEXT' | translate\"\r\n        >\r\n          <i class=\"ri-arrow-right-s-line\"></i>\r\n        </div>\r\n      </div>\r\n      <div class=\"calendar-picker__content calendar-picker__years__content\">\r\n        <ng-container *ngFor=\"let year of allYears()\">\r\n          <div\r\n            class=\"calendar-picker__years__item\"\r\n            [ngClass]=\"{\r\n              selected: (currentCalendar() | date: 'yyyy') === year\r\n            }\"\r\n          >\r\n            <span (click)=\"changeYear(year, $event)\" clickable [title]=\"year\">{{\r\n              year\r\n            }}</span>\r\n          </div>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  }\r\n</div>\r\n"
    },
    {
      "name": "CardComponent",
      "id": "component-CardComponent-83e4f8ab8006f0f29445d40e952ef15e3e8bfc811c5bf7a32db0eea1bd0ab4ff508fc7990c69c136d3fc7a5ce04b7193df2c902c3af59a9af5d5b595d5271a0e",
      "file": "src/app/shared/components/card/card.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-card",
      "styleUrls": ["./card.component.scss"],
      "styles": [],
      "templateUrl": ["./card.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "collapsable",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nIndica si la tarjeta es colapsable\n",
          "description": "<p>Indica si la tarjeta es colapsable</p>\n",
          "line": 45,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "iconCollpased",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nIcono para el título de la tarjeta (si lo hubiera) que se muestra en el header de la tarjeta al colapsarla\n",
          "description": "<p>Icono para el título de la tarjeta (si lo hubiera) que se muestra en el header de la tarjeta al colapsarla</p>\n",
          "line": 35,
          "type": "string",
          "decorators": []
        },
        {
          "name": "labelCollpased",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nTítulo de la tarjeta (si lo hubiera) que se muestra en el header de la tarjeta\n",
          "description": "<p>Título de la tarjeta (si lo hubiera) que se muestra en el header de la tarjeta</p>\n",
          "line": 30,
          "type": "string",
          "decorators": []
        },
        {
          "name": "sizeIconCollapsed",
          "defaultValue": "'s'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nTamaño del botón al que pasará el tamaño de la tarjeta (si lo hubiera) cuando se colapse\n",
          "description": "<p>Tamaño del botón al que pasará el tamaño de la tarjeta (si lo hubiera) cuando se colapse</p>\n",
          "line": 40,
          "type": "ButtonSize",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "collapsed",
          "defaultValue": "new EventEmitter(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nEvento que se emite cuando la tarjeta se colapsa o se expande\n",
          "description": "<p>Evento que se emite cuando la tarjeta se colapsa o se expande</p>\n",
          "line": 58,
          "type": "EventEmitter<boolean>"
        }
      ],
      "propertiesClass": [
        {
          "name": "_isCollapsed",
          "defaultValue": "signal(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<boolean>",
          "optional": false,
          "description": "<p>Indica si la tarjeta está colapsada o no</p>\n",
          "line": 63,
          "rawdescription": "\n\nIndica si la tarjeta está colapsada o no\n"
        },
        {
          "name": "neoCardHeader",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "CardHeaderDirective",
          "optional": false,
          "description": "<p>Contenido del header de la tarjeta (si lo hubiera) mediante el componente <code>neo-card-header</code></p>\n",
          "line": 25,
          "rawdescription": "\n\nContenido del header de la tarjeta (si lo hubiera) mediante el componente `neo-card-header`\n",
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "CardHeaderDirective"
            }
          ],
          "modifierKind": [170]
        }
      ],
      "methodsClass": [
        {
          "name": "collapse",
          "args": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 80,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para colapsar la tarjeta\n",
          "description": "<p>Función para colapsar la tarjeta</p>\n",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": {
                "pos": 2462,
                "end": 2467,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "event"
              },
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "pos": 2448,
                "end": 2453,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "<p>Evento de click</p>\n",
              "typeExpression": {
                "pos": 2454,
                "end": 2461,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 2455,
                  "end": 2460,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 2455,
                    "end": 2460,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "Event"
                  }
                }
              }
            }
          ]
        },
        {
          "name": "expand",
          "args": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 91,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para expandir la tarjeta\n",
          "description": "<p>Función para expandir la tarjeta</p>\n",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": {
                "pos": 2728,
                "end": 2733,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "event"
              },
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "pos": 2714,
                "end": 2719,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "<p>Evento de click</p>\n",
              "typeExpression": {
                "pos": 2720,
                "end": 2727,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 2721,
                  "end": 2726,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 2721,
                    "end": 2726,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "Event"
                  }
                }
              }
            }
          ]
        },
        {
          "name": "toggleCollapse",
          "args": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 69,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para colapsar o expandir la tarjeta\n",
          "description": "<p>Función para colapsar o expandir la tarjeta</p>\n",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": {
                "pos": 2159,
                "end": 2164,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "event"
              },
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "pos": 2145,
                "end": 2150,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "<p>Evento de click</p>\n",
              "typeExpression": {
                "pos": 2151,
                "end": 2158,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 2152,
                  "end": 2157,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 2152,
                    "end": 2157,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "Event"
                  }
                }
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class.card-collapsed-icon",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nIndica si la tarjeta está colapsada o no añadiendo la clase \"card-collapsed-icon\" al componente\n",
          "description": "<p>Indica si la tarjeta está colapsada o no añadiendo la clase &quot;card-collapsed-icon&quot; al componente</p>\n",
          "line": 51,
          "type": "boolean",
          "decorators": []
        }
      ],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "<p>Componente para crear una tarjeta e incluir contenido dentro de ella</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;neo-card label=&quot;Título de la tarjeta&quot; icon=&quot;icono&quot; size=&quot;s&quot; [collapsable]=&quot;true&quot;&gt;\n   &lt;neo-card-header&gt;\n      &lt;div&gt;Tipos de botones&lt;/div&gt;\n   &lt;/neo-card-header&gt;\n   &lt;p&gt;Contenido de la tarjeta&lt;/p&gt;\n&lt;/neo-card&gt;</code></pre></div>",
      "rawdescription": "\n\nComponente para crear una tarjeta e incluir contenido dentro de ella\n```html\n<neo-card label=\"Título de la tarjeta\" icon=\"icono\" size=\"s\" [collapsable]=\"true\">\n   <neo-card-header>\n      <div>Tipos de botones</div>\n   </neo-card-header>\n   <p>Contenido de la tarjeta</p>\n</neo-card>\n```",
      "type": "component",
      "sourceCode": "import { Component, ContentChild, HostBinding, Input, WritableSignal, signal, Output, EventEmitter } from '@angular/core';\r\nimport { ButtonSize } from '../button/models/button.entity';\r\nimport { CardHeaderDirective } from './card-header/card-header.directive';\r\n\r\n/**\r\n * Componente para crear una tarjeta e incluir contenido dentro de ella\r\n * @example\r\n * <neo-card label=\"Título de la tarjeta\" icon=\"icono\" size=\"s\" [collapsable]=\"true\">\r\n *    <neo-card-header>\r\n*       <div>Tipos de botones</div>\r\n *    </neo-card-header>\r\n *    <p>Contenido de la tarjeta</p>\r\n * </neo-card>\r\n */\r\n@Component({\r\n  selector: 'neo-card',\r\n  templateUrl: './card.component.html',\r\n  styleUrls: ['./card.component.scss'],\r\n})\r\nexport class CardComponent {\r\n\r\n  /**\r\n   * Contenido del header de la tarjeta (si lo hubiera) mediante el componente `neo-card-header`\r\n   */\r\n  @ContentChild(CardHeaderDirective) neoCardHeader!: CardHeaderDirective;\r\n\r\n  /**\r\n   * Título de la tarjeta (si lo hubiera) que se muestra en el header de la tarjeta\r\n   */\r\n  @Input() labelCollpased: string = '';\r\n\r\n  /**\r\n   * Icono para el título de la tarjeta (si lo hubiera) que se muestra en el header de la tarjeta al colapsarla\r\n   */\r\n  @Input() iconCollpased: string = '';\r\n\r\n  /**\r\n   * Tamaño del botón al que pasará el tamaño de la tarjeta (si lo hubiera) cuando se colapse\r\n   */\r\n  @Input() sizeIconCollapsed: ButtonSize = 's';\r\n\r\n  /**\r\n   * Indica si la tarjeta es colapsable\r\n   */\r\n  @Input() collapsable?: boolean = false;\r\n\r\n  /**\r\n   * Indica si la tarjeta está colapsada o no añadiendo la clase \"card-collapsed-icon\" al componente\r\n   */\r\n  @HostBinding('class.card-collapsed-icon')\r\n  get isCollapsedIcon(): boolean {\r\n    return (this.collapsable && this._isCollapsed() && this.iconCollpased !== '') || false;\r\n  };\r\n\r\n  /**\r\n   * Evento que se emite cuando la tarjeta se colapsa o se expande\r\n   */\r\n  @Output() collapsed: EventEmitter<boolean> = new EventEmitter(false);\r\n\r\n  /**\r\n   * Indica si la tarjeta está colapsada o no\r\n   */\r\n  _isCollapsed: WritableSignal<boolean> = signal(false);\r\n\r\n  /**\r\n   * Función para colapsar o expandir la tarjeta\r\n   * @param {Event} event Evento de click\r\n   */\r\n  public toggleCollapse(event?: Event) {\r\n    event?.preventDefault();\r\n    event?.stopPropagation();\r\n    this._isCollapsed.set(!this._isCollapsed());\r\n    this.collapsed.emit(this._isCollapsed());\r\n  }\r\n\r\n  /**\r\n   * Función para colapsar la tarjeta\r\n   * @param {Event} event Evento de click\r\n   */\r\n  public collapse(event?: Event) {\r\n    event?.preventDefault();\r\n    event?.stopPropagation();\r\n    this._isCollapsed.set(true);\r\n    this.collapsed.emit(true);\r\n  }\r\n\r\n  /**\r\n   * Función para expandir la tarjeta\r\n   * @param {Event} event Evento de click\r\n   */\r\n  public expand(event?: Event) {\r\n    event?.preventDefault();\r\n    event?.stopPropagation();\r\n    this._isCollapsed.set(false);\r\n    this.collapsed.emit(false);\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import 'base';\r\n\r\n.neo-card {\r\n  display: flex;\r\n  flex-direction: column;\r\n  box-sizing: border-box;\r\n  border-radius: 5px;\r\n  background-color: var(--bg-card-color);\r\n  box-shadow: var(--shadow-card);\r\n  border: 1px solid var(--border-color-card);\r\n  min-height: 20px;\r\n\r\n  &__content {\r\n    padding: 1.2rem;\r\n    font-size: 0.9rem;\r\n  }\r\n}\r\n",
          "styleUrl": "./card.component.scss"
        }
      ],
      "stylesData": "",
      "extends": [],
      "accessors": {
        "isCollapsedIcon": {
          "name": "isCollapsedIcon",
          "getSignature": {
            "name": "isCollapsedIcon",
            "type": "boolean",
            "returnType": "boolean",
            "line": 51,
            "rawdescription": "\n\nIndica si la tarjeta está colapsada o no añadiendo la clase \"card-collapsed-icon\" al componente\n",
            "description": "<p>Indica si la tarjeta está colapsada o no añadiendo la clase &quot;card-collapsed-icon&quot; al componente</p>\n"
          }
        }
      },
      "templateData": "<div class=\"neo-card\">\r\n  <div class=\"neo-card__header\">\r\n    <ng-content select=\"neo-card-header\"></ng-content>\r\n  </div>\r\n  <div class=\"neo-card__content\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n</div>\r\n"
    },
    {
      "name": "CheckboxComponent",
      "id": "component-CheckboxComponent-fc967452d7a8fbc6037d57a4fe8e4ae9768936a5bda3c7299dd2261d1eeefe7954a06d4b3e4dab34e9b0d62f22a3eb3715c935d25b0f3988801d9338c73d5f23",
      "file": "src/app/shared/components/form-fields/checkbox/checkbox.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CheckboxComponent), multi: true,\n}",
          "type": "component"
        }
      ],
      "selector": "neo-checkbox",
      "styleUrls": [
        "./checkbox.component.scss",
        "./../form-fields-settings.scss"
      ],
      "styles": [],
      "templateUrl": ["./checkbox.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "checked",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput para marcar el checkbox como seleccionado\n",
          "description": "<p>Input para marcar el checkbox como seleccionado</p>\n",
          "line": 45,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput para marcar el checkbox como deshabilitado\n",
          "description": "<p>Input para marcar el checkbox como deshabilitado</p>\n",
          "line": 72,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "indeterminate",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput para marcar el checkbox como indeterminado\n",
          "description": "<p>Input para marcar el checkbox como indeterminado</p>\n",
          "line": 55,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "inputSize",
          "defaultValue": "'m'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "InputSize",
          "decorators": []
        },
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 38,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "new EventEmitter<boolean>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "EventEmitter<boolean>"
        }
      ],
      "propertiesClass": [
        {
          "name": "_checked",
          "defaultValue": "signal(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<boolean>",
          "optional": false,
          "description": "",
          "line": 80
        },
        {
          "name": "_disabled",
          "defaultValue": "signal(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<boolean>",
          "optional": false,
          "description": "",
          "line": 81
        },
        {
          "name": "_id",
          "defaultValue": "signal('')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string>",
          "optional": false,
          "description": "",
          "line": 84
        },
        {
          "name": "_indeterminate",
          "defaultValue": "signal(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<boolean>",
          "optional": false,
          "description": "",
          "line": 79
        },
        {
          "name": "_inputElement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLInputElement>",
          "optional": false,
          "description": "",
          "line": 34,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'input'"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "_title",
          "defaultValue": "signal('')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string>",
          "optional": false,
          "description": "",
          "line": 83
        },
        {
          "name": "checkboxContent",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 35,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'checkboxContent'"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "onChange",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 138
        },
        {
          "name": "onTouched",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 139
        }
      ],
      "methodsClass": [
        {
          "name": "createTitle",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 98,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para crear el título del checkbox\n",
          "description": "<p>Función para crear el título del checkbox</p>\n"
        },
        {
          "name": "createUniqueId",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 106,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para crear un ID único a partir del nombre\n",
          "description": "<p>Función para crear un ID único a partir del nombre</p>\n"
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 90,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onChangeCheckbox",
          "args": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 134,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción lanzada cuando se produce un cambio en el checkbox\npara evitar que se propague el evento al padre\n",
          "description": "<p>Función lanzada cuando se produce un cambio en el checkbox\npara evitar que se propague el evento al padre</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 3945,
                "end": 3950,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "event"
              },
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3931,
                "end": 3936,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 3937,
                "end": 3944,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 3938,
                  "end": 3943,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 3938,
                    "end": 3943,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "Event"
                  }
                }
              }
            }
          ]
        },
        {
          "name": "onClickTargetCheckbox",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 115,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para activar o desactivar el checkbox\n",
          "description": "<p>Función para activar o desactivar el checkbox</p>\n"
        },
        {
          "name": "registerOnChange",
          "args": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 145,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnTouched",
          "args": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 149,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setDisabledState",
          "args": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 153,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "writeValue",
          "args": [
            {
              "name": "checked",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 141,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "checked",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        }
      ],
      "description": "<p>neo-checkbox\nComponente para crear un checkbox con funcionalidad de control de formulario</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;neo-checkbox [(ngModel)]=&quot;checked&quot;&gt;&lt;/neo-checkbox&gt;\n&lt;neo-checkbox formControlName=&quot;check_name&quot;&gt;&lt;/neo-checkbox&gt;\n&lt;neo-checkbox [checked]=&quot;true&quot;&gt;&lt;/neo-checkbox&gt;\n&lt;neo-checkbox [indeterminate]=&quot;true&quot;&gt;&lt;/neo-checkbox&gt;\n&lt;neo-checkbox [disabled]=&quot;true&quot;&gt;&lt;/neo-checkbox&gt;</code></pre></div>",
      "rawdescription": "\n\nneo-checkbox\nComponente para crear un checkbox con funcionalidad de control de formulario\n```html\n<neo-checkbox [(ngModel)]=\"checked\"></neo-checkbox>\n<neo-checkbox formControlName=\"check_name\"></neo-checkbox>\n<neo-checkbox [checked]=\"true\"></neo-checkbox>\n<neo-checkbox [indeterminate]=\"true\"></neo-checkbox>\n<neo-checkbox [disabled]=\"true\"></neo-checkbox>\n```",
      "type": "component",
      "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, ElementRef, EventEmitter, Input, Output, ViewChild, WritableSignal, forwardRef, signal } from '@angular/core';\r\nimport { ControlValueAccessor, FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { InputSize } from '../models/form-field.entity';\r\nimport { ClickableDirective } from '@shared/directives/clickable.directive';\r\nimport { InputsUtilsService } from '@shared/components/form-fields/services/inputs-utils.service';\r\n\r\n/**\r\n * @name\r\n * neo-checkbox\r\n * @description\r\n * Componente para crear un checkbox con funcionalidad de control de formulario\r\n * @example\r\n * <neo-checkbox [(ngModel)]=\"checked\"></neo-checkbox>\r\n * <neo-checkbox formControlName=\"check_name\"></neo-checkbox>\r\n * <neo-checkbox [checked]=\"true\"></neo-checkbox>\r\n * <neo-checkbox [indeterminate]=\"true\"></neo-checkbox>\r\n * <neo-checkbox [disabled]=\"true\"></neo-checkbox>\r\n */\r\n@Component({\r\n  selector: 'neo-checkbox',\r\n  templateUrl: './checkbox.component.html',\r\n  styleUrls: ['./checkbox.component.scss', './../form-fields-settings.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => CheckboxComponent),\r\n    multi: true,\r\n  }]\r\n})\r\nexport class CheckboxComponent implements ControlValueAccessor {\r\n\r\n  @ViewChild('input') _inputElement!: ElementRef<HTMLInputElement>;\r\n  @ViewChild('checkboxContent') checkboxContent!: ElementRef;\r\n\r\n  @Input() label?: string;\r\n  @Input() name?: string;\r\n  @Input() inputSize: InputSize = 'm';\r\n  @Output() readonly change: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  /**\r\n   * Input para marcar el checkbox como seleccionado\r\n   */\r\n  @Input() set checked(status: boolean) {\r\n    this._checked.set(status);\r\n  }\r\n  get checked() {\r\n    return this._checked();\r\n  }\r\n\r\n  /**\r\n   * Input para marcar el checkbox como indeterminado\r\n   */\r\n  @Input() set indeterminate(status: boolean) {\r\n    this._indeterminate.set(status);\r\n    if (status) {\r\n      if (this._inputElement)\r\n        this._inputElement.nativeElement.indeterminate = this.indeterminate;\r\n      this._checked.set(false);\r\n    }\r\n\r\n  }\r\n\r\n  get indeterminate(): boolean {\r\n    return this._checked();\r\n  }\r\n\r\n  /**\r\n   * Input para marcar el checkbox como deshabilitado\r\n   */\r\n  @Input() set disabled(status: boolean) {\r\n    this._disabled.set(status);\r\n  }\r\n  get disabled() {\r\n    return this._disabled();\r\n  }\r\n\r\n  _indeterminate: WritableSignal<boolean> = signal(false);\r\n  _checked: WritableSignal<boolean> = signal(false);\r\n  _disabled: WritableSignal<boolean> = signal(false);\r\n\r\n  _title: WritableSignal<string> = signal('');\r\n  _id: WritableSignal<string> = signal('');\r\n\r\n  constructor(\r\n    private readonly _inputsUtilsService: InputsUtilsService\r\n  ) { }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.createTitle();\r\n    this.createUniqueId();\r\n  }\r\n\r\n  /**\r\n  * Función para crear el título del checkbox\r\n  */\r\n  createTitle() {\r\n    if (!this._title())\r\n      this._title.set(this.checkboxContent?.nativeElement?.innerHTML.replace(/(<([^>]+)>)/gi, \"\") || '');\r\n  }\r\n\r\n  /**\r\n   * Función para crear un ID único a partir del nombre\r\n   */\r\n  createUniqueId(): void {\r\n    if (!this._id()) {\r\n      this._id.set(this._inputsUtilsService.createUniqueId(this._title() || 'neo_checkbox'));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Función para activar o desactivar el checkbox\r\n   */\r\n  onClickTargetCheckbox() {\r\n\r\n    if (this._disabled())\r\n      return;\r\n    else\r\n      this._inputElement.nativeElement.focus();\r\n\r\n    this._checked.set(!this._checked());\r\n    this._inputElement.nativeElement.checked = this._checked();\r\n    this.onChange(this._checked());\r\n    this.onTouched();\r\n    this.change.emit(this._checked());\r\n  }\r\n\r\n  /**\r\n   * Función lanzada cuando se produce un cambio en el checkbox\r\n   * para evitar que se propague el evento al padre\r\n   * @param {Event} event\r\n   */\r\n  onChangeCheckbox(event: Event) {\r\n    event.stopPropagation();\r\n  }\r\n\r\n  onChange: any = () => { };\r\n  onTouched: any = () => { };\r\n\r\n  writeValue(checked: boolean) {\r\n    this._checked.set(checked);\r\n  }\r\n\r\n  public registerOnChange(fn: any) {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  public registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  public setDisabledState(isDisabled: boolean) {\r\n    this._disabled.set(isDisabled);\r\n  }\r\n\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".neo-checkbox {\r\n  display: flex;\r\n  position: relative;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n\r\n  &__control {\r\n    display: flex;\r\n    position: relative;\r\n    cursor: pointer;\r\n    align-items: center;\r\n\r\n    &__input {\r\n      position: absolute;\r\n      opacity: 0;\r\n      cursor: pointer;\r\n      height: 0;\r\n      width: 0;\r\n      margin: 0;\r\n      z-index: -1;\r\n    }\r\n\r\n    &__input:checked~&__checkmark,\r\n    &__input:indeterminate~&__checkmark {\r\n      border-color: var(--border-field-color);\r\n      box-shadow: none;\r\n    }\r\n\r\n    &__input:focus~&__checkmark {\r\n      outline-color: var(--outline-color);\r\n      outline-style: solid;\r\n      outline-width: 1px;\r\n      box-shadow: 0px 0px 2px 1px var(--bg-field-color);\r\n    }\r\n\r\n    &__input:checked~&__checkmark::after,\r\n    &__input:indeterminate~&__checkmark::after {\r\n      opacity: 1;\r\n    }\r\n\r\n    &__checkmark {\r\n      height: 18px;\r\n      width: 18px;\r\n      border: 1px solid var(--border-field-color);\r\n      background-color: var(--bg-field-color);\r\n      transition: background-color 0.25s ease;\r\n      border-radius: 2px;\r\n      cursor: pointer;\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      justify-content: center;\r\n\r\n      &::after {\r\n        content: \"\";\r\n        display: block;\r\n        border: solid var(--primary-color);\r\n        border-width: 5px;\r\n        opacity: 0;\r\n        transition: opacity 0.25s ease;\r\n      }\r\n    }\r\n\r\n    &__input:indeterminate~&__checkmark::after {\r\n      border-width: 2px 5px !important;\r\n    }\r\n\r\n    &__label {\r\n      color: var(--text-color);\r\n      margin: 0;\r\n      cursor: pointer;\r\n      padding-left: 5px;\r\n    }\r\n  }\r\n\r\n}\r\n",
          "styleUrl": "./checkbox.component.scss"
        },
        {
          "data": ".neo-input,\r\n.neo-input-password,\r\n.neo-input-date-picker,\r\n.neo-textarea,\r\n.neo-select {\r\n  &__label {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    margin-bottom: 5px;\r\n    gap: 5px;\r\n  }\r\n}\r\n\r\n.neo-select__field,\r\n.neo-input__wrapper__field,\r\n.neo-input-password__wrapper__field,\r\n.neo-input-date-picker__wrapper__field,\r\n.neo-checkbox__control,\r\n.neo-checkbox__control__label,\r\n.neo-radiobutton__control,\r\n.neo-radiobutton__control__label {\r\n\r\n  &.size-xs {\r\n    font-size: 0.6rem;\r\n    line-height: 0.6rem;\r\n  }\r\n\r\n  &.size-s {\r\n    font-size: 0.7rem;\r\n    line-height: 0.7rem;\r\n  }\r\n\r\n  &.size-xm {\r\n    font-size: 0.75rem;\r\n    line-height: 0.75rem;\r\n  }\r\n\r\n  &.size-m {\r\n    font-size: 0.8rem;\r\n    line-height: 0.8rem;\r\n  }\r\n\r\n  &.size-l {\r\n    font-size: 0.85rem;\r\n    line-height: 0.85rem;\r\n  }\r\n\r\n  &.size-xl {\r\n    font-size: 0.9rem;\r\n    line-height: 0.9rem;\r\n  }\r\n}\r\n\r\n.neo-select__field,\r\n.neo-input__wrapper__field,\r\n.neo-input-password__wrapper__field,\r\n.neo-input-date-picker__wrapper__field,\r\n.neo-checkbox__control,\r\n.neo-radiobutton__control {\r\n  &.size-xs {\r\n    height: 25px;\r\n  }\r\n\r\n  &.size-s {\r\n    height: 28px;\r\n  }\r\n\r\n  &.size-xm {\r\n    height: 32px;\r\n  }\r\n\r\n  &.size-m {\r\n    height: 35px;\r\n  }\r\n\r\n  &.size-l {\r\n    height: 40px;\r\n  }\r\n\r\n  &.size-xl {\r\n    height: 45px;\r\n  }\r\n}\r\n\r\n.neo-checkbox__control,\r\n.neo-radiobutton__control {\r\n\r\n  &.size-xs &__checkmark,\r\n  &.size-s &__checkmark {\r\n    height: 10px;\r\n    width: 10px;\r\n\r\n    &::after {\r\n      border-width: 4px;\r\n    }\r\n  }\r\n\r\n  &.size-xm &__checkmark {\r\n    height: 14px;\r\n    width: 14px;\r\n\r\n    &::after {\r\n      border-width: 4px;\r\n    }\r\n  }\r\n\r\n  &.size-m &__checkmark {\r\n    height: 18px;\r\n    width: 18px;\r\n\r\n    &::after {\r\n      border-width: 5px;\r\n    }\r\n  }\r\n\r\n  &.size-l &__checkmark {\r\n    height: 22px;\r\n    width: 22px;\r\n\r\n    &::after {\r\n      border-width: 6px;\r\n    }\r\n  }\r\n\r\n  &.size-xl &__checkmark {\r\n    height: 26px;\r\n    width: 26px;\r\n\r\n    &::after {\r\n      border-width: 8px;\r\n    }\r\n  }\r\n}\r\n",
          "styleUrl": "./../form-fields-settings.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_inputsUtilsService",
            "type": "InputsUtilsService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 84,
        "jsdoctags": [
          {
            "name": "_inputsUtilsService",
            "type": "InputsUtilsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "implements": ["ControlValueAccessor"],
      "accessors": {
        "checked": {
          "name": "checked",
          "setSignature": {
            "name": "checked",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "status",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 45,
            "rawdescription": "\n\nInput para marcar el checkbox como seleccionado\n",
            "description": "<p>Input para marcar el checkbox como seleccionado</p>\n",
            "jsdoctags": [
              {
                "name": "status",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "checked",
            "type": "",
            "returnType": "",
            "line": 48
          }
        },
        "indeterminate": {
          "name": "indeterminate",
          "setSignature": {
            "name": "indeterminate",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "status",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 55,
            "rawdescription": "\n\nInput para marcar el checkbox como indeterminado\n",
            "description": "<p>Input para marcar el checkbox como indeterminado</p>\n",
            "jsdoctags": [
              {
                "name": "status",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "indeterminate",
            "type": "boolean",
            "returnType": "boolean",
            "line": 65
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "status",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 72,
            "rawdescription": "\n\nInput para marcar el checkbox como deshabilitado\n",
            "description": "<p>Input para marcar el checkbox como deshabilitado</p>\n",
            "jsdoctags": [
              {
                "name": "status",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "",
            "returnType": "",
            "line": 75
          }
        }
      },
      "templateData": "<div class=\"neo-checkbox\">\r\n  @if (label) {\r\n    <label class=\"neo-checkbox__label\" [for]=\"_id()\" [title]=\"_title()\">{{\r\n      label\r\n    }}</label>\r\n  }\r\n  <div class=\"neo-checkbox__control size-{{ inputSize }}\">\r\n    <input\r\n      #input\r\n      class=\"neo-checkbox__control__input\"\r\n      type=\"checkbox\"\r\n      [id]=\"_id()\"\r\n      [tabIndex]=\"disabled ? -1 : 0\"\r\n      [attr.aria-label]=\"label || _title() || ''\"\r\n      [attr.name]=\"name\"\r\n      [disabled]=\"_disabled()\"\r\n      [checked]=\"_checked()\"\r\n      [indeterminate]=\"_indeterminate()\"\r\n      (click)=\"onClickTargetCheckbox()\"\r\n      (change)=\"onChangeCheckbox($event)\"\r\n    />\r\n    <div\r\n      class=\"neo-checkbox__control__checkmark\"\r\n      (click)=\"onClickTargetCheckbox()\"\r\n    ></div>\r\n    <label\r\n      class=\"neo-checkbox__control__label size-{{ inputSize }}\"\r\n      [for]=\"_id()\"\r\n      [title]=\"_title()\"\r\n      #checkboxContent\r\n    >\r\n      <ng-content></ng-content>\r\n    </label>\r\n  </div>\r\n</div>\r\n"
    },
    {
      "name": "ErrorComponent",
      "id": "component-ErrorComponent-3aec6ee9f3fe5747af021c8f458775a037709c390e16ef1f6bb6d347ff6e1170c0dc2930346e0b1c4835486a72e9235094319a7968502ccb2df0463ccf41b706",
      "file": "src/app/shared/components/error/error.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-error",
      "styleUrls": ["./error.component.scss"],
      "styles": [],
      "templateUrl": ["./error.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "string",
          "decorators": []
        },
        {
          "name": "textAlign",
          "defaultValue": "'center'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "\"left\" | \"right\" | \"center\"",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 19,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "TranslateModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, OnInit } from '@angular/core';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\n\r\n@Component({\r\n  selector: 'neo-error',\r\n  standalone: true,\r\n  imports: [CommonModule, TranslateModule],\r\n  templateUrl: './error.component.html',\r\n  styleUrls: ['./error.component.scss'],\r\n})\r\nexport class ErrorComponent implements OnInit {\r\n\r\n  @Input() label?: string;\r\n  @Input() textAlign?: 'left' | 'right' | 'center' = 'center';\r\n\r\n  constructor(private readonly _translateService: TranslateService) { }\r\n\r\n  ngOnInit(): void {\r\n    if (typeof this.label === 'undefined' || !this.label || this.label === '') {\r\n      this.label = this._translateService.instant('app.not_results');\r\n    }\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ":host {\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n}\r\n\r\n.error {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 100%;\r\n  p {\r\n    margin: 5px 0;\r\n    font-size: 0.8rem;\r\n    font-weight: 600;\r\n    width: 100%;\r\n  }\r\n}\r\n",
          "styleUrl": "./error.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_translateService",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 15,
        "jsdoctags": [
          {
            "name": "_translateService",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "implements": ["OnInit"],
      "templateData": "<div class=\"error\">\r\n  <p [innerHTML]=\"label\" [ngStyle]=\"{ 'text-align': textAlign }\"></p>\r\n</div>\r\n"
    },
    {
      "name": "FilterColumnsTableComponent",
      "id": "component-FilterColumnsTableComponent-2e95829467186d36fc77af8e8bd7b98a7e15a4ff8733f3c3f2f10e690f740d10417b8914e41c9a5a5451eee4e4554aa62404df13fbba29c9310e69cd9bc6ee01",
      "file": "src/app/shared/components/filter-columns-table/filter-columns-table.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-filter-columns-table",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./filter-columns-table.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "color",
          "defaultValue": "'primary'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput que recibe el color del icono del filtro, por defecto es 'primary'\n",
          "description": "<p>Input que recibe el color del icono del filtro, por defecto es &#39;primary&#39;</p>\n",
          "line": 50,
          "type": "ButtonColor",
          "decorators": []
        },
        {
          "name": "columns",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput que recibe las columnas de la tabla\n",
          "description": "<p>Input que recibe las columnas de la tabla</p>\n",
          "line": 33,
          "type": "IColumnsFormat[]",
          "decorators": []
        },
        {
          "name": "icon",
          "defaultValue": "'ri-table-line'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput que recibe el icono del filtro, por defecto es 'ri-table-line'\n",
          "description": "<p>Input que recibe el icono del filtro, por defecto es &#39;ri-table-line&#39;</p>\n",
          "line": 60,
          "type": "string",
          "decorators": []
        },
        {
          "name": "label",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput que recibe el tamaño del icono del filtro\n",
          "description": "<p>Input que recibe el tamaño del icono del filtro</p>\n",
          "line": 40,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "defaultValue": "'xm'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput que recibe el tamaño del icono del filtro, por defecto es 'xm'\n",
          "description": "<p>Input que recibe el tamaño del icono del filtro, por defecto es &#39;xm&#39;</p>\n",
          "line": 45,
          "type": "ButtonSize",
          "decorators": []
        },
        {
          "name": "transparent",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput que recibe el color del icono del filtro, por defecto es 'true'\n",
          "description": "<p>Input que recibe el color del icono del filtro, por defecto es &#39;true&#39;</p>\n",
          "line": 55,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "columnsChange",
          "defaultValue": "new EventEmitter<IColumnsFormat[]>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nOutput que emite las columnas seleccionadas\n",
          "description": "<p>Output que emite las columnas seleccionadas</p>\n",
          "line": 65,
          "type": "EventEmitter<IColumnsFormat[]>"
        }
      ],
      "propertiesClass": [
        {
          "name": "_columns",
          "defaultValue": "signal([])",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<IColumnsFormat[]>",
          "optional": false,
          "description": "",
          "line": 67
        },
        {
          "name": "isAllColumnsSelected",
          "defaultValue": "signal(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<boolean>",
          "optional": false,
          "description": "",
          "line": 68
        },
        {
          "name": "isFiltersOpened",
          "defaultValue": "signal(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<boolean>",
          "optional": false,
          "description": "",
          "line": 71
        },
        {
          "name": "isSomeColumnsSelected",
          "defaultValue": "signal(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<boolean>",
          "optional": false,
          "description": "",
          "line": 69
        },
        {
          "name": "scrollStrategy",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ScrollStrategy",
          "optional": false,
          "description": "",
          "line": 70
        }
      ],
      "methodsClass": [
        {
          "name": "changeVisibilityAllColumns",
          "args": [
            {
              "name": "status",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 116,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para cambiar la visibilidad de todas las columnas\n",
          "description": "<p>Función para cambiar la visibilidad de todas las columnas</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 4037,
                "end": 4043,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "status"
              },
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 4021,
                "end": 4026,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 4027,
                "end": 4036,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 4028,
                  "end": 4035,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 136
                }
              }
            }
          ]
        },
        {
          "name": "changeVisibilityColumn",
          "args": [
            {
              "name": "status",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 106,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para cambiar la visibilidad de una columna\n",
          "description": "<p>Función para cambiar la visibilidad de una columna</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 3714,
                "end": 3720,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "status"
              },
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3698,
                "end": 3703,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 3704,
                "end": 3713,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 3705,
                  "end": 3712,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 136
                }
              }
            },
            {
              "name": {
                "pos": 3743,
                "end": 3748,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "index"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3728,
                "end": 3733,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 3734,
                "end": 3742,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 3735,
                  "end": 3741,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 150
                }
              }
            }
          ]
        },
        {
          "name": "closeFilters",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 139,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFuncion para cerrar el overlay de los filtros\n",
          "description": "<p>Funcion para cerrar el overlay de los filtros</p>\n"
        },
        {
          "name": "isAllSelected",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 86,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para saber si todas las columnas están seleccionadas\n",
          "description": "<p>Función para saber si todas las columnas están seleccionadas</p>\n"
        },
        {
          "name": "isSomeSelected",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 96,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para saber si alguna columna está seleccionada\n",
          "description": "<p>Función para saber si alguna columna está seleccionada</p>\n"
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 79,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "toggleOverlay",
          "args": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 129,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para mostra / ocultar el overlay de los filtros\n",
          "description": "<p>Función para mostra / ocultar el overlay de los filtros</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 4408,
                "end": 4413,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "event"
              },
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 4394,
                "end": 4399,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 4400,
                "end": 4407,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 4401,
                  "end": 4406,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 4401,
                    "end": 4406,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "Event"
                  }
                }
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "A11yModule",
          "type": "module"
        },
        {
          "name": "OverlayModule",
          "type": "module"
        },
        {
          "name": "CheckboxComponent",
          "type": "component"
        },
        {
          "name": "EscapeKeyDirective",
          "type": "directive"
        },
        {
          "name": "TranslateModule",
          "type": "module"
        },
        {
          "name": "ButtonComponent",
          "type": "component"
        },
        {
          "name": "SnakeTextToStringPipe",
          "type": "pipe"
        }
      ],
      "description": "<p>neo-filter-columns-table\nComponente para crear un filtro de columnas en una tabla</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;neo-filter-columns-table [columns]=&quot;columnDefinitions&quot; (columnsChange)=&quot;columnsChange($event)&quot;&gt;&lt;/neo-filter-columns-table&gt;</code></pre></div>",
      "rawdescription": "\n\nneo-filter-columns-table\nComponente para crear un filtro de columnas en una tabla\n```html\n<neo-filter-columns-table [columns]=\"columnDefinitions\" (columnsChange)=\"columnsChange($event)\"></neo-filter-columns-table>\n```",
      "type": "component",
      "sourceCode": "import { A11yModule } from '@angular/cdk/a11y';\r\nimport { OverlayModule, ScrollStrategy, ScrollStrategyOptions } from '@angular/cdk/overlay';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Component, EventEmitter, Input, Output, WritableSignal, signal } from '@angular/core';\r\nimport { IColumnsFormat } from '@entities/table.entity';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { EscapeKeyDirective } from '@shared/directives/escape-key.directive';\r\nimport { ButtonComponent } from '../button/button.component';\r\nimport { ButtonColor, ButtonSize } from '../button/models/button.entity';\r\nimport { SnakeTextToStringPipe } from '@shared/pipes/snake-text-to-string/snake-text-to-string.pipe';\r\nimport { CheckboxComponent } from '../form-fields/checkbox/checkbox.component';\r\n\r\n/**\r\n * @name\r\n * neo-filter-columns-table\r\n * @description\r\n * Componente para crear un filtro de columnas en una tabla\r\n * @example\r\n * <neo-filter-columns-table [columns]=\"columnDefinitions\" (columnsChange)=\"columnsChange($event)\"></neo-filter-columns-table>\r\n */\r\n@Component({\r\n  selector: 'neo-filter-columns-table',\r\n  standalone: true,\r\n  imports: [CommonModule, A11yModule, OverlayModule, CheckboxComponent, EscapeKeyDirective, TranslateModule, ButtonComponent, SnakeTextToStringPipe],\r\n  templateUrl: './filter-columns-table.component.html',\r\n  styleUrl: './filter-columns-table.component.scss'\r\n})\r\nexport class FilterColumnsTableComponent {\r\n\r\n  /**\r\n   * Input que recibe las columnas de la tabla\r\n   */\r\n  @Input() set columns(value: IColumnsFormat[]) {\r\n    this._columns.set(JSON.parse(JSON.stringify(value))); // Clonamos el array para evitar problemas con la referencia\r\n  }\r\n\r\n  /**\r\n   * Input que recibe el tamaño del icono del filtro\r\n   */\r\n  @Input() label: string = '';\r\n\r\n  /**\r\n   * Input que recibe el tamaño del icono del filtro, por defecto es 'xm'\r\n   */\r\n  @Input() size: ButtonSize = 'xm';\r\n\r\n  /**\r\n   * Input que recibe el color del icono del filtro, por defecto es 'primary'\r\n   */\r\n  @Input() color: ButtonColor = 'primary';\r\n\r\n  /**\r\n   * Input que recibe el color del icono del filtro, por defecto es 'true'\r\n   */\r\n  @Input() transparent: boolean = true;\r\n\r\n  /**\r\n   * Input que recibe el icono del filtro, por defecto es 'ri-table-line'\r\n   */\r\n  @Input() icon?: string = 'ri-table-line';\r\n\r\n  /**\r\n   * Output que emite las columnas seleccionadas\r\n   */\r\n  @Output() columnsChange: EventEmitter<IColumnsFormat[]> = new EventEmitter<IColumnsFormat[]>();\r\n\r\n  _columns: WritableSignal<IColumnsFormat[]> = signal([]);\r\n  isAllColumnsSelected: WritableSignal<boolean> = signal(false);\r\n  isSomeColumnsSelected: WritableSignal<boolean> = signal(false);\r\n  scrollStrategy: ScrollStrategy;\r\n  isFiltersOpened: WritableSignal<boolean> = signal(false);\r\n\r\n  constructor(\r\n    scrollStrategyOptions: ScrollStrategyOptions\r\n  ) {\r\n    this.scrollStrategy = scrollStrategyOptions.close();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    setTimeout(() => this.isAllSelected(), 100);\r\n  }\r\n\r\n  /**\r\n   * Función para saber si todas las columnas están seleccionadas\r\n   */\r\n  isAllSelected() {\r\n    const numVisibles = this._columns()?.filter(column => column.visible === true)?.length || 0;\r\n    const numColumns = this._columns()?.length || 0;\r\n    this.isAllColumnsSelected.set(numVisibles === numColumns);\r\n    this.isSomeSelected();\r\n  }\r\n\r\n  /**\r\n   * Función para saber si alguna columna está seleccionada\r\n   */\r\n  isSomeSelected() {\r\n    const numVisibles = this._columns()?.filter(column => column.visible === true)?.length || 0;\r\n    this.isSomeColumnsSelected.set(numVisibles > 0);\r\n  }\r\n\r\n  /**\r\n   * Función para cambiar la visibilidad de una columna\r\n   * @param {boolean} status\r\n   * @param {number} index\r\n   */\r\n  changeVisibilityColumn(status: boolean, index: number) {\r\n    this._columns()[index].visible = status;\r\n    this.isAllSelected();\r\n    this.columnsChange.emit(this._columns());\r\n  }\r\n\r\n  /**\r\n   * Función para cambiar la visibilidad de todas las columnas\r\n   * @param {boolean} status\r\n   */\r\n  changeVisibilityAllColumns(status: boolean) {\r\n    this._columns.set(this._columns().map((column: IColumnsFormat) => {\r\n      column.visible = status;\r\n      return column;\r\n    }));\r\n    this.isAllSelected();\r\n    this.columnsChange.emit(this._columns());\r\n  }\r\n\r\n  /**\r\n   * Función para mostra / ocultar el overlay de los filtros\r\n   * @param {Event} event\r\n   */\r\n  toggleOverlay(event: Event) {\r\n    event?.preventDefault();\r\n    event?.stopPropagation();\r\n    this.isAllSelected();\r\n    this.isFiltersOpened.set(!this.isFiltersOpened());\r\n  }\r\n\r\n  /**\r\n   * Funcion para cerrar el overlay de los filtros\r\n   */\r\n  closeFilters() {\r\n    if (this.isFiltersOpened())\r\n      this.isFiltersOpened.set(false);\r\n  }\r\n\r\n}\r\n",
      "styleUrl": "./filter-columns-table.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "scrollStrategyOptions",
            "type": "ScrollStrategyOptions",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 71,
        "jsdoctags": [
          {
            "name": "scrollStrategyOptions",
            "type": "ScrollStrategyOptions",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "accessors": {
        "columns": {
          "name": "columns",
          "setSignature": {
            "name": "columns",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "IColumnsFormat[]",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "rawdescription": "\n\nInput que recibe las columnas de la tabla\n",
            "description": "<p>Input que recibe las columnas de la tabla</p>\n",
            "jsdoctags": [
              {
                "name": "value",
                "type": "IColumnsFormat[]",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      },
      "templateData": "<neo-button\r\n  [mode]=\"label ? 'button' : 'icon'\"\r\n  [title]=\"label\"\r\n  [size]=\"size\"\r\n  [transparent]=\"transparent\"\r\n  [disabled]=\"_columns().length === 0\"\r\n  [color]=\"color\"\r\n  (click)=\"toggleOverlay($event)\"\r\n  cdkOverlayOrigin\r\n  #filterColumnsOverlay=\"cdkOverlayOrigin\"\r\n>\r\n  <i [class]=\"icon\"></i>\r\n  @if (label) {\r\n    <span>{{ label }}</span>\r\n  }\r\n</neo-button>\r\n\r\n<ng-template\r\n  cdkConnectedOverlay\r\n  [cdkConnectedOverlayOrigin]=\"filterColumnsOverlay\"\r\n  [cdkConnectedOverlayOpen]=\"isFiltersOpened()\"\r\n  [cdkConnectedOverlayScrollStrategy]=\"scrollStrategy\"\r\n  cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\r\n  [cdkConnectedOverlayHasBackdrop]=\"true\"\r\n  (detach)=\"closeFilters()\"\r\n  (backdropClick)=\"closeFilters()\"\r\n>\r\n  <div\r\n    class=\"filter-columns-table\"\r\n    cdkTrapFocus\r\n    [cdkTrapFocusAutoCapture]=\"true\"\r\n    (escapeKey)=\"closeFilters()\"\r\n  >\r\n    <div class=\"filter-columns-table--select_all\">\r\n      <neo-checkbox\r\n        [title]=\"'DROPDOWN.SELECT_ALL' | translate\"\r\n        [checked]=\"isSomeColumnsSelected() && isAllColumnsSelected()\"\r\n        [indeterminate]=\"isSomeColumnsSelected() && !isAllColumnsSelected()\"\r\n        class=\"size-s\"\r\n        (click)=\"$event.stopPropagation()\"\r\n        (change)=\"changeVisibilityAllColumns($event)\"\r\n      >\r\n        {{ \"DROPDOWN.SELECT_ALL\" | translate }}\r\n      </neo-checkbox>\r\n    </div>\r\n    <div class=\"filter-columns-table--columns\">\r\n      @for (column of _columns(); track column) {\r\n        <neo-checkbox\r\n          [title]=\"column.label | snakeTextToString\"\r\n          class=\"size-s\"\r\n          [checked]=\"column?.visible || false\"\r\n          (click)=\"$event.stopPropagation()\"\r\n          (change)=\"changeVisibilityColumn($event, $index)\"\r\n        >\r\n          {{ column.label | snakeTextToString }}\r\n        </neo-checkbox>\r\n      }\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n"
    },
    {
      "name": "FormErrorComponent",
      "id": "component-FormErrorComponent-15e619cec322bb45d4c4115a09c3a49483220103c8aaf70e24152851a9efaeabfdef2ab0dfdd193e000bbf22cd9023c00f4e2dd3f77f4396ae70c6ce7b6704fc",
      "file": "src/app/shared/components/form-fields/form-error/form-error.component.ts",
      "encapsulation": ["ViewEncapsulation.None"],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-form-error",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./form-error.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [],
      "description": "<p>neo-form-error\nComponente para mostrar un mensaje de error en un campo de formulario</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;neo-form-error&gt;Mensaje de error&lt;/neo-form-error&gt;</code></pre></div>",
      "rawdescription": "\n\nneo-form-error\nComponente para mostrar un mensaje de error en un campo de formulario\n```html\n<neo-form-error>Mensaje de error</neo-form-error>\n```",
      "type": "component",
      "sourceCode": "import { Component, ViewEncapsulation } from '@angular/core';\r\n\r\n/**\r\n * @name\r\n * neo-form-error\r\n * @description\r\n * Componente para mostrar un mensaje de error en un campo de formulario\r\n * @example\r\n * <neo-form-error>Mensaje de error</neo-form-error>\r\n */\r\n@Component({\r\n  selector: 'neo-form-error',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './form-error.component.html',\r\n  styleUrl: './form-error.component.scss',\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class FormErrorComponent {\r\n\r\n}\r\n",
      "styleUrl": "./form-error.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "templateData": "<div class=\"neo-form-error\">\r\n  <small>\r\n    <ng-content></ng-content>\r\n  </small>\r\n</div>\r\n"
    },
    {
      "name": "FullscreenToggleComponent",
      "id": "component-FullscreenToggleComponent-2e1799ada430422b40d964a65129f1c06b039519f56415f075b37f3caca1d024104e333aff7ea918e47c5590bea543d8f5b272a74d967ac8fc913ad7e61f4771",
      "file": "src/app/shared/components/fullscreen-toggle/fullscreen-toggle.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-fullscreen-toggle",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./fullscreen-toggle.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "color",
          "defaultValue": "'primary'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "ButtonColor",
          "decorators": []
        },
        {
          "name": "size",
          "defaultValue": "'m'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "ButtonSize",
          "decorators": []
        },
        {
          "name": "transparent",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "docElement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "HTMLElement",
          "optional": false,
          "description": "",
          "line": 20
        },
        {
          "name": "isFullScreen",
          "defaultValue": "signal(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<boolean>",
          "optional": false,
          "description": "",
          "line": 19
        }
      ],
      "methodsClass": [
        {
          "name": "onKeyF11",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 27,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción al pulsar la tecla `F11` para cambiar el estado de pantalla completa\n",
          "description": "<p>Función al pulsar la tecla <code>F11</code> para cambiar el estado de pantalla completa</p>\n",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'document:keydown.F11', ['$event']"
            }
          ],
          "modifierKind": [170],
          "jsdoctags": [
            {
              "name": {
                "pos": 967,
                "end": 972,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "event"
              },
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 945,
                "end": 950,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 951,
                "end": 966,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 952,
                  "end": 965,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 952,
                    "end": 965,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "KeyboardEvent"
                  }
                }
              }
            }
          ]
        },
        {
          "name": "screenChange",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 41,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para detectar el cambio de pantalla completa y cambiar el estado\n",
          "description": "<p>Función para detectar el cambio de pantalla completa y cambiar el estado</p>\n",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'document:fullscreenchange'"
            },
            {
              "name": "HostListener",
              "stringifiedArguments": "'document:webkitfullscreenchange'"
            },
            {
              "name": "HostListener",
              "stringifiedArguments": "'document:mozfullscreenchange'"
            },
            {
              "name": "HostListener",
              "stringifiedArguments": "'document:MSFullscreenChange'"
            }
          ],
          "modifierKind": [170, 170, 170, 170],
          "jsdoctags": []
        },
        {
          "name": "toggleFullScreen",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 54,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para comprobar si la pantalla está en modo completo o no y cambiar el estado\n",
          "description": "<p>Función para comprobar si la pantalla está en modo completo o no y cambiar el estado</p>\n"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "document:fullscreenchange",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para detectar el cambio de pantalla completa y cambiar el estado\n",
          "description": "<p>Función para detectar el cambio de pantalla completa y cambiar el estado</p>\n",
          "jsdoctags": [
            {
              "pos": 1259,
              "end": 1284,
              "flags": 16842752,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 348,
              "tagName": {
                "pos": 1260,
                "end": 1265,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1266,
                "end": 1273,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 1267,
                  "end": 1272,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 1267,
                    "end": 1272,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "Event"
                  }
                }
              },
              "name": {
                "pos": 1274,
                "end": 1279,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "event"
              },
              "isNameFirst": false,
              "isBracketed": false
            }
          ],
          "line": 41
        },
        {
          "name": "document:keydown.F11",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event"],
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción al pulsar la tecla `F11` para cambiar el estado de pantalla completa\n",
          "description": "<p>Función al pulsar la tecla <code>F11</code> para cambiar el estado de pantalla completa</p>\n",
          "jsdoctags": [
            {
              "pos": 944,
              "end": 977,
              "flags": 16842752,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 348,
              "tagName": {
                "pos": 945,
                "end": 950,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 951,
                "end": 966,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 952,
                  "end": 965,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 952,
                    "end": 965,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "KeyboardEvent"
                  }
                }
              },
              "name": {
                "pos": 967,
                "end": 972,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "event"
              },
              "isNameFirst": false,
              "isBracketed": false
            }
          ],
          "line": 27
        },
        {
          "name": "document:mozfullscreenchange",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para detectar el cambio de pantalla completa y cambiar el estado\n",
          "description": "<p>Función para detectar el cambio de pantalla completa y cambiar el estado</p>\n",
          "jsdoctags": [
            {
              "pos": 1259,
              "end": 1284,
              "flags": 16842752,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 348,
              "tagName": {
                "pos": 1260,
                "end": 1265,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1266,
                "end": 1273,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 1267,
                  "end": 1272,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 1267,
                    "end": 1272,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "Event"
                  }
                }
              },
              "name": {
                "pos": 1274,
                "end": 1279,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "event"
              },
              "isNameFirst": false,
              "isBracketed": false
            }
          ],
          "line": 41
        },
        {
          "name": "document:MSFullscreenChange",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para detectar el cambio de pantalla completa y cambiar el estado\n",
          "description": "<p>Función para detectar el cambio de pantalla completa y cambiar el estado</p>\n",
          "jsdoctags": [
            {
              "pos": 1259,
              "end": 1284,
              "flags": 16842752,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 348,
              "tagName": {
                "pos": 1260,
                "end": 1265,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1266,
                "end": 1273,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 1267,
                  "end": 1272,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 1267,
                    "end": 1272,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "Event"
                  }
                }
              },
              "name": {
                "pos": 1274,
                "end": 1279,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "event"
              },
              "isNameFirst": false,
              "isBracketed": false
            }
          ],
          "line": 41
        },
        {
          "name": "document:webkitfullscreenchange",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para detectar el cambio de pantalla completa y cambiar el estado\n",
          "description": "<p>Función para detectar el cambio de pantalla completa y cambiar el estado</p>\n",
          "jsdoctags": [
            {
              "pos": 1259,
              "end": 1284,
              "flags": 16842752,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 348,
              "tagName": {
                "pos": 1260,
                "end": 1265,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1266,
                "end": 1273,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 1267,
                  "end": 1272,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 1267,
                    "end": 1272,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "Event"
                  }
                }
              },
              "name": {
                "pos": 1274,
                "end": 1279,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "event"
              },
              "isNameFirst": false,
              "isBracketed": false
            }
          ],
          "line": 41
        }
      ],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "TranslateModule",
          "type": "module"
        },
        {
          "name": "ButtonComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, HostListener, Inject, Input, WritableSignal, signal } from '@angular/core';\r\nimport { ButtonComponent } from '../button/button.component';\r\nimport { CommonModule, DOCUMENT } from '@angular/common';\r\nimport { ButtonColor, ButtonSize } from '../button/models/button.entity';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\n@Component({\r\n  selector: 'neo-fullscreen-toggle',\r\n  standalone: true,\r\n  imports: [CommonModule, TranslateModule, ButtonComponent],\r\n  templateUrl: './fullscreen-toggle.component.html',\r\n  styleUrl: './fullscreen-toggle.component.scss'\r\n})\r\nexport class FullscreenToggleComponent {\r\n\r\n  @Input() color: ButtonColor = 'primary';\r\n  @Input() size: ButtonSize = 'm';\r\n  @Input() transparent: boolean = true;\r\n  isFullScreen: WritableSignal<boolean> = signal(false);\r\n  docElement!: HTMLElement;\r\n\r\n  /**\r\n   * Función al pulsar la tecla `F11` para cambiar el estado de pantalla completa\r\n   * @param {KeyboardEvent} event\r\n   */\r\n  @HostListener('document:keydown.F11', ['$event'])\r\n  onKeyF11(event: KeyboardEvent) {\r\n    event?.preventDefault();\r\n    event?.stopPropagation();\r\n    this.toggleFullScreen();\r\n  }\r\n\r\n  /**\r\n   * Función para detectar el cambio de pantalla completa y cambiar el estado\r\n   * @param {Event} event\r\n   */\r\n  @HostListener('document:fullscreenchange')\r\n  @HostListener('document:webkitfullscreenchange')\r\n  @HostListener('document:mozfullscreenchange')\r\n  @HostListener('document:MSFullscreenChange')\r\n  screenChange() {\r\n    this.isFullScreen.set(!this.isFullScreen());\r\n  }\r\n\r\n  constructor(\r\n    @Inject(DOCUMENT) readonly document: any,\r\n  ) {\r\n    this.docElement = document.documentElement;\r\n  }\r\n\r\n  /**\r\n   * Función para comprobar si la pantalla está en modo completo o no y cambiar el estado\r\n   */\r\n  toggleFullScreen() {\r\n\r\n    if (!this.isFullScreen())\r\n      this.docElement?.requestFullscreen();\r\n    else\r\n      document?.exitFullscreen();\r\n  }\r\n\r\n}\r\n",
      "styleUrl": "./fullscreen-toggle.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "document",
            "type": "any",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 43,
        "jsdoctags": [
          {
            "name": "document",
            "type": "any",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "templateData": "<neo-button\r\n  mode=\"icon\"\r\n  [size]=\"size\"\r\n  [color]=\"color\"\r\n  [transparent]=\"transparent\"\r\n  (click)=\"toggleFullScreen()\"\r\n  [title]=\"\r\n    (isFullScreen() ? 'APP.FULL_SCREEN_EXIT' : 'APP.FULL_SCREEN')\r\n      | translate\r\n  \"\r\n>\r\n  <i\r\n    [ngClass]=\"{\r\n      'ri-fullscreen-exit-line': isFullScreen(),\r\n      'ri-fullscreen-line': !isFullScreen()\r\n    }\"\r\n  ></i>\r\n</neo-button>\r\n"
    },
    {
      "name": "InputComponent",
      "id": "component-InputComponent-cefbc7a8e5fe3fed798e7f870245bd8888b6350803a1ed71879d4eb20acd45929159359ecd9974045d935e907747375a35cbf62339d2ca97e1956aa98652846d",
      "file": "src/app/shared/components/form-fields/input/input.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputComponent), multi: true\n}",
          "type": "component"
        }
      ],
      "selector": "neo-input",
      "styleUrls": ["./input.component.scss", "./../form-fields-settings.scss"],
      "styles": [],
      "templateUrl": ["./input.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "autocomplete",
          "defaultValue": "'off'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "InputAutocomplete",
          "decorators": []
        },
        {
          "name": "autofocus",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput para marcar el campo como deshabilitado\n",
          "description": "<p>Input para marcar el campo como deshabilitado</p>\n",
          "line": 53,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 38,
          "type": "string",
          "decorators": []
        },
        {
          "name": "inputSize",
          "defaultValue": "'m'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 47,
          "type": "InputSize",
          "decorators": []
        },
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "string",
          "decorators": []
        },
        {
          "name": "max",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 46,
          "type": "number",
          "decorators": []
        },
        {
          "name": "maxlength",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "number",
          "decorators": []
        },
        {
          "name": "min",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "number",
          "decorators": []
        },
        {
          "name": "minlength",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "number",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "string",
          "decorators": []
        },
        {
          "name": "placeholder",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "string",
          "decorators": []
        },
        {
          "name": "readonly",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "required",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "number",
          "decorators": []
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "string",
          "decorators": []
        },
        {
          "name": "type",
          "defaultValue": "\"text\"",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "InputType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput para introducir el valor del campo\n",
          "description": "<p>Input para introducir el valor del campo</p>\n",
          "line": 64,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "new EventEmitter<string>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 72,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_disabled",
          "defaultValue": "signal(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<boolean>",
          "optional": false,
          "description": "",
          "line": 75
        },
        {
          "name": "_value",
          "defaultValue": "signal('')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string | null>",
          "optional": false,
          "description": "",
          "line": 74
        },
        {
          "name": "hasErrors",
          "defaultValue": "input<boolean>(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "InputSignal<boolean>",
          "optional": false,
          "description": "",
          "line": 48
        },
        {
          "name": "labelId",
          "defaultValue": "signal('')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string>",
          "optional": false,
          "description": "",
          "line": 76
        },
        {
          "name": "onChange",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "<p>Funciones de control de eventos</p>\n",
          "line": 117,
          "rawdescription": "\n\nFunciones de control de eventos\n"
        },
        {
          "name": "onTouched",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 118
        }
      ],
      "methodsClass": [
        {
          "name": "createUniqueId",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 89,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para crear un id único para el label del input\n",
          "description": "<p>Función para crear un id único para el label del input</p>\n"
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 82,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onBlur",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 110,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción del evento `blur` del campo para marcar el campo como \"touched\"\n",
          "description": "<p>Función del evento <code>blur</code> del campo para marcar el campo como &quot;touched&quot;</p>\n"
        },
        {
          "name": "onInput",
          "args": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 100,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción del evento `input` del campo para obtener el valor introducido\n",
          "description": "<p>Función del evento <code>input</code> del campo para obtener el valor introducido</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 3028,
                "end": 3033,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "value"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3013,
                "end": 3018,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 3019,
                "end": 3027,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 3020,
                  "end": 3026,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 154
                }
              }
            }
          ]
        },
        {
          "name": "registerOnChange",
          "args": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 134,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nUpdate form when DOM element value changes (view => model)\n",
          "description": "<p>Update form when DOM element value changes (view =&gt; model)</p>\n",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnTouched",
          "args": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 141,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nUpdate form when DOM element is blurred (view => model)\n",
          "description": "<p>Update form when DOM element is blurred (view =&gt; model)</p>\n",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setDisabledState",
          "args": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 148,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nWrite form disabled state to the DOM element (model => view)\n",
          "description": "<p>Write form disabled state to the DOM element (model =&gt; view)</p>\n",
          "jsdoctags": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "writeValue",
          "args": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 123,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nWrite form value to the DOM element (model => view)\n",
          "description": "<p>Write form value to the DOM element (model =&gt; view)</p>\n",
          "jsdoctags": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "JsonPipe",
          "type": "pipe"
        }
      ],
      "description": "<p>neo-input\nComponente para crear un campo de texto</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;neo-input [value]=&quot;&#39;Texto&#39;&quot; [type]=&quot;&#39;text&#39;&quot; [placeholder]=&quot;&#39;Placeholder&#39;&quot; (change)=&quot;change($event)&quot;&gt;&lt;/neo-input&gt;\n&lt;neo-input [value]=&quot;&#39;Texto&#39;&quot; [type]=&quot;&#39;number&#39;&quot; [placeholder]=&quot;&#39;Placeholder&#39;&quot; formControlName=&quot;input_name&quot;&gt;&lt;/neo-input&gt;</code></pre></div>",
      "rawdescription": "\n\nneo-input\nComponente para crear un campo de texto\n```html\n<neo-input [value]=\"'Texto'\" [type]=\"'text'\" [placeholder]=\"'Placeholder'\" (change)=\"change($event)\"></neo-input>\n<neo-input [value]=\"'Texto'\" [type]=\"'number'\" [placeholder]=\"'Placeholder'\" formControlName=\"input_name\"></neo-input>\n```",
      "type": "component",
      "sourceCode": "import { CommonModule, JsonPipe } from '@angular/common';\r\nimport { Component, EventEmitter, forwardRef, input, Input, InputSignal, Output, signal, WritableSignal } from '@angular/core';\r\nimport { ControlValueAccessor, FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { InputsUtilsService } from '@shared/components/form-fields/services/inputs-utils.service';\r\nimport { InputAutocomplete, InputSize, InputType } from '../models/form-field.entity';\r\n\r\n/**\r\n * @name\r\n * neo-input\r\n * @description\r\n * Componente para crear un campo de texto\r\n * @example\r\n * <neo-input [value]=\"'Texto'\" [type]=\"'text'\" [placeholder]=\"'Placeholder'\" (change)=\"change($event)\"></neo-input>\r\n * <neo-input [value]=\"'Texto'\" [type]=\"'number'\" [placeholder]=\"'Placeholder'\" formControlName=\"input_name\"></neo-input>\r\n */\r\n@Component({\r\n  selector: 'neo-input',\r\n  templateUrl: './input.component.html',\r\n  styleUrls: ['./input.component.scss', './../form-fields-settings.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => InputComponent),\r\n      multi: true\r\n    }\r\n  ],\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule, JsonPipe]\r\n})\r\nexport class InputComponent implements ControlValueAccessor {\r\n\r\n  @Input() autofocus?: boolean = false;\r\n  @Input() readonly?: boolean = false;\r\n  @Input() required: boolean = false;\r\n  @Input() title?: string;\r\n  @Input() label?: string;\r\n  @Input() name?: string;\r\n  @Input() id?: string;\r\n  @Input() placeholder: string = '';\r\n  @Input() type: InputType = \"text\";\r\n  @Input() autocomplete: InputAutocomplete = 'off';\r\n  @Input() size?: number;\r\n  @Input() minlength?: number;\r\n  @Input() maxlength?: number;\r\n  @Input() min?: number;\r\n  @Input() max?: number;\r\n  @Input() inputSize: InputSize = 'm';\r\n  hasErrors: InputSignal<boolean> = input<boolean>(false);\r\n\r\n  /**\r\n   * Input para marcar el campo como deshabilitado\r\n   */\r\n  @Input() set disabled(status: boolean) {\r\n    this._disabled.set(status);\r\n  }\r\n\r\n  get disabled() {\r\n    return this._disabled();\r\n  }\r\n\r\n  /**\r\n   * Input para introducir el valor del campo\r\n   */\r\n  @Input() set value(value: string) {\r\n    this._value.set(value);\r\n  }\r\n\r\n  get value(): string | null {\r\n    return this._value();\r\n  }\r\n\r\n  @Output() change = new EventEmitter<string>();\r\n\r\n  _value: WritableSignal<string | null> = signal('');\r\n  _disabled: WritableSignal<boolean> = signal(false);\r\n  labelId: WritableSignal<string> = signal('');\r\n\r\n  constructor(\r\n    private readonly _inputsUtilsService: InputsUtilsService,\r\n  ) { }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.createUniqueId();\r\n  }\r\n\r\n  /**\r\n   * Función para crear un id único para el label del input\r\n   */\r\n  createUniqueId(): void {\r\n    if (!this.id && this.label && this.label !== '') {\r\n      this.id = this._inputsUtilsService.createUniqueId(this.label);\r\n      this.labelId.set(`label_${this.id}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Función del evento `input` del campo para obtener el valor introducido\r\n   * @param {string} value\r\n   */\r\n  onInput(value: string) {\r\n    this._value.set(value);\r\n    this.onChange(value);\r\n    this.onTouched();\r\n    this.change.emit(value);\r\n  }\r\n\r\n  /**\r\n   * Función del evento `blur` del campo para marcar el campo como \"touched\"\r\n   */\r\n  onBlur() {\r\n    this.onTouched();\r\n  }\r\n\r\n  /**\r\n   * Funciones de control de eventos\r\n   */\r\n  onChange: any = () => { };\r\n  onTouched: any = () => { };\r\n\r\n  /**\r\n   * Write form value to the DOM element (model => view)\r\n   */\r\n  writeValue(value: any) {\r\n    if (this.type === 'number')\r\n      this._value.set(value || 0);\r\n    else\r\n      this._value.set(value);\r\n\r\n  }\r\n\r\n  /**\r\n  * Update form when DOM element value changes (view => model)\r\n  */\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  /**\r\n   * Update form when DOM element is blurred (view => model)\r\n   */\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /**\r\n   * Write form disabled state to the DOM element (model => view)\r\n   */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this._disabled.set(isDisabled);\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import 'base';\r\n\r\n.neo-input {\r\n  position: relative;\r\n\r\n  &--disabled {\r\n    cursor: not-allowed;\r\n    pointer-events: none;\r\n  }\r\n\r\n  &__label {\r\n    &--required {\r\n      &::after {\r\n        content: '*';\r\n        color: var(--danger-color);\r\n      }\r\n    }\r\n  }\r\n\r\n  &__wrapper {\r\n    position: relative;\r\n\r\n    &__field {\r\n      width: 100%;\r\n      border-radius: 5px;\r\n      box-sizing: border-box;\r\n      padding: 10px;\r\n\r\n      &--has-error {\r\n        border: 1px solid var(--danger-color);\r\n      }\r\n\r\n      &[disabled],\r\n      &:disabled {\r\n        cursor: not-allowed;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
          "styleUrl": "./input.component.scss"
        },
        {
          "data": ".neo-input,\r\n.neo-input-password,\r\n.neo-input-date-picker,\r\n.neo-textarea,\r\n.neo-select {\r\n  &__label {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    margin-bottom: 5px;\r\n    gap: 5px;\r\n  }\r\n}\r\n\r\n.neo-select__field,\r\n.neo-input__wrapper__field,\r\n.neo-input-password__wrapper__field,\r\n.neo-input-date-picker__wrapper__field,\r\n.neo-checkbox__control,\r\n.neo-checkbox__control__label,\r\n.neo-radiobutton__control,\r\n.neo-radiobutton__control__label {\r\n\r\n  &.size-xs {\r\n    font-size: 0.6rem;\r\n    line-height: 0.6rem;\r\n  }\r\n\r\n  &.size-s {\r\n    font-size: 0.7rem;\r\n    line-height: 0.7rem;\r\n  }\r\n\r\n  &.size-xm {\r\n    font-size: 0.75rem;\r\n    line-height: 0.75rem;\r\n  }\r\n\r\n  &.size-m {\r\n    font-size: 0.8rem;\r\n    line-height: 0.8rem;\r\n  }\r\n\r\n  &.size-l {\r\n    font-size: 0.85rem;\r\n    line-height: 0.85rem;\r\n  }\r\n\r\n  &.size-xl {\r\n    font-size: 0.9rem;\r\n    line-height: 0.9rem;\r\n  }\r\n}\r\n\r\n.neo-select__field,\r\n.neo-input__wrapper__field,\r\n.neo-input-password__wrapper__field,\r\n.neo-input-date-picker__wrapper__field,\r\n.neo-checkbox__control,\r\n.neo-radiobutton__control {\r\n  &.size-xs {\r\n    height: 25px;\r\n  }\r\n\r\n  &.size-s {\r\n    height: 28px;\r\n  }\r\n\r\n  &.size-xm {\r\n    height: 32px;\r\n  }\r\n\r\n  &.size-m {\r\n    height: 35px;\r\n  }\r\n\r\n  &.size-l {\r\n    height: 40px;\r\n  }\r\n\r\n  &.size-xl {\r\n    height: 45px;\r\n  }\r\n}\r\n\r\n.neo-checkbox__control,\r\n.neo-radiobutton__control {\r\n\r\n  &.size-xs &__checkmark,\r\n  &.size-s &__checkmark {\r\n    height: 10px;\r\n    width: 10px;\r\n\r\n    &::after {\r\n      border-width: 4px;\r\n    }\r\n  }\r\n\r\n  &.size-xm &__checkmark {\r\n    height: 14px;\r\n    width: 14px;\r\n\r\n    &::after {\r\n      border-width: 4px;\r\n    }\r\n  }\r\n\r\n  &.size-m &__checkmark {\r\n    height: 18px;\r\n    width: 18px;\r\n\r\n    &::after {\r\n      border-width: 5px;\r\n    }\r\n  }\r\n\r\n  &.size-l &__checkmark {\r\n    height: 22px;\r\n    width: 22px;\r\n\r\n    &::after {\r\n      border-width: 6px;\r\n    }\r\n  }\r\n\r\n  &.size-xl &__checkmark {\r\n    height: 26px;\r\n    width: 26px;\r\n\r\n    &::after {\r\n      border-width: 8px;\r\n    }\r\n  }\r\n}\r\n",
          "styleUrl": "./../form-fields-settings.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_inputsUtilsService",
            "type": "InputsUtilsService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 76,
        "jsdoctags": [
          {
            "name": "_inputsUtilsService",
            "type": "InputsUtilsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "implements": ["ControlValueAccessor"],
      "accessors": {
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "status",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 53,
            "rawdescription": "\n\nInput para marcar el campo como deshabilitado\n",
            "description": "<p>Input para marcar el campo como deshabilitado</p>\n",
            "jsdoctags": [
              {
                "name": "status",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "",
            "returnType": "",
            "line": 57
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 64,
            "rawdescription": "\n\nInput para introducir el valor del campo\n",
            "description": "<p>Input para introducir el valor del campo</p>\n",
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 68
          }
        }
      },
      "templateData": "<div\r\n  class=\"neo-input\"\r\n  [title]=\"label || ''\"\r\n  [class.neo-input--disabled]=\"_disabled()\"\r\n>\r\n  @if (label) {\r\n    <label\r\n      [attr.for]=\"id\"\r\n      [id]=\"labelId()\"\r\n      class=\"neo-input__label\"\r\n      [class.neo-input__label--required]=\"required\"\r\n    >\r\n      <span [innerHtml]=\"label\"></span>\r\n    </label>\r\n  }\r\n  <div class=\"neo-input__wrapper\">\r\n    <input\r\n      #input=\"ngModel\"\r\n      class=\"neo-input__wrapper__field size-{{ inputSize }}\"\r\n      [ngClass]=\"{\r\n        'neo-input__wrapper__field--has-error':\r\n          hasErrors() ||\r\n          (input?.errors && (input?.dirty || input?.touched)) ||\r\n          false\r\n      }\"\r\n      [(ngModel)]=\"value\"\r\n      (input)=\"onInput(input.value)\"\r\n      (blur)=\"onBlur()\"\r\n      [attr.id]=\"id\"\r\n      [attr.type]=\"type\"\r\n      [attr.min]=\"min\"\r\n      [attr.max]=\"max\"\r\n      [attr.aria-disabled]=\"_disabled()\"\r\n      [attr.aria-readonly]=\"readonly\"\r\n      [attr.aria-label]=\"placeholder\"\r\n      [attr.aria-labelledby]=\"labelId()\"\r\n      [readonly]=\"readonly\"\r\n      [disabled]=\"_disabled()\"\r\n      [required]=\"required\"\r\n      [attr.aria-required]=\"required\"\r\n      [attr.placeholder]=\"placeholder\"\r\n      [attr.size]=\"size\"\r\n      [attr.minlength]=\"minlength\"\r\n      [attr.maxlength]=\"maxlength\"\r\n      [attr.autocomplete]=\"autocomplete\"\r\n      [attr.name]=\"name\"\r\n      [title]=\"title || label || placeholder || ''\"\r\n    />\r\n  </div>\r\n</div>\r\n"
    },
    {
      "name": "InputDatePickerComponent",
      "id": "component-InputDatePickerComponent-b05440cf62ccbb7bcf060b96f4e23a81623d40eef208cfb6589e614c15cfd5f63c3333898ddfffb1a61b3063aba7a407fbf5eaabadc16512f898a95619e88c3a",
      "file": "src/app/shared/components/form-fields/input-date-picker/input-date-picker.component.ts",
      "encapsulation": ["ViewEncapsulation.None"],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputDatePickerComponent), multi: true\n}",
          "type": "component"
        }
      ],
      "selector": "neo-input-date-picker",
      "styleUrls": [
        "./input-date-picker.component.scss",
        "./../form-fields-settings.scss"
      ],
      "styles": [],
      "templateUrl": ["./input-date-picker.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "autocomplete",
          "defaultValue": "'off'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "InputAutocomplete",
          "decorators": []
        },
        {
          "name": "autofocus",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput para marcar el campo como deshabilitado\n",
          "description": "<p>Input para marcar el campo como deshabilitado</p>\n",
          "line": 52,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "format",
          "defaultValue": "DEFAULT_FORMAT",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 46,
          "type": "string",
          "decorators": []
        },
        {
          "name": "icon",
          "defaultValue": "'ri-calendar-2-line'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "string",
          "decorators": []
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "string",
          "decorators": []
        },
        {
          "name": "inputSize",
          "defaultValue": "'m'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "InputSize",
          "decorators": []
        },
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 38,
          "type": "string",
          "decorators": []
        },
        {
          "name": "placeholder",
          "defaultValue": "'aaaa-mm-dd'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "string",
          "decorators": []
        },
        {
          "name": "readonly",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "required",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "showIconCalendar",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "string",
          "decorators": []
        },
        {
          "name": "type",
          "defaultValue": "'day'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "DatePickerType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput para introducir el valor del campo\n",
          "description": "<p>Input para introducir el valor del campo</p>\n",
          "line": 63,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "new EventEmitter<string>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 72,
          "type": "EventEmitter"
        },
        {
          "name": "dateSelected",
          "defaultValue": "new EventEmitter<string>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 71,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_disabled",
          "defaultValue": "signal(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<boolean>",
          "optional": false,
          "description": "",
          "line": 75
        },
        {
          "name": "_value",
          "defaultValue": "signal('')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string>",
          "optional": false,
          "description": "",
          "line": 74
        },
        {
          "name": "currentDate",
          "defaultValue": "signal('')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string | []>",
          "optional": false,
          "description": "",
          "line": 79
        },
        {
          "name": "defaultDate",
          "defaultValue": "signal(moment(new Date()))",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<moment.Moment>",
          "optional": false,
          "description": "",
          "line": 78
        },
        {
          "name": "hasErrors",
          "defaultValue": "input<boolean>(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "InputSignal<boolean>",
          "optional": false,
          "description": "",
          "line": 47
        },
        {
          "name": "isDatePickerOpened",
          "defaultValue": "signal(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<boolean>",
          "optional": false,
          "description": "",
          "line": 77
        },
        {
          "name": "labelId",
          "defaultValue": "signal('')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string>",
          "optional": false,
          "description": "",
          "line": 82
        },
        {
          "name": "onChange",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "<p>Funciones de control de eventos</p>\n",
          "line": 184,
          "rawdescription": "\n\nFunciones de control de eventos\n"
        },
        {
          "name": "onTouched",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 185
        },
        {
          "name": "scrollStrategy",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ScrollStrategy",
          "optional": false,
          "description": "",
          "line": 80
        }
      ],
      "methodsClass": [
        {
          "name": "closeCalendar",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 176,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para cerrar el calendario\n",
          "description": "<p>Función para cerrar el calendario</p>\n"
        },
        {
          "name": "createUniqueId",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 99,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para crear un id único para el label del input\n",
          "description": "<p>Función para crear un id único para el label del input</p>\n"
        },
        {
          "name": "formatDate",
          "args": [
            {
              "name": "valueFormat",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "date",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 148,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para formatear una fecha\n",
          "description": "<p>Función para formatear una fecha</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 4586,
                "end": 4597,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "valueFormat"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 4571,
                "end": 4576,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 4577,
                "end": 4585,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 4578,
                  "end": 4584,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 154
                }
              }
            },
            {
              "name": {
                "pos": 4617,
                "end": 4621,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "date"
              },
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 4605,
                "end": 4610,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 4611,
                "end": 4616,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 4612,
                  "end": 4615,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 133
                }
              }
            },
            {
              "tagName": {
                "pos": 4629,
                "end": 4636,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "returns"
              },
              "comment": "",
              "returnType": "string"
            }
          ]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 92,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onBlur",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 121,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción del evento `blur` del campo para marcar el campo como \"touched\"\n",
          "description": "<p>Función del evento <code>blur</code> del campo para marcar el campo como &quot;touched&quot;</p>\n"
        },
        {
          "name": "onInput",
          "args": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 110,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción del evento `input` del campo para obtener el valor introducido\n",
          "description": "<p>Función del evento <code>input</code> del campo para obtener el valor introducido</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 3651,
                "end": 3656,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "value"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3636,
                "end": 3641,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 3642,
                "end": 3650,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 3643,
                  "end": 3649,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 154
                }
              }
            }
          ]
        },
        {
          "name": "registerOnChange",
          "args": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 203,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nUpdate form when DOM element value changes (view => model)\n",
          "description": "<p>Update form when DOM element value changes (view =&gt; model)</p>\n",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnTouched",
          "args": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 210,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nUpdate form when DOM element is blurred (view => model)\n",
          "description": "<p>Update form when DOM element is blurred (view =&gt; model)</p>\n",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setCalendarValue",
          "args": [
            {
              "name": "value",
              "type": "DateSelected",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 129,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para seleccionar una fecha\n",
          "description": "<p>Función para seleccionar una fecha</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 4072,
                "end": 4077,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "value"
              },
              "type": "DateSelected",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 4051,
                "end": 4056,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 4057,
                "end": 4071,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 4058,
                  "end": 4070,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 4058,
                    "end": 4070,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "DateSelected"
                  }
                }
              }
            }
          ]
        },
        {
          "name": "setDisabledState",
          "args": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 217,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nWrite form disabled state to the DOM element (model => view)\n",
          "description": "<p>Write form disabled state to the DOM element (model =&gt; view)</p>\n",
          "jsdoctags": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "toogleCalendar",
          "args": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 167,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para abrir o cerrar el calendario al hacer click en el icono o en el campo\n",
          "description": "<p>Función para abrir o cerrar el calendario al hacer click en el icono o en el campo</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 5282,
                "end": 5287,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "event"
              },
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 5268,
                "end": 5273,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 5274,
                "end": 5281,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 5275,
                  "end": 5280,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 5275,
                    "end": 5280,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "Event"
                  }
                }
              }
            }
          ]
        },
        {
          "name": "writeValue",
          "args": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 190,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nWrite form value to the DOM element (model => view)\n",
          "description": "<p>Write form value to the DOM element (model =&gt; view)</p>\n",
          "jsdoctags": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "<p>neo-date-picker\nComponente para crear un campo de fecha con un calendario desplegable.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;neo-date-picker [value]=&quot;&#39;2021-12-31&#39;&quot; [format]=&quot;DEFAULT_FORMAT&quot; (dateSelected)=&quot;dateSelected($event)&quot;&gt;&lt;/neo-date-picker&gt;</code></pre></div>",
      "rawdescription": "\n\nneo-date-picker\nComponente para crear un campo de fecha con un calendario desplegable.\n```html\n<neo-date-picker [value]=\"'2021-12-31'\" [format]=\"DEFAULT_FORMAT\" (dateSelected)=\"dateSelected($event)\"></neo-date-picker>\n```",
      "type": "component",
      "sourceCode": "import { ScrollStrategy, ScrollStrategyOptions } from '@angular/cdk/overlay';\r\nimport { Component, EventEmitter, forwardRef, Input, Output, signal, WritableSignal, input, InputSignal, ViewEncapsulation } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { DEFAULT_FORMAT, DatePickerType, DateSelected } from './models/date-picker.entity';\r\nimport { CalendarService } from './services/calendar.service';\r\nimport { InputsUtilsService } from '@shared/components/form-fields/services/inputs-utils.service';\r\nimport moment from 'moment';\r\nimport { InputAutocomplete, InputSize } from '../models/form-field.entity';\r\n\r\n/**\r\n * @name\r\n * neo-date-picker\r\n * @description\r\n * Componente para crear un campo de fecha con un calendario desplegable.\r\n * @example\r\n * <neo-date-picker [value]=\"'2021-12-31'\" [format]=\"DEFAULT_FORMAT\" (dateSelected)=\"dateSelected($event)\"></neo-date-picker>\r\n */\r\n@Component({\r\n  selector: 'neo-input-date-picker',\r\n  templateUrl: './input-date-picker.component.html',\r\n  styleUrls: ['./input-date-picker.component.scss', './../form-fields-settings.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => InputDatePickerComponent),\r\n      multi: true\r\n    }\r\n  ],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class InputDatePickerComponent implements ControlValueAccessor {\r\n\r\n  @Input() autofocus?: boolean = false;\r\n  @Input() readonly?: boolean = false;\r\n  @Input() required: boolean = false;\r\n  @Input() title?: string;\r\n  @Input() label?: string;\r\n  @Input() name?: string;\r\n  @Input() id?: string;\r\n  @Input() type: DatePickerType = 'day';\r\n  @Input() placeholder: string = 'aaaa-mm-dd';\r\n  @Input() icon?: string = 'ri-calendar-2-line';\r\n  @Input() autocomplete: InputAutocomplete = 'off';\r\n  @Input() inputSize: InputSize = 'm';\r\n  @Input() showIconCalendar: boolean = true;\r\n  @Input() format: string = DEFAULT_FORMAT;\r\n  hasErrors: InputSignal<boolean> = input<boolean>(false);\r\n\r\n  /**\r\n   * Input para marcar el campo como deshabilitado\r\n   */\r\n  @Input() set disabled(status: boolean) {\r\n    this._disabled.set(status);\r\n  }\r\n\r\n  get disabled() {\r\n    return this._disabled();\r\n  }\r\n\r\n  /**\r\n   * Input para introducir el valor del campo\r\n   */\r\n  @Input() set value(value: string) {\r\n    this._value.set(value);\r\n  }\r\n\r\n  get value(): string | null {\r\n    return this._value();\r\n  }\r\n\r\n  @Output() dateSelected = new EventEmitter<string>();\r\n  @Output() change = new EventEmitter<string>();\r\n\r\n  _value: WritableSignal<string> = signal('');\r\n  _disabled: WritableSignal<boolean> = signal(false);\r\n\r\n  isDatePickerOpened: WritableSignal<boolean> = signal(false);\r\n  defaultDate: WritableSignal<moment.Moment> = signal(moment(new Date()));\r\n  currentDate: WritableSignal<string | string[]> = signal('');\r\n  scrollStrategy: ScrollStrategy;\r\n\r\n  labelId: WritableSignal<string> = signal('');\r\n\r\n  constructor(\r\n    private readonly _calendarService: CalendarService,\r\n    private readonly _inputsUtilsService: InputsUtilsService,\r\n    scrollStrategyOptions: ScrollStrategyOptions\r\n  ) {\r\n    this.scrollStrategy = scrollStrategyOptions.close();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.createUniqueId();\r\n  }\r\n\r\n  /**\r\n   * Función para crear un id único para el label del input\r\n   */\r\n  createUniqueId(): void {\r\n    if (!this.id && this.label && this.label !== '') {\r\n      this.id = this._inputsUtilsService.createUniqueId(this.label);\r\n      this.labelId.set(`label_${this.id}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Función del evento `input` del campo para obtener el valor introducido\r\n   * @param {string} value\r\n   */\r\n  onInput(value: string) {\r\n    this._value.set(value);\r\n    this.onChange(value);\r\n    this.onTouched();\r\n    this.dateSelected.emit(this._value());\r\n    this.change.emit(this._value());\r\n  }\r\n\r\n  /**\r\n   * Función del evento `blur` del campo para marcar el campo como \"touched\"\r\n   */\r\n  onBlur() {\r\n    this.onTouched();\r\n  }\r\n\r\n  /**\r\n   * Función para seleccionar una fecha\r\n   * @param {DateSelected} value\r\n   */\r\n  setCalendarValue(value: DateSelected) {\r\n    this._value?.set(this.formatDate(this.format, value.date)); // Valor mostrado en el campo\r\n    this.defaultDate.set(moment(value.date)); // Valor pasado al componente Calendar\r\n    this.onChange(this._value());\r\n    this.onTouched();\r\n\r\n    if (value?.closePicker)\r\n      this.closeCalendar();\r\n\r\n    this.dateSelected.emit(this._value());\r\n    this.change.emit(this._value());\r\n  }\r\n\r\n  /**\r\n   * Función para formatear una fecha\r\n   * @param {string} valueFormat\r\n   * @param {any} date\r\n   * @returns {string}\r\n   */\r\n  formatDate(valueFormat: string, date: any): string {\r\n\r\n    this.currentDate.set(date);\r\n\r\n    if ((this.type === 'range' || this.type === 'week') && date?.length > 0)\r\n      return moment(new Date(date[0])).format(this.format) + ' - ' + moment(new Date(date[1])).format(this.format);\r\n\r\n    if (valueFormat !== \"\" && moment(new Date(date), valueFormat, true)) {\r\n      return moment(new Date(date)).format(valueFormat);\r\n    } else {\r\n      return moment(new Date(date)).format(this.format);\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Función para abrir o cerrar el calendario al hacer click en el icono o en el campo\r\n   * @param {Event} event\r\n   */\r\n  toogleCalendar(event: Event) {\r\n    event?.preventDefault();\r\n    event?.stopPropagation();\r\n    this.isDatePickerOpened.set(!this.isDatePickerOpened());\r\n  }\r\n\r\n  /**\r\n   * Función para cerrar el calendario\r\n   */\r\n  closeCalendar() {\r\n    if (this.isDatePickerOpened())\r\n      this.isDatePickerOpened.set(false);\r\n  }\r\n\r\n  /**\r\n   * Funciones de control de eventos\r\n   */\r\n  onChange: any = () => { };\r\n  onTouched: any = () => { };\r\n\r\n  /**\r\n   * Write form value to the DOM element (model => view)\r\n   */\r\n  writeValue(value: any) {\r\n\r\n    if (value && value !== '') {\r\n      this.defaultDate.set(this._calendarService.buildValidMomentDate(value));\r\n      this._value?.set(moment(this.defaultDate()).format(this.format) || '');\r\n    } else {\r\n      this._value?.set('');\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Update form when DOM element value changes (view => model)\r\n  */\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  /**\r\n   * Update form when DOM element is blurred (view => model)\r\n   */\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /**\r\n   * Write form disabled state to the DOM element (model => view)\r\n   */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this._disabled.set(isDisabled);\r\n  }\r\n\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import 'base';\r\n\r\n.neo-input-date-picker {\r\n  position: relative;\r\n\r\n  &--disabled {\r\n    cursor: not-allowed;\r\n    pointer-events: none;\r\n  }\r\n\r\n  &__label {\r\n    &--required {\r\n      &::after {\r\n        content: '*';\r\n        color: var(--danger-color);\r\n      }\r\n    }\r\n  }\r\n\r\n  &__wrapper {\r\n    position: relative;\r\n\r\n    &__field {\r\n      width: 100%;\r\n      border-radius: 5px;\r\n      box-sizing: border-box;\r\n      padding: 10px 10px;\r\n      padding-right: 40px;\r\n      cursor: pointer;\r\n\r\n      &[disabled],\r\n      &:disabled {\r\n        cursor: not-allowed;\r\n      }\r\n\r\n      &--has-error {\r\n        border: 1px solid var(--danger-color);\r\n      }\r\n    }\r\n\r\n    &__icon-calendar {\r\n      position: absolute;\r\n      top: 0;\r\n      right: 0;\r\n      height: 100%;\r\n      width: 40px;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      cursor: pointer;\r\n\r\n      i:before {\r\n        color: var(--icon-field-color);\r\n      }\r\n    }\r\n  }\r\n\r\n  &__calendar {\r\n    .calendar-picker {\r\n      border: none !important;\r\n      box-shadow: none !important;\r\n    }\r\n  }\r\n}\r\n",
          "styleUrl": "./input-date-picker.component.scss"
        },
        {
          "data": ".neo-input,\r\n.neo-input-password,\r\n.neo-input-date-picker,\r\n.neo-textarea,\r\n.neo-select {\r\n  &__label {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    margin-bottom: 5px;\r\n    gap: 5px;\r\n  }\r\n}\r\n\r\n.neo-select__field,\r\n.neo-input__wrapper__field,\r\n.neo-input-password__wrapper__field,\r\n.neo-input-date-picker__wrapper__field,\r\n.neo-checkbox__control,\r\n.neo-checkbox__control__label,\r\n.neo-radiobutton__control,\r\n.neo-radiobutton__control__label {\r\n\r\n  &.size-xs {\r\n    font-size: 0.6rem;\r\n    line-height: 0.6rem;\r\n  }\r\n\r\n  &.size-s {\r\n    font-size: 0.7rem;\r\n    line-height: 0.7rem;\r\n  }\r\n\r\n  &.size-xm {\r\n    font-size: 0.75rem;\r\n    line-height: 0.75rem;\r\n  }\r\n\r\n  &.size-m {\r\n    font-size: 0.8rem;\r\n    line-height: 0.8rem;\r\n  }\r\n\r\n  &.size-l {\r\n    font-size: 0.85rem;\r\n    line-height: 0.85rem;\r\n  }\r\n\r\n  &.size-xl {\r\n    font-size: 0.9rem;\r\n    line-height: 0.9rem;\r\n  }\r\n}\r\n\r\n.neo-select__field,\r\n.neo-input__wrapper__field,\r\n.neo-input-password__wrapper__field,\r\n.neo-input-date-picker__wrapper__field,\r\n.neo-checkbox__control,\r\n.neo-radiobutton__control {\r\n  &.size-xs {\r\n    height: 25px;\r\n  }\r\n\r\n  &.size-s {\r\n    height: 28px;\r\n  }\r\n\r\n  &.size-xm {\r\n    height: 32px;\r\n  }\r\n\r\n  &.size-m {\r\n    height: 35px;\r\n  }\r\n\r\n  &.size-l {\r\n    height: 40px;\r\n  }\r\n\r\n  &.size-xl {\r\n    height: 45px;\r\n  }\r\n}\r\n\r\n.neo-checkbox__control,\r\n.neo-radiobutton__control {\r\n\r\n  &.size-xs &__checkmark,\r\n  &.size-s &__checkmark {\r\n    height: 10px;\r\n    width: 10px;\r\n\r\n    &::after {\r\n      border-width: 4px;\r\n    }\r\n  }\r\n\r\n  &.size-xm &__checkmark {\r\n    height: 14px;\r\n    width: 14px;\r\n\r\n    &::after {\r\n      border-width: 4px;\r\n    }\r\n  }\r\n\r\n  &.size-m &__checkmark {\r\n    height: 18px;\r\n    width: 18px;\r\n\r\n    &::after {\r\n      border-width: 5px;\r\n    }\r\n  }\r\n\r\n  &.size-l &__checkmark {\r\n    height: 22px;\r\n    width: 22px;\r\n\r\n    &::after {\r\n      border-width: 6px;\r\n    }\r\n  }\r\n\r\n  &.size-xl &__checkmark {\r\n    height: 26px;\r\n    width: 26px;\r\n\r\n    &::after {\r\n      border-width: 8px;\r\n    }\r\n  }\r\n}\r\n",
          "styleUrl": "./../form-fields-settings.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_calendarService",
            "type": "CalendarService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_inputsUtilsService",
            "type": "InputsUtilsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "scrollStrategyOptions",
            "type": "ScrollStrategyOptions",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 82,
        "jsdoctags": [
          {
            "name": "_calendarService",
            "type": "CalendarService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_inputsUtilsService",
            "type": "InputsUtilsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "scrollStrategyOptions",
            "type": "ScrollStrategyOptions",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "implements": ["ControlValueAccessor"],
      "accessors": {
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "status",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 52,
            "rawdescription": "\n\nInput para marcar el campo como deshabilitado\n",
            "description": "<p>Input para marcar el campo como deshabilitado</p>\n",
            "jsdoctags": [
              {
                "name": "status",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "",
            "returnType": "",
            "line": 56
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 63,
            "rawdescription": "\n\nInput para introducir el valor del campo\n",
            "description": "<p>Input para introducir el valor del campo</p>\n",
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 67
          }
        }
      },
      "templateData": "<div\r\n  class=\"neo-input-date-picker\"\r\n  [title]=\"label || ''\"\r\n  [class.neo-input-date-picker--disabled]=\"_disabled()\"\r\n>\r\n  @if (label) {\r\n    <label\r\n      class=\"neo-input-date-picker__label\"\r\n      [attr.for]=\"id\"\r\n      [id]=\"labelId()\"\r\n      [class.neo-input-date-picker__label--required]=\"required\"\r\n    >\r\n      <span [innerHtml]=\"label\"></span>\r\n    </label>\r\n  }\r\n  <div class=\"neo-input-date-picker__wrapper\">\r\n    <input\r\n      (click)=\"toogleCalendar($event)\"\r\n      clickable\r\n      cdkOverlayOrigin\r\n      #datePicker=\"cdkOverlayOrigin\"\r\n      #datePickerInput=\"ngModel\"\r\n      class=\"neo-input-date-picker__wrapper__field size-{{ inputSize }}\"\r\n      [class.neo-input-date-picker__wrapper__field--has-error]=\"\r\n        hasErrors() ||\r\n        (datePickerInput?.errors &&\r\n          (datePickerInput?.dirty || datePickerInput?.touched)) ||\r\n        false\r\n      \"\r\n      [value]=\"_value()\"\r\n      [(ngModel)]=\"value\"\r\n      (input)=\"onInput(datePickerInput.value)\"\r\n      (blur)=\"onBlur()\"\r\n      [attr.id]=\"id\"\r\n      [attr.aria-disabled]=\"_disabled()\"\r\n      [attr.aria-readonly]=\"true\"\r\n      [attr.aria-label]=\"placeholder\"\r\n      [attr.aria-labelledby]=\"labelId()\"\r\n      [readonly]=\"true\"\r\n      [disabled]=\"_disabled()\"\r\n      [required]=\"required\"\r\n      [attr.aria-required]=\"required\"\r\n      [attr.placeholder]=\"placeholder\"\r\n      [attr.autocomplete]=\"autocomplete\"\r\n      [attr.name]=\"name\"\r\n      [title]=\"title || label || placeholder || ''\"\r\n      autocomplete=\"off\"\r\n      type=\"text\"\r\n    />\r\n    @if (showIconCalendar) {\r\n      <div\r\n        class=\"neo-input-date-picker__wrapper__icon-calendar\"\r\n        [class.disabled]=\"_disabled()\"\r\n        (click)=\"\r\n          !_disabled() ? toogleCalendar($event) : $event.preventDefault()\r\n        \"\r\n        clickable\r\n        cdkOverlayOrigin\r\n        #datePicker=\"cdkOverlayOrigin\"\r\n      >\r\n        <i [class]=\"icon\"></i>\r\n      </div>\r\n    }\r\n  </div>\r\n</div>\r\n\r\n<ng-template\r\n  cdkConnectedOverlay\r\n  [cdkConnectedOverlayOrigin]=\"datePicker\"\r\n  [cdkConnectedOverlayOpen]=\"isDatePickerOpened()\"\r\n  [cdkConnectedOverlayScrollStrategy]=\"scrollStrategy\"\r\n  cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\r\n  [cdkConnectedOverlayHasBackdrop]=\"true\"\r\n  (detach)=\"closeCalendar()\"\r\n  (backdropClick)=\"closeCalendar()\"\r\n>\r\n  <div\r\n    (clickOutside)=\"closeCalendar()\"\r\n    (escapeKey)=\"closeCalendar()\"\r\n    cdkTrapFocus\r\n    [cdkTrapFocusAutoCapture]=\"true\"\r\n  >\r\n    <neo-calendar-picker\r\n      [defaultDate]=\"type !== 'range' && type !== 'week' ? defaultDate() : ''\"\r\n      [startDate]=\"\r\n        type === 'range' || type === 'week' ? currentDate()[0] || '' : ''\r\n      \"\r\n      [endDate]=\"\r\n        type === 'range' || type === 'week' ? currentDate()[1] || '' : ''\r\n      \"\r\n      [type]=\"type\"\r\n      (dateSelected)=\"setCalendarValue($event)\"\r\n      class=\"neo-input-date-picker__calendar\"\r\n    ></neo-calendar-picker>\r\n  </div>\r\n</ng-template>\r\n"
    },
    {
      "name": "InputPasswordComponent",
      "id": "component-InputPasswordComponent-6ad2101f5461241746b0f1acbc62421b13a0f8955e579d2dc5330a9a1d534c732f84a40de881dae46a3d5ac2923c8055d3c8b31030f10f16c3a702b99871ebf9",
      "file": "src/app/shared/components/form-fields/input-password/input-password.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputPasswordComponent), multi: true\n}",
          "type": "component"
        }
      ],
      "selector": "neo-input-password",
      "styleUrls": [
        "./input-password.component.scss",
        "./../form-fields-settings.scss"
      ],
      "styles": [],
      "templateUrl": ["./input-password.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "autofocus",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput para marcar el campo como deshabilitado\n",
          "description": "<p>Input para marcar el campo como deshabilitado</p>\n",
          "line": 49,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 38,
          "type": "string",
          "decorators": []
        },
        {
          "name": "inputSize",
          "defaultValue": "'m'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "InputSize",
          "decorators": []
        },
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "string",
          "decorators": []
        },
        {
          "name": "maxlength",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "number",
          "decorators": []
        },
        {
          "name": "minlength",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "number",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "string",
          "decorators": []
        },
        {
          "name": "placeholder",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "string",
          "decorators": []
        },
        {
          "name": "readonly",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "required",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "number",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput para introducir el valor del campo\n",
          "description": "<p>Input para introducir el valor del campo</p>\n",
          "line": 60,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "new EventEmitter<string>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 68,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_disabled",
          "defaultValue": "signal(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<boolean>",
          "optional": false,
          "description": "",
          "line": 71
        },
        {
          "name": "_value",
          "defaultValue": "signal('')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string | null>",
          "optional": false,
          "description": "",
          "line": 70
        },
        {
          "name": "hasErrors",
          "defaultValue": "input<boolean>(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "InputSignal<boolean>",
          "optional": false,
          "description": "",
          "line": 44
        },
        {
          "name": "labelId",
          "defaultValue": "signal('')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string>",
          "optional": false,
          "description": "",
          "line": 73
        },
        {
          "name": "onChange",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "<p>Funciones de control de eventos</p>\n",
          "line": 138,
          "rawdescription": "\n\nFunciones de control de eventos\n"
        },
        {
          "name": "onTouched",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 139
        },
        {
          "name": "show",
          "defaultValue": "signal(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<boolean>",
          "optional": false,
          "description": "",
          "line": 72
        }
      ],
      "methodsClass": [
        {
          "name": "createUniqueId",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 86,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para crear un id único para el label del input\n",
          "description": "<p>Función para crear un id único para el label del input</p>\n"
        },
        {
          "name": "hidePassword",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 131,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para ocultar la contraseña\n",
          "description": "<p>Función para ocultar la contraseña</p>\n"
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 79,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onBlur",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 107,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción del evento `blur` del campo para marcar el campo como \"touched\"\n",
          "description": "<p>Función del evento <code>blur</code> del campo para marcar el campo como &quot;touched&quot;</p>\n"
        },
        {
          "name": "onInput",
          "args": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 97,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción del evento `input` del campo para obtener el valor introducido\n",
          "description": "<p>Función del evento <code>input</code> del campo para obtener el valor introducido</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 2957,
                "end": 2962,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "value"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2942,
                "end": 2947,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 2948,
                "end": 2956,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 2949,
                  "end": 2955,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 154
                }
              }
            }
          ]
        },
        {
          "name": "registerOnChange",
          "args": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 145,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnTouched",
          "args": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 149,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setDisabledState",
          "args": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 153,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showPassword",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 124,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para mostrar la contraseña\n",
          "description": "<p>Función para mostrar la contraseña</p>\n"
        },
        {
          "name": "togglePassword",
          "args": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 115,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para mostrar u ocultar la contraseña al hacer click en el icono\n",
          "description": "<p>Función para mostrar u ocultar la contraseña al hacer click en el icono</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 3356,
                "end": 3361,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "event"
              },
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3342,
                "end": 3347,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 3348,
                "end": 3355,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 3349,
                  "end": 3354,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 3349,
                    "end": 3354,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "Event"
                  }
                }
              }
            }
          ]
        },
        {
          "name": "writeValue",
          "args": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 141,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "ButtonComponent",
          "type": "component"
        },
        {
          "name": "TranslateModule",
          "type": "module"
        }
      ],
      "description": "<p>neo-input-password\nComponente para crear un campo de contraseña</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;neo-input-password [value]=&quot;&#39;Texto&#39;&quot; [placeholder]=&quot;&#39;Placeholder&#39;&quot; (enteredValue)=&quot;enteredValue($event)&quot;&gt;&lt;/neo-input-password&gt;</code></pre></div>",
      "rawdescription": "\n\nneo-input-password\nComponente para crear un campo de contraseña\n```html\n<neo-input-password [value]=\"'Texto'\" [placeholder]=\"'Placeholder'\" (enteredValue)=\"enteredValue($event)\"></neo-input-password>\n```",
      "type": "component",
      "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, EventEmitter, forwardRef, input, Input, InputSignal, Output, signal, WritableSignal } from '@angular/core';\r\nimport { ControlValueAccessor, FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { ButtonComponent } from '../../button/button.component';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { InputsUtilsService } from '@shared/components/form-fields/services/inputs-utils.service';\r\nimport { InputSize } from '../models/form-field.entity';\r\n\r\n/**\r\n * @name\r\n * neo-input-password\r\n * @description\r\n * Componente para crear un campo de contraseña\r\n * @example\r\n * <neo-input-password [value]=\"'Texto'\" [placeholder]=\"'Placeholder'\" (enteredValue)=\"enteredValue($event)\"></neo-input-password>\r\n */\r\n@Component({\r\n  selector: 'neo-input-password',\r\n  templateUrl: './input-password.component.html',\r\n  styleUrls: ['./input-password.component.scss', './../form-fields-settings.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => InputPasswordComponent),\r\n      multi: true\r\n    }\r\n  ],\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule, ButtonComponent, TranslateModule]\r\n})\r\nexport class InputPasswordComponent implements ControlValueAccessor {\r\n\r\n  @Input() autofocus?: boolean = false;\r\n  @Input() readonly?: boolean = false;\r\n  @Input() required: boolean = false;\r\n  @Input() label?: string;\r\n  @Input() name?: string;\r\n  @Input() id?: string;\r\n  @Input() placeholder?: string;\r\n  @Input() size?: number;\r\n  @Input() minlength?: number;\r\n  @Input() maxlength?: number;\r\n  @Input() inputSize: InputSize = 'm';\r\n  hasErrors: InputSignal<boolean> = input<boolean>(false);\r\n\r\n  /**\r\n   * Input para marcar el campo como deshabilitado\r\n   */\r\n  @Input() set disabled(status: boolean) {\r\n    this._disabled.set(status);\r\n  }\r\n\r\n  get disabled() {\r\n    return this._disabled();\r\n  }\r\n\r\n  /**\r\n   * Input para introducir el valor del campo\r\n   */\r\n  @Input() set value(value: string) {\r\n    this._value.set(value);\r\n  }\r\n\r\n  get value(): string | null {\r\n    return this._value();\r\n  }\r\n\r\n  @Output() change = new EventEmitter<string>();\r\n\r\n  _value: WritableSignal<string | null> = signal('');\r\n  _disabled: WritableSignal<boolean> = signal(false);\r\n  show: WritableSignal<boolean> = signal(false);\r\n  labelId: WritableSignal<string> = signal('');\r\n\r\n  constructor(\r\n    private readonly _inputsUtilsService: InputsUtilsService,\r\n  ) { }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.createUniqueId();\r\n  }\r\n\r\n  /**\r\n   * Función para crear un id único para el label del input\r\n   */\r\n  createUniqueId(): void {\r\n    if (!this.id && this.label && this.label !== '') {\r\n      this.id = this._inputsUtilsService.createUniqueId(this.label);\r\n      this.labelId.set(`label_${this.id}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Función del evento `input` del campo para obtener el valor introducido\r\n   * @param {string} value\r\n   */\r\n  onInput(value: string) {\r\n    this._value.set(value);\r\n    this.onChange(value);\r\n    this.onTouched();\r\n    this.change.emit(value);\r\n  }\r\n\r\n  /**\r\n   * Función del evento `blur` del campo para marcar el campo como \"touched\"\r\n   */\r\n  onBlur() {\r\n    this.onTouched();\r\n  }\r\n\r\n  /**\r\n   * Función para mostrar u ocultar la contraseña al hacer click en el icono\r\n   * @param {Event} event\r\n   */\r\n  togglePassword(event: Event) {\r\n    event?.preventDefault();\r\n    event?.stopPropagation();\r\n    this.show.set(!this.show());\r\n  }\r\n\r\n  /**\r\n   * Función para mostrar la contraseña\r\n   */\r\n  showPassword() {\r\n    this.show.set(true);\r\n  }\r\n\r\n  /**\r\n   * Función para ocultar la contraseña\r\n   */\r\n  hidePassword() {\r\n    this.show.set(false);\r\n  }\r\n\r\n  /**\r\n   * Funciones de control de eventos\r\n   */\r\n  onChange: any = () => { };\r\n  onTouched: any = () => { };\r\n\r\n  writeValue(value: any) {\r\n    this._value.set(value);\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this._disabled.set(isDisabled);\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import 'base';\r\n\r\n.neo-input-password {\r\n  position: relative;\r\n\r\n  &--disabled {\r\n    cursor: not-allowed;\r\n    pointer-events: none;\r\n  }\r\n\r\n  &__label {\r\n    &--required {\r\n      &::after {\r\n        content: '*';\r\n        color: var(--danger-color);\r\n      }\r\n    }\r\n  }\r\n\r\n  &__wrapper {\r\n    position: relative;\r\n\r\n    &__field {\r\n      width: 100%;\r\n      border-radius: 5px;\r\n      box-sizing: border-box;\r\n      padding: 10px 10px;\r\n      padding-right: 40px;\r\n\r\n      &--has-error {\r\n        border: 1px solid var(--danger-color);\r\n      }\r\n\r\n      &[disabled],\r\n      &:disabled {\r\n        cursor: not-allowed;\r\n      }\r\n    }\r\n\r\n    &__icon-show {\r\n      position: absolute;\r\n      top: 0;\r\n      right: 0;\r\n      height: 100%;\r\n      width: 40px;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      cursor: pointer;\r\n\r\n      i:before {\r\n        color: var(--icon-field-color);\r\n      }\r\n    }\r\n  }\r\n}\r\n",
          "styleUrl": "./input-password.component.scss"
        },
        {
          "data": ".neo-input,\r\n.neo-input-password,\r\n.neo-input-date-picker,\r\n.neo-textarea,\r\n.neo-select {\r\n  &__label {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    margin-bottom: 5px;\r\n    gap: 5px;\r\n  }\r\n}\r\n\r\n.neo-select__field,\r\n.neo-input__wrapper__field,\r\n.neo-input-password__wrapper__field,\r\n.neo-input-date-picker__wrapper__field,\r\n.neo-checkbox__control,\r\n.neo-checkbox__control__label,\r\n.neo-radiobutton__control,\r\n.neo-radiobutton__control__label {\r\n\r\n  &.size-xs {\r\n    font-size: 0.6rem;\r\n    line-height: 0.6rem;\r\n  }\r\n\r\n  &.size-s {\r\n    font-size: 0.7rem;\r\n    line-height: 0.7rem;\r\n  }\r\n\r\n  &.size-xm {\r\n    font-size: 0.75rem;\r\n    line-height: 0.75rem;\r\n  }\r\n\r\n  &.size-m {\r\n    font-size: 0.8rem;\r\n    line-height: 0.8rem;\r\n  }\r\n\r\n  &.size-l {\r\n    font-size: 0.85rem;\r\n    line-height: 0.85rem;\r\n  }\r\n\r\n  &.size-xl {\r\n    font-size: 0.9rem;\r\n    line-height: 0.9rem;\r\n  }\r\n}\r\n\r\n.neo-select__field,\r\n.neo-input__wrapper__field,\r\n.neo-input-password__wrapper__field,\r\n.neo-input-date-picker__wrapper__field,\r\n.neo-checkbox__control,\r\n.neo-radiobutton__control {\r\n  &.size-xs {\r\n    height: 25px;\r\n  }\r\n\r\n  &.size-s {\r\n    height: 28px;\r\n  }\r\n\r\n  &.size-xm {\r\n    height: 32px;\r\n  }\r\n\r\n  &.size-m {\r\n    height: 35px;\r\n  }\r\n\r\n  &.size-l {\r\n    height: 40px;\r\n  }\r\n\r\n  &.size-xl {\r\n    height: 45px;\r\n  }\r\n}\r\n\r\n.neo-checkbox__control,\r\n.neo-radiobutton__control {\r\n\r\n  &.size-xs &__checkmark,\r\n  &.size-s &__checkmark {\r\n    height: 10px;\r\n    width: 10px;\r\n\r\n    &::after {\r\n      border-width: 4px;\r\n    }\r\n  }\r\n\r\n  &.size-xm &__checkmark {\r\n    height: 14px;\r\n    width: 14px;\r\n\r\n    &::after {\r\n      border-width: 4px;\r\n    }\r\n  }\r\n\r\n  &.size-m &__checkmark {\r\n    height: 18px;\r\n    width: 18px;\r\n\r\n    &::after {\r\n      border-width: 5px;\r\n    }\r\n  }\r\n\r\n  &.size-l &__checkmark {\r\n    height: 22px;\r\n    width: 22px;\r\n\r\n    &::after {\r\n      border-width: 6px;\r\n    }\r\n  }\r\n\r\n  &.size-xl &__checkmark {\r\n    height: 26px;\r\n    width: 26px;\r\n\r\n    &::after {\r\n      border-width: 8px;\r\n    }\r\n  }\r\n}\r\n",
          "styleUrl": "./../form-fields-settings.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_inputsUtilsService",
            "type": "InputsUtilsService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 73,
        "jsdoctags": [
          {
            "name": "_inputsUtilsService",
            "type": "InputsUtilsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "implements": ["ControlValueAccessor"],
      "accessors": {
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "status",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 49,
            "rawdescription": "\n\nInput para marcar el campo como deshabilitado\n",
            "description": "<p>Input para marcar el campo como deshabilitado</p>\n",
            "jsdoctags": [
              {
                "name": "status",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "",
            "returnType": "",
            "line": 53
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 60,
            "rawdescription": "\n\nInput para introducir el valor del campo\n",
            "description": "<p>Input para introducir el valor del campo</p>\n",
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 64
          }
        }
      },
      "templateData": "<div\r\n  class=\"neo-input-password\"\r\n  [class.neo-input-password--disabled]=\"_disabled()\"\r\n>\r\n  @if (label) {\r\n    <label\r\n      class=\"neo-input-password__label\"\r\n      [for]=\"id\"\r\n      [id]=\"labelId()\"\r\n      [class.neo-input-password__label--required]=\"required\"\r\n    >\r\n      <span [innerHtml]=\"label\"></span>\r\n    </label>\r\n  }\r\n  <div class=\"neo-input-password__wrapper\">\r\n    <input\r\n      #inputPassword=\"ngModel\"\r\n      class=\"neo-input-password__wrapper__field size-{{ inputSize }}\"\r\n      [class.neo-input-password__wrapper__field--has-error]=\"\r\n        hasErrors() ||\r\n        (inputPassword?.errors &&\r\n          (inputPassword?.dirty || inputPassword?.touched)) ||\r\n        false\r\n      \"\r\n      type=\"{{ show() ? 'text' : 'password' }}\"\r\n      (input)=\"onInput(inputPassword.value)\"\r\n      (blur)=\"onBlur()\"\r\n      [(ngModel)]=\"value\"\r\n      [attr.id]=\"id\"\r\n      [attr.autofocus]=\"autofocus\"\r\n      [attr.aria-disabled]=\"_disabled()\"\r\n      [attr.aria-readonly]=\"readonly\"\r\n      [attr.aria-label]=\"placeholder\"\r\n      [attr.aria-labelledby]=\"labelId()\"\r\n      [readonly]=\"readonly\"\r\n      [disabled]=\"_disabled()\"\r\n      [attr.required]=\"required\"\r\n      [attr.aria-required]=\"required\"\r\n      [attr.placeholder]=\"placeholder\"\r\n      [attr.size]=\"size\"\r\n      [attr.minlength]=\"minlength\"\r\n      [attr.maxlength]=\"maxlength\"\r\n      autocomplete=\"new-password\"\r\n      [title]=\"label\"\r\n    />\r\n    @if (!_disabled()) {\r\n      <div\r\n        class=\"neo-input-password__wrapper__icon-show\"\r\n        [title]=\"\r\n          (show() ? 'app.hide_password' : 'app.show_password') | translate\r\n        \"\r\n        (click)=\"togglePassword($event)\"\r\n      >\r\n        <i\r\n          [ngClass]=\"{ 'ri-eye-off-fill': show(), 'ri-eye-fill': !show() }\"\r\n        ></i>\r\n      </div>\r\n    }\r\n  </div>\r\n</div>\r\n"
    },
    {
      "name": "ItemMenuContextComponent",
      "id": "component-ItemMenuContextComponent-fbbe38797eb3c091d05e682d8bcdeb7ea2a2add458726277177ff640e36129b3f7e4251be26294a0a418d5e45c5edf760b785baaed9026610e8433df9179ee12",
      "file": "src/app/shared/components/menu-context/item-menu-context/item-menu-context.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-item-menu-context",
      "styleUrls": ["./item-menu-context.component.scss"],
      "styles": [],
      "templateUrl": ["./item-menu-context.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "icon",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nSi hemos utilizado `label` para mostrar texto podemos asignarle también un icono\n",
          "description": "<p>Si hemos utilizado <code>label</code> para mostrar texto podemos asignarle también un icono</p>\n",
          "line": 33,
          "type": "string",
          "decorators": []
        },
        {
          "name": "label",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nLabel para darle nombre al item del menú en caso de no utilizar el contenido `ng-content` para ello\n",
          "description": "<p>Label para darle nombre al item del menú en caso de no utilizar el contenido <code>ng-content</code> para ello</p>\n",
          "line": 28,
          "type": "string",
          "decorators": []
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nTítulo que recibirá el item si éste no consta de un `label`\n",
          "description": "<p>Título que recibirá el item si éste no consta de un <code>label</code></p>\n",
          "line": 43,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "click",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 47,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "_title",
          "defaultValue": "signal('')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string>",
          "optional": false,
          "description": "",
          "line": 35
        },
        {
          "name": "itemMenuContent",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 23,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'itemMenuContent'"
            }
          ],
          "modifierKind": [170]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 67,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción que se ejecuta después de que el componente se haya inicializado\n",
          "description": "<p>Función que se ejecuta después de que el componente se haya inicializado</p>\n"
        },
        {
          "name": "onClickItem",
          "args": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 57,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nTrigger al hacer click en el item del menú que emite el evento `click`\n",
          "description": "<p>Trigger al hacer click en el item del menú que emite el evento <code>click</code></p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 1806,
                "end": 1811,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "event"
              },
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1792,
                "end": 1797,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1798,
                "end": 1805,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 1799,
                  "end": 1804,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 1799,
                    "end": 1804,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "Event"
                  }
                }
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "<p>neo-item-menu-context\nComponente para crear un item de un menú contextual en el componente <code>neo-menu-context</code>.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;neo-menu-context [icon]=&quot;&#39;ri-more-2-fill&#39;&quot; [size]=&quot;&#39;xm&#39;&quot; [title]=&quot;&#39;Título&#39;&quot;&gt;\n   &lt;neo-item-menu-context [title]=&quot;&#39;Título diferente al contenido&#39;&quot;&quot;&gt;Test 1&lt;/neo-item-menu-context&gt;\n   &lt;neo-item-menu-context [label]=&quot;&#39;Texto del item&#39;&quot; [icon]=&quot;&#39;icono-del-item&#39;&quot;&gt;&lt;/neo-item-menu-context&gt;\n   &lt;neo-item-menu-context&gt;Test 2&lt;/neo-item-menu-context&gt;\n&lt;/neo-menu-context&gt;</code></pre></div>",
      "rawdescription": "\n\nneo-item-menu-context\nComponente para crear un item de un menú contextual en el componente `neo-menu-context`.\n```html\n<neo-menu-context [icon]=\"'ri-more-2-fill'\" [size]=\"'xm'\" [title]=\"'Título'\">\n   <neo-item-menu-context [title]=\"'Título diferente al contenido'\"\">Test 1</neo-item-menu-context>\n   <neo-item-menu-context [label]=\"'Texto del item'\" [icon]=\"'icono-del-item'\"></neo-item-menu-context>\n   <neo-item-menu-context>Test 2</neo-item-menu-context>\n</neo-menu-context>\n```",
      "type": "component",
      "sourceCode": "import { Component, Output, EventEmitter, ElementRef, ViewChild, Input, WritableSignal, signal } from '@angular/core';\r\nimport { MenuContextComponent } from '../menu-context.component';\r\n\r\n/**\r\n * @name\r\n * neo-item-menu-context\r\n * @description\r\n * Componente para crear un item de un menú contextual en el componente `neo-menu-context`.\r\n * @example\r\n * <neo-menu-context [icon]=\"'ri-more-2-fill'\" [size]=\"'xm'\" [title]=\"'Título'\">\r\n *    <neo-item-menu-context [title]=\"'Título diferente al contenido'\"\">Test 1</neo-item-menu-context>\r\n *    <neo-item-menu-context [label]=\"'Texto del item'\" [icon]=\"'icono-del-item'\"></neo-item-menu-context>\r\n *    <neo-item-menu-context>Test 2</neo-item-menu-context>\r\n * </neo-menu-context>\r\n */\r\n@Component({\r\n  selector: 'neo-item-menu-context',\r\n  templateUrl: './item-menu-context.component.html',\r\n  styleUrls: ['./item-menu-context.component.scss'],\r\n})\r\nexport class ItemMenuContextComponent {\r\n\r\n  @ViewChild('itemMenuContent') itemMenuContent!: ElementRef;\r\n\r\n  /**\r\n   * Label para darle nombre al item del menú en caso de no utilizar el contenido `ng-content` para ello\r\n   */\r\n  @Input() label: string = '';\r\n\r\n  /**\r\n   * Si hemos utilizado `label` para mostrar texto podemos asignarle también un icono\r\n   */\r\n  @Input() icon: string = '';\r\n\r\n  _title: WritableSignal<string> = signal('');\r\n  get title(): string {\r\n    return this._title();\r\n  }\r\n\r\n  /**\r\n   * Título que recibirá el item si éste no consta de un `label`\r\n   */\r\n  @Input() set title(title: string) {\r\n    this._title.set(title);\r\n  }\r\n\r\n  @Output() click: EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor(\r\n    private menuContextParent: MenuContextComponent,\r\n  ) { }\r\n\r\n  /**\r\n   * Trigger al hacer click en el item del menú que emite el evento `click`\r\n   * @param {Event} event\r\n   */\r\n  onClickItem(event: Event) {\r\n    event?.preventDefault();\r\n    event?.stopPropagation();\r\n    this.menuContextParent.close(); // Cerramos el menú padre\r\n    this.click.emit(event);\r\n  }\r\n\r\n  /**\r\n   * Función que se ejecuta después de que el componente se haya inicializado\r\n   */\r\n  ngAfterViewInit(): void {\r\n    if (this._title() === '' || this._title().length === 0 && this.label !== '')\r\n      this._title.set(this.label);\r\n    else {\r\n      if (this._title() === '' || this._title().length === 0)\r\n        this._title.set(this.itemMenuContent.nativeElement.innerHTML.replace(/(<([^>]+)>)/gi, \"\"));\r\n    }\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import 'base';\r\n\r\n.item-menu-context {\r\n  cursor: pointer;\r\n  padding: 5px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  gap: 10px;\r\n  color: var(--text-color);\r\n  justify-content: center;\r\n  background-color: transparent;\r\n  border: none;\r\n  font-size: 0.75rem;\r\n  line-height: 0.8rem;\r\n  height: 30px;\r\n\r\n  &__label {\r\n    font-weight: 600;\r\n  }\r\n\r\n  &__icon {\r\n    i::before {\r\n      color: var(--icon-btn-primary-transparent-color) !important;\r\n    }\r\n  }\r\n\r\n  &:hover,\r\n  &:focus,\r\n  &:active {\r\n    background-color: var(--hover-bg-btn-primary-transparent-color);\r\n\r\n    .item-menu-context__label {\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n\r\n}\r\n",
          "styleUrl": "./item-menu-context.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "menuContextParent",
            "type": "MenuContextComponent",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 47,
        "jsdoctags": [
          {
            "name": "menuContextParent",
            "type": "MenuContextComponent",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "accessors": {
        "title": {
          "name": "title",
          "setSignature": {
            "name": "title",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "title",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "rawdescription": "\n\nTítulo que recibirá el item si éste no consta de un `label`\n",
            "description": "<p>Título que recibirá el item si éste no consta de un <code>label</code></p>\n",
            "jsdoctags": [
              {
                "name": "title",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "title",
            "type": "string",
            "returnType": "string",
            "line": 36
          }
        }
      },
      "templateData": "<div\r\n  #itemMenuContent\r\n  class=\"item-menu-context\"\r\n  (click)=\"onClickItem($event)\"\r\n  clickable\r\n  [title]=\"_title()\"\r\n>\r\n  @if (!label) {\r\n    <ng-content></ng-content>\r\n  } @else {\r\n   <div class=\"item-menu-context__icon\">\r\n    <i [class]=\"icon\"></i>\r\n   </div>\r\n   <div class=\"item-menu-context__label\">{{ label }}</div>\r\n  }\r\n</div>\r\n"
    },
    {
      "name": "LogoComponent",
      "id": "component-LogoComponent-16fcd9e4831b05008b723e6f06170acadb536baa0be01b865902127301cf725a0ee1241bb06600f0a1bad55bb208972f851a186b7c2a41f45020d9ed4ab5929d",
      "file": "src/app/shared/components/logo/logo.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-logo",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./logo.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "link",
          "defaultValue": "'/'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nEnlace al que redirige el logo\n",
          "description": "<p>Enlace al que redirige el logo</p>\n",
          "line": 31,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "defaultValue": "'m'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nTamaño del logo (s, m) de tipo `LogoSize`\n",
          "description": "<p>Tamaño del logo (s, m) de tipo <code>LogoSize</code></p>\n",
          "line": 26,
          "type": "LogoSize",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "logo",
          "defaultValue": "LOGO",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 33
        },
        {
          "name": "logoSmall",
          "defaultValue": "LOGO_SMALL",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 34
        },
        {
          "name": "theme",
          "defaultValue": "signal(LIGHT_THEME)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Signal<ThemeType>",
          "optional": false,
          "description": "",
          "line": 36
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 43,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [],
      "description": "<p>neo-logo\nComponente para crear el logo de la aplicación con el tamaño deseado</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;neo-logo size=&quot;s&quot; link=&quot;/&quot;&gt;&lt;/neo-logo&gt;</code></pre></div>",
      "rawdescription": "\n\nneo-logo\nComponente para crear el logo de la aplicación con el tamaño deseado\n```html\n<neo-logo size=\"s\" link=\"/\"></neo-logo>\n```",
      "type": "component",
      "sourceCode": "import { Component, Injector, Input, Signal, computed, effect, signal } from '@angular/core';\r\nimport { ThemesService } from '../theme-toggle/service/themes.service';\r\nimport { ThemeType, LIGHT_THEME } from '../theme-toggle/model/theme.entity';\r\nimport { LOGO, LOGO_DARK, LOGO_SMALL, LOGO_SMALL_DARK, LogoSize } from './models/logo.entity';\r\n\r\n/**\r\n * @name\r\n * neo-logo\r\n * @description\r\n * Componente para crear el logo de la aplicación con el tamaño deseado\r\n * @example\r\n * <neo-logo size=\"s\" link=\"/\"></neo-logo>\r\n */\r\n@Component({\r\n  selector: 'neo-logo',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './logo.component.html',\r\n  styleUrl: './logo.component.scss'\r\n})\r\nexport class LogoComponent {\r\n\r\n  /**\r\n   * Tamaño del logo (s, m) de tipo `LogoSize`\r\n   */\r\n  @Input() size: LogoSize = 'm';\r\n\r\n  /**\r\n   * Enlace al que redirige el logo\r\n   */\r\n  @Input() link: string = '/';\r\n\r\n  logo: string = LOGO;\r\n  logoSmall: string = LOGO_SMALL;\r\n\r\n  theme: Signal<ThemeType> = signal(LIGHT_THEME);\r\n\r\n  constructor(\r\n    private readonly injector: Injector,\r\n    private readonly _themesService: ThemesService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n\r\n    this.theme = computed(() => this._themesService.getCurrentTheme());\r\n\r\n    // Cuando el tema cambie, cambiamos el logo\r\n    effect(() => {\r\n      switch (this.theme()) {\r\n        case LIGHT_THEME:\r\n          this.logo = LOGO;\r\n          this.logoSmall = LOGO_SMALL;\r\n          break;\r\n        default:\r\n          this.logo = LOGO_DARK\r\n          this.logoSmall = LOGO_SMALL_DARK;\r\n          break;\r\n      }\r\n    }, { injector: this.injector, allowSignalWrites: true });\r\n  }\r\n\r\n}\r\n",
      "styleUrl": "./logo.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "injector",
            "type": "Injector",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_themesService",
            "type": "ThemesService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 36,
        "jsdoctags": [
          {
            "name": "injector",
            "type": "Injector",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_themesService",
            "type": "ThemesService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "templateData": "<div class=\"logo\">\r\n  @switch (size) {\r\n    @case (\"m\") {\r\n      <img [src]=\"logo\" alt=\"logo\" />\r\n    }\r\n    @default {\r\n      <img [src]=\"logoSmall\" alt=\"logo\" />\r\n    }\r\n  }\r\n</div>\r\n"
    },
    {
      "name": "MenuContextComponent",
      "id": "component-MenuContextComponent-eaf1981e809313cbcc9e2c6b1cf0f304361f3dcc352fda0d500425ef39c49c462428366711e0ee4aadc1e8c4e9402370663f1a630ce5b1e760c051e9464b5692",
      "file": "src/app/shared/components/menu-context/menu-context.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-menu-context",
      "styleUrls": ["./menu-context.component.scss"],
      "styles": [],
      "templateUrl": ["./menu-context.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "color",
          "defaultValue": "'primary'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput que recibe el color del icono del menú, por defecto es 'primary'\n",
          "description": "<p>Input que recibe el color del icono del menú, por defecto es &#39;primary&#39;</p>\n",
          "line": 31,
          "type": "ButtonColor",
          "decorators": []
        },
        {
          "name": "icon",
          "defaultValue": "'ri-more-2-fill'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput que recibe el icono del menú, por defecto es 'ri-more-2-fill'\n",
          "description": "<p>Input que recibe el icono del menú, por defecto es &#39;ri-more-2-fill&#39;</p>\n",
          "line": 26,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "defaultValue": "'xm'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput que recibe el tamaño del icono del menú, por defecto es 'xm'\n",
          "description": "<p>Input que recibe el tamaño del icono del menú, por defecto es &#39;xm&#39;</p>\n",
          "line": 36,
          "type": "ButtonSize",
          "decorators": []
        },
        {
          "name": "title",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput que recibe el título del menú\n",
          "description": "<p>Input que recibe el título del menú</p>\n",
          "line": 46,
          "type": "string",
          "decorators": []
        },
        {
          "name": "transparent",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput que recibe el color del icono del menú, por defecto es 'primary'\n",
          "description": "<p>Input que recibe el color del icono del menú, por defecto es &#39;primary&#39;</p>\n",
          "line": 41,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "isMenuContextOpened",
          "defaultValue": "signal(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<boolean>",
          "optional": false,
          "description": "",
          "line": 48
        },
        {
          "name": "scrollStrategy",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ScrollStrategy",
          "optional": false,
          "description": "",
          "line": 49
        }
      ],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 60,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para cerrar el menú contextual\n",
          "description": "<p>Función para cerrar el menú contextual</p>\n"
        },
        {
          "name": "toggleMenuContext",
          "args": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 68,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para abrir o cerrar el menú contextual\n",
          "description": "<p>Función para abrir o cerrar el menú contextual</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 1915,
                "end": 1920,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "event"
              },
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1901,
                "end": 1906,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1907,
                "end": 1914,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 1908,
                  "end": 1913,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 1908,
                    "end": 1913,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "Event"
                  }
                }
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "<p>neo-menu-context\nComponente para crear un menú contextual junto con el componente <code>neo-item-menu-context</code>.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;neo-menu-context [icon]=&quot;&#39;ri-more-2-fill&#39;&quot; [size]=&quot;&#39;xm&#39;&quot; [title]=&quot;&#39;Título&#39;&quot;&gt;\n   &lt;neo-item-menu-context [title]=&#39;Título diferente al contenido&#39;&gt;Test 1&lt;/neo-item-menu-context&gt;\n   &lt;neo-item-menu-context&gt;Test 2&lt;/neo-item-menu-context&gt;\n&lt;/neo-menu-context&gt;</code></pre></div>",
      "rawdescription": "\n\nneo-menu-context\nComponente para crear un menú contextual junto con el componente `neo-item-menu-context`.\n```html\n<neo-menu-context [icon]=\"'ri-more-2-fill'\" [size]=\"'xm'\" [title]=\"'Título'\">\n   <neo-item-menu-context [title]='Título diferente al contenido'>Test 1</neo-item-menu-context>\n   <neo-item-menu-context>Test 2</neo-item-menu-context>\n</neo-menu-context>\n```",
      "type": "component",
      "sourceCode": "import { ScrollStrategy, ScrollStrategyOptions } from '@angular/cdk/overlay';\r\nimport { Component, Input, WritableSignal, signal } from '@angular/core';\r\nimport { ButtonColor, ButtonSize } from '../button/models/button.entity';\r\n\r\n/**\r\n * @name\r\n * neo-menu-context\r\n * @description\r\n * Componente para crear un menú contextual junto con el componente `neo-item-menu-context`.\r\n * @example\r\n * <neo-menu-context [icon]=\"'ri-more-2-fill'\" [size]=\"'xm'\" [title]=\"'Título'\">\r\n *    <neo-item-menu-context [title]='Título diferente al contenido'>Test 1</neo-item-menu-context>\r\n *    <neo-item-menu-context>Test 2</neo-item-menu-context>\r\n * </neo-menu-context>\r\n */\r\n@Component({\r\n  selector: 'neo-menu-context',\r\n  templateUrl: './menu-context.component.html',\r\n  styleUrls: ['./menu-context.component.scss'],\r\n})\r\nexport class MenuContextComponent {\r\n\r\n  /**\r\n   * Input que recibe el icono del menú, por defecto es 'ri-more-2-fill'\r\n   */\r\n  @Input() icon: string = 'ri-more-2-fill';\r\n\r\n  /**\r\n   * Input que recibe el color del icono del menú, por defecto es 'primary'\r\n   */\r\n  @Input() color: ButtonColor = 'primary';\r\n\r\n  /**\r\n   * Input que recibe el tamaño del icono del menú, por defecto es 'xm'\r\n   */\r\n  @Input() size: ButtonSize = 'xm';\r\n\r\n  /**\r\n   * Input que recibe el color del icono del menú, por defecto es 'primary'\r\n   */\r\n  @Input() transparent: boolean = true;\r\n\r\n  /**\r\n   * Input que recibe el título del menú\r\n   */\r\n  @Input() title: string = '';\r\n\r\n  isMenuContextOpened: WritableSignal<boolean> = signal(false);\r\n  scrollStrategy: ScrollStrategy;\r\n\r\n  constructor(\r\n    scrollStrategyOptions: ScrollStrategyOptions\r\n  ) {\r\n    this.scrollStrategy = scrollStrategyOptions.close();\r\n  }\r\n\r\n  /**\r\n   * Función para cerrar el menú contextual\r\n   */\r\n  close() {\r\n    this.isMenuContextOpened.set(false);\r\n  }\r\n\r\n  /**\r\n   * Función para abrir o cerrar el menú contextual\r\n   * @param {Event} event\r\n   */\r\n  toggleMenuContext(event: Event) {\r\n    event?.preventDefault();\r\n    event?.stopPropagation();\r\n    this.isMenuContextOpened.set(!this.isMenuContextOpened());\r\n  }\r\n\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import 'base';\r\n\r\n:host {\r\n  display: flex;\r\n}\r\n\r\n.menu-context {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n  padding: 5px;\r\n  min-width: 100px;\r\n  background-color: var(--background-color);\r\n  border: 1px solid var(--border-color);\r\n  color: var(--text-color);\r\n  box-shadow: var(--shadow-box) !important;\r\n\r\n  &__btn {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n  }\r\n}\r\n",
          "styleUrl": "./menu-context.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "scrollStrategyOptions",
            "type": "ScrollStrategyOptions",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 49,
        "jsdoctags": [
          {
            "name": "scrollStrategyOptions",
            "type": "ScrollStrategyOptions",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "templateData": "<neo-button\r\n  mode=\"icon\"\r\n  [color]=\"color\"\r\n  [size]=\"size\"\r\n  [transparent]=\"transparent\"\r\n  (click)=\"toggleMenuContext($event)\"\r\n  [title]=\"title\"\r\n  cdkOverlayOrigin\r\n  #menuContext=\"cdkOverlayOrigin\"\r\n>\r\n  <i [class]=\"icon\"></i>\r\n</neo-button>\r\n\r\n<ng-template\r\n  cdkConnectedOverlay\r\n  [cdkConnectedOverlayOrigin]=\"menuContext\"\r\n  [cdkConnectedOverlayOpen]=\"isMenuContextOpened()\"\r\n  [cdkConnectedOverlayScrollStrategy]=\"scrollStrategy\"\r\n  cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\r\n  [cdkConnectedOverlayHasBackdrop]=\"true\"\r\n  (detach)=\"close()\"\r\n  (backdropClick)=\"close()\"\r\n>\r\n  <div\r\n    class=\"menu-context\"\r\n    (clickOutside)=\"close()\"\r\n    (escapeKey)=\"close()\"\r\n    cdkTrapFocus\r\n    [cdkTrapFocusAutoCapture]=\"true\"\r\n  >\r\n    <ng-content></ng-content>\r\n  </div>\r\n</ng-template>\r\n"
    },
    {
      "name": "ModalDialogComponent",
      "id": "component-ModalDialogComponent-ecdd96a63df8e78df7d62b130ab681b744ac2172f89a88f21609e10150b5ed25456fc1890e191fa56ebf700005b50152bb275404eb07c6731275f7bf069585bc",
      "file": "src/app/shared/components/modal/modal-dialog.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-modal-dialog",
      "styleUrls": ["./modal-dialog.component.scss"],
      "styles": [],
      "templateUrl": ["./modal-dialog.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "data",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ModalOptionsEntity",
          "optional": false,
          "description": "",
          "line": 44,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "MAT_DIALOG_DATA"
            }
          ],
          "modifierKind": [170, 125]
        }
      ],
      "methodsClass": [
        {
          "name": "cancel",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 64,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para cerrar el modal al pulsar el botón de cancelar que emite un evento con el valor `false`\n",
          "description": "<p>Función para cerrar el modal al pulsar el botón de cancelar que emite un evento con el valor <code>false</code></p>\n",
          "modifierKind": [125]
        },
        {
          "name": "close",
          "args": [
            {
              "name": "value",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 72,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para cerrar el modal al pulsar el botón de cerrar que emitirá true o false dependiendo del valor que se le pase\n",
          "description": "<p>Función para cerrar el modal al pulsar el botón de cerrar que emitirá true o false dependiendo del valor que se le pase</p>\n",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": {
                "pos": 2405,
                "end": 2410,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "value"
              },
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2399,
                "end": 2404,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "confirm",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 79,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para confirmar el modal al pulsar el botón de confirmar que emite un evento con el valor `true`\n",
          "description": "<p>Función para confirmar el modal al pulsar el botón de confirmar que emite un evento con el valor <code>true</code></p>\n",
          "modifierKind": [125]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 56,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onEsc",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 52,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para cerrar el modal al pulsar la tecla `ESC`\n",
          "description": "<p>Función para cerrar el modal al pulsar la tecla <code>ESC</code></p>\n",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'keydown.esc'"
            }
          ],
          "modifierKind": [170, 125]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "keydown.esc",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para cerrar el modal al pulsar la tecla `ESC`\n",
          "description": "<p>Función para cerrar el modal al pulsar la tecla <code>ESC</code></p>\n",
          "line": 52
        }
      ],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "ButtonComponent",
          "type": "component"
        },
        {
          "name": "SectionTitleComponent",
          "type": "component"
        },
        {
          "name": "TranslateModule",
          "type": "module"
        },
        {
          "name": "SafeHtmlPipe",
          "type": "pipe"
        },
        {
          "name": "MatDialogModule",
          "type": "module"
        },
        {
          "name": "MatDialogTitle"
        },
        {
          "name": "MatDialogContent"
        },
        {
          "name": "MatDialogActions"
        },
        {
          "name": "MatDialogClose"
        }
      ],
      "description": "<p>neo-modal-dialog\nComponente para crear un modal de texto mediante el servicio <code>modal-dialog.service</code>.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">const options: ModalOptionsEntity = {\n    title: &#39;Título del modal&#39;,\n    message: &#39;Cuerpo del modal&#39;,\n    cancelText: &#39;Cancelar&#39;,\n    confirmText: &#39;Aceptar&#39;,\n    canBeClosed: true\n};</code></pre></div><p>this._modalDialogService.open(options);</p>\n<p>this._modalDialogService.afterClosed()\n    .subscribe((confirmed) =&gt; {\n        if (confirmed)\n          alert(&#39;Modal aceptado&#39;);\n        else\n          alert(&#39;Modal cancelado&#39;);\n    });</p>\n",
      "rawdescription": "\n\nneo-modal-dialog\nComponente para crear un modal de texto mediante el servicio `modal-dialog.service`.\n```html\nconst options: ModalOptionsEntity = {\n    title: 'Título del modal',\n    message: 'Cuerpo del modal',\n    cancelText: 'Cancelar',\n    confirmText: 'Aceptar',\n    canBeClosed: true\n};\n```\nthis._modalDialogService.open(options);\n\nthis._modalDialogService.afterClosed()\n    .subscribe((confirmed) => {\n        if (confirmed)\n          alert('Modal aceptado');\n        else\n          alert('Modal cancelado');\n\t});\n",
      "type": "component",
      "sourceCode": "import { Component, HostListener, Inject, OnInit } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogActions, MatDialogClose, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle } from '@angular/material/dialog';\r\nimport { ModalOptionsEntity } from './models/modal.entity';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ButtonComponent } from '../button/button.component';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { SafeHtmlPipe } from '@shared/pipes/safeHtml/safe-html.pipe';\r\nimport { SectionTitleComponent } from '../section-title/section-title.component';\r\n\r\n/**\r\n * @name\r\n * neo-modal-dialog\r\n * @description\r\n * Componente para crear un modal de texto mediante el servicio `modal-dialog.service`.\r\n * @example\r\n * const options: ModalOptionsEntity = {\r\n *     title: 'Título del modal',\r\n *     message: 'Cuerpo del modal',\r\n *     cancelText: 'Cancelar',\r\n *     confirmText: 'Aceptar',\r\n *     canBeClosed: true\r\n * };\r\n *\r\n * this._modalDialogService.open(options);\r\n *\r\n * this._modalDialogService.afterClosed()\r\n *     .subscribe((confirmed) => {\r\n *         if (confirmed)\r\n *           alert('Modal aceptado');\r\n *         else\r\n *           alert('Modal cancelado');\r\n * \t});\r\n */\r\n@Component({\r\n  selector: 'neo-modal-dialog',\r\n  templateUrl: './modal-dialog.component.html',\r\n  styleUrls: ['./modal-dialog.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule, ButtonComponent, SectionTitleComponent, TranslateModule, SafeHtmlPipe, MatDialogModule, MatDialogTitle, MatDialogContent, MatDialogActions, MatDialogClose]\r\n})\r\nexport class ModalDialogComponent implements OnInit {\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: ModalOptionsEntity,\r\n    private readonly matDilogRef: MatDialogRef<ModalDialogComponent>\r\n  ) { }\r\n\r\n  /**\r\n   * Función para cerrar el modal al pulsar la tecla `ESC`\r\n   */\r\n  @HostListener('keydown.esc')\r\n  public onEsc() {\r\n    this.close(false);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (!this.data.canBeClosed)\r\n      this.matDilogRef.disableClose = true;\r\n  }\r\n\r\n  /**\r\n   * Función para cerrar el modal al pulsar el botón de cancelar que emite un evento con el valor `false`\r\n   */\r\n  public cancel() {\r\n    this.close(false);\r\n  }\r\n\r\n  /**\r\n   * Función para cerrar el modal al pulsar el botón de cerrar que emitirá true o false dependiendo del valor que se le pase\r\n   * @param value\r\n   */\r\n  public close(value: boolean) {\r\n    this.matDilogRef.close(value);\r\n  }\r\n\r\n  /**\r\n   * Función para confirmar el modal al pulsar el botón de confirmar que emite un evento con el valor `true`\r\n   */\r\n  public confirm() {\r\n    this.close(true);\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./modal-dialog.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "data",
            "type": "ModalOptionsEntity",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "matDilogRef",
            "type": "MatDialogRef<ModalDialogComponent>",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 41,
        "jsdoctags": [
          {
            "name": "data",
            "type": "ModalOptionsEntity",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "matDilogRef",
            "type": "MatDialogRef<ModalDialogComponent>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "implements": ["OnInit"],
      "templateData": "<div class=\"modal-box\">\r\n  <div mat-dialog-title class=\"modal-box__title\">\r\n    @if (data.title) {\r\n      <neo-section-title [icon]=\"data.iconTitle || ''\" [title]=\"data.title\">\r\n      </neo-section-title>\r\n    }\r\n    @if (data.canBeClosed) {\r\n      <button\r\n        class=\"modal-box__close\"\r\n        [title]=\"'APP.CLOSE' | translate\"\r\n        [attr.aria-label]=\"'APP.CLOSE' | translate\"\r\n        (click)=\"cancel()\"\r\n        clickable\r\n        autofocus\r\n      >\r\n        <i class=\"ri-close-fill\"></i>\r\n      </button>\r\n    }\r\n  </div>\r\n  @if (data.message) {\r\n    <div\r\n      mat-dialog-content\r\n      class=\"modal-box__body\"\r\n      [innerHTML]=\"data.message | safeHtml\"\r\n    ></div>\r\n  }\r\n  @if (data.cancelText || data.confirmText) {\r\n    <div mat-dialog-actions class=\"modal-box__footer\">\r\n      @if (data.confirmText) {\r\n        <neo-button (click)=\"confirm()\" size=\"xm\" color=\"primary\">{{\r\n          data.confirmText\r\n        }}</neo-button>\r\n      }\r\n      @if (data.cancelText) {\r\n        <neo-button\r\n          cdkFocusInitial\r\n          color=\"secondary\"\r\n          (click)=\"cancel()\"\r\n          size=\"xm\"\r\n          >{{ data.cancelText }}</neo-button\r\n        >\r\n      }\r\n    </div>\r\n  }\r\n</div>\r\n"
    },
    {
      "name": "ModalSpinnerComponent",
      "id": "component-ModalSpinnerComponent-1e9731be2950ecd78d46d170a4b5bdd657aadacbb2a8023d257dbf692813a937d54ce3211b299218f9c4a59372158c42564f13bfcff3d6b81481c2568640179f",
      "file": "src/app/shared/components/modal-spinner/modal-spinner.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-modal-spinner",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./modal-spinner.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "data",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ModalSpinnerEntity",
          "optional": false,
          "description": "",
          "line": 20,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "MAT_DIALOG_DATA"
            }
          ],
          "modifierKind": [170, 125]
        }
      ],
      "methodsClass": [
        {
          "name": "close",
          "args": [
            {
              "name": "status",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "true"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 28,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para cerrar el modal\n",
          "description": "<p>Función para cerrar el modal</p>\n",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": {
                "pos": 1222,
                "end": 1228,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "status"
              },
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "true",
              "tagName": {
                "pos": 1206,
                "end": 1211,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1212,
                "end": 1221,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 1213,
                  "end": 1220,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 136
                }
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "ButtonComponent",
          "type": "component"
        },
        {
          "name": "SpinnerComponent",
          "type": "component"
        },
        {
          "name": "SectionTitleComponent",
          "type": "component"
        },
        {
          "name": "TranslateModule",
          "type": "module"
        },
        {
          "name": "MatDialogModule",
          "type": "module"
        },
        {
          "name": "MatDialogTitle"
        },
        {
          "name": "MatDialogContent"
        },
        {
          "name": "MatDialogActions"
        },
        {
          "name": "MatDialogClose"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Inject } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { ButtonComponent } from '../button/button.component';\r\nimport { SpinnerComponent } from '../spinner/spinner.component';\r\nimport { MAT_DIALOG_DATA, MatDialogActions, MatDialogClose, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle } from '@angular/material/dialog';\r\nimport { SectionTitleComponent } from '../section-title/section-title.component';\r\nimport { ModalSpinnerEntity } from './models/modal-spinner.entity';\r\n\r\n@Component({\r\n  selector: 'neo-modal-spinner',\r\n  standalone: true,\r\n  imports: [CommonModule, ButtonComponent, SpinnerComponent, SectionTitleComponent, TranslateModule, MatDialogModule, MatDialogTitle, MatDialogContent, MatDialogActions, MatDialogClose],\r\n  templateUrl: './modal-spinner.component.html',\r\n  styleUrl: './modal-spinner.component.scss'\r\n})\r\nexport class ModalSpinnerComponent {\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: ModalSpinnerEntity,\r\n    private readonly matDilogRef: MatDialogRef<ModalSpinnerComponent>,\r\n  ) {}\r\n\r\n  /**\r\n   * Función para cerrar el modal\r\n   * @param {boolean} status\r\n   */\r\n  public close(status: boolean = true) {\r\n    this.matDilogRef.close(status);\r\n  }\r\n\r\n}\r\n",
      "styleUrl": "./modal-spinner.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "data",
            "type": "ModalSpinnerEntity",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "matDilogRef",
            "type": "MatDialogRef<ModalSpinnerComponent>",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 17,
        "jsdoctags": [
          {
            "name": "data",
            "type": "ModalSpinnerEntity",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "matDilogRef",
            "type": "MatDialogRef<ModalSpinnerComponent>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "templateData": "<div class=\"modal-box modal-spinner\">\r\n  <div mat-dialog-title class=\"modal-box__title\">\r\n    @if (data.title) {\r\n      <neo-section-title [icon]=\"data.iconTitle || 'ri-loop-left-line'\" [title]=\"data.title\">\r\n      </neo-section-title>\r\n    }\r\n    @if (data.canBeClosed) {\r\n      <button\r\n        class=\"modal-box__close\"\r\n        [title]=\"'APP.CLOSE' | translate\"\r\n        [attr.aria-label]=\"'APP.CLOSE' | translate\"\r\n        (click)=\"close()\"\r\n        clickable\r\n        autofocus\r\n      >\r\n        <i class=\"ri-close-fill\"></i>\r\n      </button>\r\n    }\r\n  </div>\r\n  <div mat-dialog-content class=\"modal-box__body modal-spinner__body\">\r\n    <neo-spinner\r\n      size=\"xm\"\r\n      [label]=\"data.label || data.title || ''\"\r\n    ></neo-spinner>\r\n  </div>\r\n  @if (data.canBeClosed) {\r\n    <div mat-dialog-actions class=\"modal-box__footer\">\r\n      <neo-button\r\n        cdkFocusInitial\r\n        color=\"secondary\"\r\n        (click)=\"close()\"\r\n        size=\"xm\"\r\n        >{{ \"APP.CANCEL\" | translate }}</neo-button\r\n      >\r\n    </div>\r\n  }\r\n</div>\r\n"
    },
    {
      "name": "OptionsComponent",
      "id": "component-OptionsComponent-546bd4963c04af04cac171cb9a5357efbc4b94eceefc9756cfb739013f680bfef3a6b156049289f52755d5be5c588997b69e37c3e16bde21e57ccc05da8d3101",
      "file": "src/app/shared/components/form-fields/select/options/options.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-option",
      "styleUrls": ["./options.component.scss"],
      "styles": [],
      "templateUrl": ["./options.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "selected",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "any",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "any",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "content",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 18,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'content'"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "label",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 22
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 24,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "<p>neo-option\nComponente para crear una opción en el componente <code>neo-select</code>.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;neo-option [value]=&quot;1&quot; [selected]=&quot;true&quot; [disabled]=&quot;false&quot;&gt;Opción 1&lt;/neo-option&gt;</code></pre></div>",
      "rawdescription": "\n\nneo-option\nComponente para crear una opción en el componente `neo-select`.\n```html\n<neo-option [value]=\"1\" [selected]=\"true\" [disabled]=\"false\">Opción 1</neo-option>\n```",
      "type": "component",
      "sourceCode": "import { Component, ElementRef, Input, ViewChild } from '@angular/core';\r\n\r\n/**\r\n * @name\r\n * neo-option\r\n * @description\r\n * Componente para crear una opción en el componente `neo-select`.\r\n * @example\r\n * <neo-option [value]=\"1\" [selected]=\"true\" [disabled]=\"false\">Opción 1</neo-option>\r\n */\r\n@Component({\r\n  selector: 'neo-option',\r\n  templateUrl: './options.component.html',\r\n  styleUrls: ['./options.component.scss']\r\n})\r\nexport class OptionsComponent {\r\n\r\n  @ViewChild('content') content!: ElementRef;\r\n  @Input() value!: any;\r\n  @Input() selected?: any = false;\r\n  @Input() disabled?: boolean = false;\r\n  label?: string = '';\r\n\r\n  ngAfterContentInit(): void {\r\n    // Obtenemos el contenido de la etiqueta <neo-option> para asignarlo a la propiedad label\r\n    setTimeout(() => this.label = this.content.nativeElement.innerHTML, 0);\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./options.component.scss"
        }
      ],
      "stylesData": "",
      "extends": [],
      "templateData": "<div #content>\r\n    <ng-content></ng-content>\r\n</div>"
    },
    {
      "name": "PaginatorComponent",
      "id": "component-PaginatorComponent-15758111f65bccf0a6593f1face00f1e94fa9668c5f554979ef2b5dc1745358d47fb44a114b796a48c398053112872ed901718cd996fe2f6162a24fda60001f4",
      "file": "src/app/shared/components/paginator/paginator.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-paginator",
      "styleUrls": ["./paginator.component.scss"],
      "styles": [],
      "templateUrl": ["./paginator.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "pageSize",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "number",
          "decorators": []
        },
        {
          "name": "position",
          "defaultValue": "'right'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "PaginatorPosition",
          "decorators": []
        },
        {
          "name": "range",
          "defaultValue": "2",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "number",
          "decorators": []
        },
        {
          "name": "showLastFirstBtns",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "showTotal",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "total",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "number",
          "decorators": []
        },
        {
          "name": "type",
          "defaultValue": "\"rangenumber\"",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "PaginationType",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "pageChange",
          "defaultValue": "new EventEmitter<any>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "currentPage",
          "defaultValue": "signal(1)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<number>",
          "optional": false,
          "description": "",
          "line": 33
        },
        {
          "name": "currentsResults",
          "defaultValue": "signal(0)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<number>",
          "optional": false,
          "description": "",
          "line": 34
        },
        {
          "name": "pages",
          "defaultValue": "signal([])",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<number[]>",
          "optional": false,
          "description": "",
          "line": 37
        },
        {
          "name": "totalPages",
          "defaultValue": "signal(0)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<number>",
          "optional": false,
          "description": "",
          "line": 35
        },
        {
          "name": "totalResults",
          "defaultValue": "signal(0)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<number>",
          "optional": false,
          "description": "",
          "line": 36
        }
      ],
      "methodsClass": [
        {
          "name": "getLastPage",
          "args": [],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 60,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nObtiene la última página del paginador\n",
          "description": "<p>Obtiene la última página del paginador</p>\n",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "tagName": {
                "pos": 2004,
                "end": 2011,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "returns"
              },
              "comment": "",
              "returnType": "number"
            }
          ]
        },
        {
          "name": "getTotalPageResults",
          "args": [],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 136,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para obtener el total de resultados de la página actual\n",
          "description": "<p>Función para obtener el total de resultados de la página actual</p>\n",
          "jsdoctags": [
            {
              "tagName": {
                "pos": 4317,
                "end": 4324,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "returns"
              },
              "comment": "",
              "returnType": "number"
            }
          ]
        },
        {
          "name": "getTotalPages",
          "args": [
            {
              "name": "total",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "pageSize",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 52,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nObtiene el número de páginas totales en función del total de elementos y el número de elementos por página\n",
          "description": "<p>Obtiene el número de páginas totales en función del total de elementos y el número de elementos por página</p>\n",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": {
                "pos": 1736,
                "end": 1741,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "total"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1721,
                "end": 1726,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1727,
                "end": 1735,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 1728,
                  "end": 1734,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 150
                }
              }
            },
            {
              "name": {
                "pos": 1764,
                "end": 1772,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "pageSize"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1749,
                "end": 1754,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1755,
                "end": 1763,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 1756,
                  "end": 1762,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 150
                }
              }
            },
            {
              "tagName": {
                "pos": 1780,
                "end": 1787,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "returns"
              },
              "comment": "",
              "returnType": "number"
            }
          ]
        },
        {
          "name": "isValidPage",
          "args": [
            {
              "name": "page",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "totalPages",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 113,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nComprobamos si la página actual es válida o debe estar deshabilitada\n",
          "description": "<p>Comprobamos si la página actual es válida o debe estar deshabilitada</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 3607,
                "end": 3611,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "page"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3592,
                "end": 3597,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 3598,
                "end": 3606,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 3599,
                  "end": 3605,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 150
                }
              }
            },
            {
              "name": {
                "pos": 3634,
                "end": 3644,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "totalPages"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3619,
                "end": 3624,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 3625,
                "end": 3633,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 3626,
                  "end": 3632,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 150
                }
              }
            },
            {
              "tagName": {
                "pos": 3652,
                "end": 3659,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "returns"
              },
              "comment": "",
              "returnType": "number"
            }
          ]
        },
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 41,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "pagesArray",
          "args": [
            {
              "name": "pageCount",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "number[]",
          "typeParameters": [],
          "line": 86,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFormamos un array con el número de páginas para poder usarlas en la vista\n",
          "description": "<p>Formamos un array con el número de páginas para poder usarlas en la vista</p>\n",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": {
                "pos": 2865,
                "end": 2874,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "pageCount"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2850,
                "end": 2855,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 2856,
                "end": 2864,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 2857,
                  "end": 2863,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 150
                }
              }
            },
            {
              "tagName": {
                "pos": 2882,
                "end": 2889,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "returns"
              },
              "comment": "",
              "returnType": "number"
            }
          ]
        },
        {
          "name": "pageSelected",
          "args": [
            {
              "name": "page",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 122,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción lanzada al seleccionar una página\n",
          "description": "<p>Función lanzada al seleccionar una página</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 3864,
                "end": 3868,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "page"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3849,
                "end": 3854,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 3855,
                "end": 3863,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 3856,
                  "end": 3862,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 150
                }
              }
            },
            {
              "name": {
                "pos": 3890,
                "end": 3895,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "event"
              },
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "pos": 3876,
                "end": 3881,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 3882,
                "end": 3889,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 3883,
                  "end": 3888,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 3883,
                    "end": 3888,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "Event"
                  }
                }
              }
            }
          ]
        },
        {
          "name": "setCurrentPage",
          "args": [
            {
              "name": "page",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 68,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nEstablece la página actual. Útil para búsquedas locales, puesto que éstas vuelven a la página 1 y el buscador no lo sabe si no se le comunica\n",
          "description": "<p>Establece la página actual. Útil para búsquedas locales, puesto que éstas vuelven a la página 1 y el buscador no lo sabe si no se le comunica</p>\n",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": {
                "pos": 2277,
                "end": 2281,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "page"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2262,
                "end": 2267,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 2268,
                "end": 2276,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 2269,
                  "end": 2275,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 150
                }
              }
            }
          ]
        },
        {
          "name": "setPagination",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 75,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nEstablece el número de páginas a mostrar y actualiza el paginador, estableciendo la página actual a la primera\n",
          "description": "<p>Establece el número de páginas a mostrar y actualiza el paginador, estableciendo la página actual a la primera</p>\n",
          "modifierKind": [123]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "TranslateModule",
          "type": "module"
        },
        {
          "name": "ClickableDirective",
          "type": "directive"
        }
      ],
      "description": "<p>neo-paginator\nComponente para crear un paginador</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;neo-paginator [pageSize]=&quot;10&quot; [total]=&quot;100&quot; (pageChange)=&quot;pageChange($event)&quot;&gt;&lt;/neo-paginator&gt;</code></pre></div>",
      "rawdescription": "\n\nneo-paginator\nComponente para crear un paginador\n```html\n<neo-paginator [pageSize]=\"10\" [total]=\"100\" (pageChange)=\"pageChange($event)\"></neo-paginator>\n```",
      "type": "component",
      "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, EventEmitter, Input, Output, WritableSignal, signal } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { ClickableDirective } from '@shared/directives/clickable.directive';\r\nimport { PaginationType, PaginatorPosition } from './models/paginator.entity';\r\n\r\n/**\r\n * @name\r\n * neo-paginator\r\n * @description\r\n * Componente para crear un paginador\r\n * @example\r\n * <neo-paginator [pageSize]=\"10\" [total]=\"100\" (pageChange)=\"pageChange($event)\"></neo-paginator>\r\n */\r\n@Component({\r\n  selector: 'neo-paginator',\r\n  templateUrl: './paginator.component.html',\r\n  standalone: true,\r\n  imports: [CommonModule, TranslateModule, ClickableDirective],\r\n  styleUrls: ['./paginator.component.scss']\r\n})\r\nexport class PaginatorComponent {\r\n\r\n  @Input() pageSize: number = 0;\r\n  @Input() total: number = 0;\r\n  @Input() range: number = 2;\r\n  @Input() position: PaginatorPosition = 'right';\r\n  @Input() type: PaginationType = \"rangenumber\";\r\n  @Input() showLastFirstBtns: boolean = true;\r\n  @Input() showTotal: boolean = false;\r\n  @Output() pageChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  currentPage: WritableSignal<number> = signal(1);\r\n  currentsResults: WritableSignal<number> = signal(0);\r\n  totalPages: WritableSignal<number> = signal(0);\r\n  totalResults: WritableSignal<number> = signal(0);\r\n  pages: WritableSignal<number[]> = signal([]);\r\n\r\n  constructor() { }\r\n\r\n  ngAfterContentInit(): void {\r\n    this.setPagination();\r\n    this.totalResults.set(this.getTotalPageResults());\r\n  }\r\n\r\n  /**\r\n   * Obtiene el número de páginas totales en función del total de elementos y el número de elementos por página\r\n   * @param {number} total\r\n   * @param {number} pageSize\r\n   * @returns {number}\r\n   */\r\n  public getTotalPages(total: number, pageSize: number): number {\r\n    return Math.ceil(Math.max(total, 1) / Math.max(pageSize, 1));\r\n  }\r\n\r\n  /**\r\n   * Obtiene la última página del paginador\r\n   * @returns {number}\r\n   */\r\n  public getLastPage(): number {\r\n    return this.totalPages();\r\n  }\r\n\r\n  /**\r\n   * Establece la página actual. Útil para búsquedas locales, puesto que éstas vuelven a la página 1 y el buscador no lo sabe si no se le comunica\r\n   * @param {number} page\r\n   */\r\n  public setCurrentPage(page: number) {\r\n    this.currentPage.set(page);\r\n  }\r\n\r\n  /**\r\n   * Establece el número de páginas a mostrar y actualiza el paginador, estableciendo la página actual a la primera\r\n   */\r\n  private setPagination() {\r\n    this.totalPages.set(this.getTotalPages(this.total, this.pageSize));\r\n    this.pages.set(this.pagesArray(this.totalPages()));\r\n    if (this.currentPage() > this.pages().length) this.pageSelected(this.pages.length);\r\n  }\r\n\r\n  /**\r\n   * Formamos un array con el número de páginas para poder usarlas en la vista\r\n   * @param {number} pageCount\r\n   * @returns {number}\r\n   */\r\n  private pagesArray(pageCount: number): number[] {\r\n    const pageArray = [];\r\n\r\n    let initPages = 1;\r\n    let finishPages = this.totalPages();\r\n\r\n    if (this.type === \"rangenumber\") {\r\n      initPages = this.currentPage() - this.range || 1;\r\n      finishPages = (this.currentPage() + this.range) - 1 || this.totalPages();\r\n    }\r\n\r\n    if (pageCount > 0) {\r\n      for (let page = initPages; page <= finishPages + 1; page++) {\r\n        if (this.isValidPage(page, this.getTotalPages(this.total, this.pageSize)))\r\n          pageArray.push(page);\r\n      }\r\n    }\r\n\r\n    return pageArray;\r\n  }\r\n\r\n  /**\r\n   * Comprobamos si la página actual es válida o debe estar deshabilitada\r\n   * @param {number} page\r\n   * @param {number} totalPages\r\n   * @returns {number}\r\n   */\r\n  isValidPage(page: number, totalPages: number): boolean {\r\n    return page > 0 && page <= totalPages;\r\n  }\r\n\r\n  /**\r\n   * Función lanzada al seleccionar una página\r\n   * @param {number} page\r\n   * @param {Event} event\r\n   */\r\n  pageSelected(page: number, event?: Event) {\r\n    event?.preventDefault();\r\n    if (this.isValidPage(page, this.totalPages())) {\r\n      this.currentPage.set(page);\r\n      this.pages.set(this.pagesArray(this.totalPages()));\r\n      this.pageChange.emit(page);\r\n    }\r\n    this.totalResults.set(this.getTotalPageResults());\r\n  }\r\n\r\n  /**\r\n   * Función para obtener el total de resultados de la página actual\r\n   * @returns {number}\r\n   */\r\n  getTotalPageResults(): number {\r\n    return (this.pageSize * this.currentPage() > this.total ? this.total : this.pageSize * this.currentPage()) || 0;\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import 'base';\r\n\r\n.paginator {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  -webkit-user-select: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n  font-size: 0.85rem;\r\n  line-height: 0.85rem;\r\n\r\n  &--dir_right {\r\n    flex-direction: row-reverse;\r\n  }\r\n\r\n  &__pagination {\r\n    padding: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    list-style: none;\r\n    border-radius: 5px;\r\n    text-decoration: none;\r\n    margin-bottom: 0;\r\n    margin-top: 0;\r\n    gap: 5px;\r\n\r\n    &__page {\r\n\r\n      border: 0.5px solid var(--border-pagination-page-color) !important;\r\n      border-radius: 2px;\r\n\r\n      &--link,\r\n      &--range {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        justify-content: center;\r\n        text-align: center;\r\n        width: 25px;\r\n        height: 25px;\r\n        padding: 5px;\r\n        cursor: pointer;\r\n        color: var(--text-color) !important;\r\n\r\n        i::before {\r\n          color: var(--text-color) !important;\r\n        }\r\n      }\r\n\r\n      &--range {\r\n        cursor: default;\r\n      }\r\n\r\n      &.disabled {\r\n        opacity: 0.5;\r\n\r\n        .paginator__pagination__page--link {\r\n          pointer-events: none;\r\n          cursor: auto;\r\n        }\r\n      }\r\n\r\n      &:hover,\r\n      &.active {\r\n        border: 0.5px solid var(--bg-pagination-active-color) !important;\r\n        background-color: var(--bg-pagination-active-color) !important;\r\n        border-radius: 2px;\r\n\r\n        .paginator__pagination__page--link {\r\n          color: var(--text-pagination-active-color) !important;\r\n        }\r\n      }\r\n\r\n      &:has(.paginator__pagination__page--range) {\r\n        &:hover {\r\n          background-color: transparent !important;\r\n          border: 0.5px solid var(--border-pagination-page-color) !important;\r\n        }\r\n      }\r\n    }\r\n\r\n    &__dividenumber {\r\n      display: flex;\r\n      align-items: center;\r\n      min-width: 45px;\r\n      justify-content: center;\r\n      flex-wrap: nowrap;\r\n      flex-direction: row;\r\n      gap: 5px;\r\n      color: var(--text-color) !important;\r\n\r\n      &--current,\r\n      &--total {\r\n        color: var(--text-color) !important;\r\n      }\r\n    }\r\n  }\r\n\r\n  &__total_results {\r\n    min-width: 65px;\r\n    height: 25px;\r\n    display: flex;\r\n    align-items: center;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n    gap: 10px;\r\n    padding: 5px 10px;\r\n    color: var(--text-color) !important;\r\n    border: 0.5px solid var(--border-pagination-page-color) !important;\r\n    border-radius: 2px;\r\n  }\r\n}\r\n",
          "styleUrl": "./paginator.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 37
      },
      "extends": [],
      "templateData": "<nav class=\"paginator\" class=\"{{ 'paginator--dir_' + position }}\">\r\n  @if (type === \"fullnumber\" || type === \"rangenumber\") {\r\n    @if (total !== 0 && total > pageSize) {\r\n      <ul class=\"paginator__pagination\">\r\n        @if (showLastFirstBtns) {\r\n          <li\r\n            class=\"paginator__pagination__page\"\r\n            (click)=\"pageSelected(1, $event)\"\r\n            clickable\r\n            [class.disabled]=\"currentPage() === 1\"\r\n            [title]=\"'PAGINATION.FIRST_PAGE' | translate\"\r\n          >\r\n            <span class=\"paginator__pagination__page--link\">\r\n              <i class=\"ri-skip-left-line\"></i>\r\n            </span>\r\n          </li>\r\n        }\r\n        <li\r\n          class=\"paginator__pagination__page\"\r\n          (click)=\"pageSelected(currentPage() - 1, $event)\"\r\n          clickable\r\n          [class.disabled]=\"currentPage() === 1\"\r\n          [title]=\"'APP.PREVIOUS' | translate\"\r\n        >\r\n          <span class=\"paginator__pagination__page--link\"\r\n            ><i class=\"ri-arrow-left-s-line\"></i\r\n          ></span>\r\n        </li>\r\n\r\n        @if (type === \"rangenumber\" && currentPage() - range > 1) {\r\n          <li class=\"disabled paginator__pagination__page\">\r\n            <span class=\"paginator__pagination__page--range\">...</span>\r\n          </li>\r\n        }\r\n\r\n        @for (page of pages(); track page) {\r\n          <li\r\n            class=\"paginator__pagination__page\"\r\n            [class.active]=\"page === currentPage()\"\r\n          >\r\n            @if (page !== currentPage()) {\r\n              <span\r\n                class=\"paginator__pagination__page--link\"\r\n                (click)=\"pageSelected(page, $event)\"\r\n                clickable\r\n                [title]=\"'PAGINATION.PAGE' | translate: { page: page }\"\r\n              >\r\n                {{ page }}\r\n              </span>\r\n            }\r\n\r\n            @if (page === currentPage()) {\r\n              <span\r\n                class=\"paginator__pagination__page--link\"\r\n                [title]=\"'PAGINATION.PAGE' | translate: { page: page }\"\r\n                >{{ page }}</span\r\n              >\r\n            }\r\n          </li>\r\n        }\r\n\r\n        @if (\r\n          type === \"rangenumber\" && currentPage() + range - 1 < totalPages()\r\n        ) {\r\n          <li\r\n            class=\"paginator__pagination__page\"\r\n            class=\"disabled paginator__pagination__page\"\r\n          >\r\n            <span class=\"paginator__pagination__page--range\">...</span>\r\n          </li>\r\n        }\r\n\r\n        <li\r\n          class=\"paginator__pagination__page\"\r\n          (click)=\"pageSelected(currentPage() + 1, $event)\"\r\n          clickable\r\n          [class.disabled]=\"currentPage() === totalPages()\"\r\n          [title]=\"'APP.NEXT' | translate\"\r\n        >\r\n          <span class=\"paginator__pagination__page--link\"\r\n            ><i class=\"ri-arrow-right-s-line\"></i\r\n          ></span>\r\n        </li>\r\n\r\n        @if (showLastFirstBtns) {\r\n          <li\r\n            class=\"paginator__pagination__page\"\r\n            (click)=\"pageSelected(totalPages(), $event)\"\r\n            clickable\r\n            [class.disabled]=\"currentPage() === totalPages()\"\r\n            [title]=\"'PAGINATION.LAST_PAGE' | translate\"\r\n          >\r\n            <span class=\"paginator__pagination__page--link\">\r\n              <i class=\"ri-skip-right-line\"></i>\r\n            </span>\r\n          </li>\r\n        }\r\n      </ul>\r\n    }\r\n  } @else if (type === \"nonumber\" || type === \"dividenumber\") {\r\n    @if (total !== 0) {\r\n      <ul class=\"paginator__pagination\">\r\n        @if (showLastFirstBtns) {\r\n          <li\r\n            class=\"paginator__pagination__page\"\r\n            (click)=\"pageSelected(1, $event)\"\r\n            clickable\r\n            [class.disabled]=\"currentPage() === 1\"\r\n            [title]=\"'PAGINATION.FIRST_PAGE' | translate\"\r\n          >\r\n            <span class=\"paginator__pagination__page--link\">\r\n              <i class=\"ri-skip-left-line\"></i>\r\n            </span>\r\n          </li>\r\n        }\r\n\r\n        <li\r\n          class=\"paginator__pagination__page\"\r\n          (click)=\"pageSelected(currentPage() - 1, $event)\"\r\n          clickable\r\n          [class.disabled]=\"currentPage() === 1\"\r\n          [title]=\"'APP.PREVIOUS' | translate\"\r\n        >\r\n          <span class=\"paginator__pagination__page--link\"\r\n            ><i class=\"ri-arrow-left-s-line\"></i\r\n          ></span>\r\n        </li>\r\n\r\n        @if (type === \"dividenumber\") {\r\n          <li class=\"paginator__pagination__dividenumber\">\r\n            <span class=\"paginator__pagination__dividenumber--current\">{{\r\n              currentPage()\r\n            }}</span\r\n            >/<span\r\n              class=\"paginator__pagination__dividenumber--total\"\r\n              [title]=\"\r\n                'PAGINATION.PAGE_TO_OF_TOTAL'\r\n                  | translate: { page: currentPage(), total: totalPages }\r\n              \"\r\n              >{{ totalPages() }}</span\r\n            >\r\n          </li>\r\n        }\r\n\r\n        <li\r\n          class=\"paginator__pagination__page\"\r\n          (click)=\"pageSelected(currentPage() + 1, $event)\"\r\n          clickable\r\n          [class.disabled]=\"currentPage() === totalPages()\"\r\n          [title]=\"'APP.NEXT' | translate\"\r\n        >\r\n          <span class=\"paginator__pagination__page--link\"\r\n            ><i class=\"ri-arrow-right-s-line\"></i\r\n          ></span>\r\n        </li>\r\n\r\n        @if (showLastFirstBtns) {\r\n          <li\r\n            class=\"paginator__pagination__page\"\r\n            (click)=\"pageSelected(totalPages(), $event)\"\r\n            clickable\r\n            [class.disabled]=\"currentPage() === totalPages()\"\r\n            [title]=\"'PAGINATION.LAST_PAGE' | translate\"\r\n          >\r\n            <span class=\"paginator__pagination__page--link\">\r\n              <i class=\"ri-skip-right-line\"></i>\r\n            </span>\r\n          </li>\r\n        }\r\n      </ul>\r\n    }\r\n  }\r\n  @if (showTotal && total > 0) {\r\n    <div\r\n      class=\"paginator__total_results\"\r\n      [title]=\"\r\n        'PAGINATION.TOTAL_ROWS'\r\n          | translate\r\n            : {\r\n                totalPageResults: totalResults(),\r\n                totalResults: total\r\n              }\r\n      \"\r\n    >\r\n      <span class=\"paginator__total_results--currents\">\r\n        {{ totalResults() }}</span\r\n      >\r\n      /\r\n      <span class=\"paginator__total_results--total\">{{ total }}</span>\r\n    </div>\r\n  }\r\n</nav>\r\n"
    },
    {
      "name": "ProgressBarComponent",
      "id": "component-ProgressBarComponent-eb3cd3a9c9dedaa154b598a2c09538aa027b562ca7826db42fa33e43909388bc59ce4dae562dfa0a66162ef315ef6a16508126a867a6cbc8affff6b47ff68c06",
      "file": "src/app/shared/components/progress-bar/progress-bar.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-progress-bar",
      "styleUrls": ["./progress-bar.component.scss"],
      "styles": [],
      "templateUrl": ["./progress-bar.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "color",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "string",
          "decorators": []
        },
        {
          "name": "isProgressInteger",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "progressNumber",
          "defaultValue": "-1",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "number",
          "decorators": []
        },
        {
          "name": "progressSplit",
          "defaultValue": "[-1, -1]",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "Array<number>",
          "decorators": []
        },
        {
          "name": "showProgress",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "defaultValue": "'m'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "ProgressBarSize",
          "decorators": []
        },
        {
          "name": "title",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "string",
          "decorators": []
        },
        {
          "name": "valueInside",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "progressBarWidth",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 32
        },
        {
          "name": "progressValue",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 31
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 38,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 34,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "progressValueCalculation",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 42,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        }
      ],
      "description": "<p>neo-progress-bar\nComponente para crear una barra de progreso</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;neo-progress-bar [progressNumber]=&quot;50&quot; [color]=&quot;&#39;#03a9d5&#39;&quot; [height]=&quot;&#39;10px&#39;&quot;&gt;&lt;/neo-progress-bar&gt;</code></pre></div>",
      "rawdescription": "\n\nneo-progress-bar\nComponente para crear una barra de progreso\n```html\n<neo-progress-bar [progressNumber]=\"50\" [color]=\"'#03a9d5'\" [height]=\"'10px'\"></neo-progress-bar>\n```",
      "type": "component",
      "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, OnInit, SimpleChanges } from '@angular/core';\r\nimport { ProgressBarSize } from './models/progress-bar.entity';\r\n\r\n/**\r\n * @name\r\n * neo-progress-bar\r\n * @description\r\n * Componente para crear una barra de progreso\r\n * @example\r\n * <neo-progress-bar [progressNumber]=\"50\" [color]=\"'#03a9d5'\" [height]=\"'10px'\"></neo-progress-bar>\r\n */\r\n@Component({\r\n  selector: 'neo-progress-bar',\r\n  templateUrl: './progress-bar.component.html',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  styleUrls: ['./progress-bar.component.scss'],\r\n})\r\nexport class ProgressBarComponent implements OnInit {\r\n\r\n  @Input() progressNumber: number = -1; // Valor de progreso (porcentaje)\r\n  @Input() progressSplit: Array<number> = [-1, -1]; // Valor de progreso dividido en dos partes (partido)\r\n  @Input() isProgressInteger?: boolean = true; // Para mostrar el valor como un entero o como decimal cuando se usa la variable `progressNumber`\r\n  @Input() showProgress?: boolean = true; // Para mostrar el valor del progreso\r\n  @Input() valueInside?: boolean = true; // Para mostrar el valor del progreso dentro de la barra\r\n  @Input() color?: string = ''; // Color de la barra de progreso\r\n  @Input() size?: ProgressBarSize = 'm'; // Tamaño de la barra de progreso\r\n  @Input() title?: string = ''; // Título de la barra de progreso\r\n\r\n  progressValue: string = '';\r\n  progressBarWidth: number = 0;\r\n\r\n  ngOnInit(): void {\r\n    this.progressValueCalculation();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.progressValueCalculation();\r\n  }\r\n\r\n  progressValueCalculation() {\r\n    // Se calcula el progreso y se obtiene un valor. Dicho valor aparecerá en:\r\n    // - x% (porcentaje): Si la variable \"progressInputs\" solo tiene un valor\r\n    // - x/y (partido): Si la variable \"progressInputs\" tiene dos valores\r\n    if (this.progressNumber !== -1) {\r\n\r\n      this.progressBarWidth = Number(this.progressNumber);\r\n\r\n      if (!Number.isNaN(this.progressBarWidth)) {\r\n\r\n        // Comprobamos si el progreso va a ser mostrado como un entero o con decimales\r\n        if (this.isProgressInteger) {\r\n          this.progressValue = `${Math.round(parseFloat(String(this.progressNumber)))} %`;\r\n        } else {\r\n          this.progressValue = `${parseFloat(String(this.progressNumber)).toFixed(2)} %`;\r\n        }\r\n      } else {\r\n        this.progressBarWidth = 0;\r\n        this.progressValue = `0 %`;\r\n      }\r\n    } else if (this.progressSplit?.length >= 2) {\r\n      if (\r\n        !Number.isNaN(this.progressSplit[0]) &&\r\n        !Number.isNaN(this.progressSplit[1])\r\n      ) {\r\n        this.progressBarWidth =\r\n          (100 * Number(this.progressSplit[0])) /\r\n          Number(this.progressSplit[1]);\r\n        this.progressValue =\r\n          this.progressSplit[0] + ' / ' + this.progressSplit[1];\r\n      } else {\r\n        this.progressBarWidth = 0;\r\n        this.progressValue = `0 / 0`;\r\n      }\r\n    } else {\r\n      this.progressBarWidth = 0;\r\n      this.progressValue = `0 %`;\r\n    }\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import 'base';\r\n\r\n:host {\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.progress-bar {\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  gap: 10px;\r\n  justify-content: flex-start;\r\n\r\n  &__value {\r\n    font-size: 13px;\r\n    font-weight: 600;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n    width: 75px;\r\n    color: var(--text-color);\r\n  }\r\n\r\n  &__container {\r\n    border-width: 0.5px;\r\n    border-style: solid;\r\n    border-radius: 5px;\r\n    width: 100%;\r\n    overflow: hidden;\r\n    background-color: var(--bg-field-color);\r\n    border-color: var(--border-field-disabled-color);\r\n\r\n    &__bar {\r\n      height: 100%;\r\n      background-color: var(--primary-color);\r\n    }\r\n\r\n    &__value {\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      justify-content: center;\r\n      font-weight: 600;\r\n      height: 100%;\r\n      width: 100%;\r\n      color: var(--secondary-color);\r\n    }\r\n\r\n    &--size-xs {\r\n      height: 15px;\r\n      font-size: 10px;\r\n    }\r\n\r\n    &--size-s {\r\n      height: 20px;\r\n      font-size: 11px;\r\n    }\r\n\r\n    &--size-xm {\r\n      height: 22px;\r\n      font-size: 12px;\r\n    }\r\n\r\n    &--size-m {\r\n      height: 26px;\r\n      font-size: 12px;\r\n    }\r\n\r\n    &--size-l {\r\n      height: 32px;\r\n      font-size: 14px;\r\n    }\r\n\r\n    &--size-xl {\r\n      height: 38px;\r\n      font-size: 14px;\r\n    }\r\n  }\r\n\r\n}\r\n",
          "styleUrl": "./progress-bar.component.scss"
        }
      ],
      "stylesData": "",
      "extends": [],
      "implements": ["OnInit"],
      "templateData": "<div class=\"progress-bar\">\r\n  <div\r\n    class=\"progress-bar__container progress-bar__container--size-{{ size }}\"\r\n    [title]=\"title ? title + ': ' + progressValue : progressValue\"\r\n  >\r\n    <div\r\n      class=\"progress-bar__container__bar\"\r\n      [ngStyle]=\"{\r\n        'background-color': color,\r\n        width: progressBarWidth + '%'\r\n      }\"\r\n    >\r\n      @if (showProgress && valueInside) {\r\n        <span class=\"progress-bar__container__value\">{{ progressValue }}</span>\r\n      }\r\n    </div>\r\n  </div>\r\n  @if (showProgress && !valueInside) {\r\n    <span class=\"progress-bar__value\">{{ progressValue }}</span>\r\n  }\r\n</div>\r\n"
    },
    {
      "name": "RadioButtonComponent",
      "id": "component-RadioButtonComponent-20808836e26efb67af8b1b094fcc38eb1380695e2ab66f38aa767bf26cd1075c783db5e82d0206650b10ccec4d4c8318cf1045db262666e2978e12a57b7d9f6e",
      "file": "src/app/shared/components/form-fields/radio-button/radio-button.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-radio-button",
      "styleUrls": [
        "./radio-button.component.scss",
        "./../form-fields-settings.scss"
      ],
      "styles": [],
      "templateUrl": ["./radio-button.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "required": false,
          "name": "checked",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput para asignar el estado marcado del radio button\n",
          "description": "<p>Input para asignar el estado marcado del radio button</p>\n",
          "line": 105,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput para asignar el estado deshabilitado del radio button\n",
          "description": "<p>Input para asignar el estado deshabilitado del radio button</p>\n",
          "line": 78,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput para asignar el ID del radio button\n",
          "description": "<p>Input para asignar el ID del radio button</p>\n",
          "line": 44,
          "type": "string",
          "decorators": []
        },
        {
          "name": "inputSize",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput para asignar el tamaño del radio button\n",
          "description": "<p>Input para asignar el tamaño del radio button</p>\n",
          "line": 33,
          "type": "InputSize",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput para asignar el nombre del radio buttons\n",
          "description": "<p>Input para asignar el nombre del radio buttons</p>\n",
          "line": 90,
          "type": "string",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput para asignar el valor del radio button y asignar el valor al grupo de radio buttons\n",
          "description": "<p>Input para asignar el valor del radio button y asignar el valor al grupo de radio buttons</p>\n",
          "line": 55,
          "type": "any",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "new EventEmitter<any>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nEvento emitido cuando cambia el estado marcado del radio button.\nLos eventos `change` solo se emiten cuando el valor cambia debido a la interacción del usuario con\nel radio button (el mismo comportamiento que `<input type=\"radio\">`).\n",
          "description": "<p>Evento emitido cuando cambia el estado marcado del radio button.\nLos eventos <code>change</code> solo se emiten cuando el valor cambia debido a la interacción del usuario con\nel radio button (el mismo comportamiento que <code>&lt;input type=&quot;radio&quot;&gt;</code>).</p>\n",
          "line": 131,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "_checked",
          "defaultValue": "signal(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<boolean>",
          "optional": false,
          "description": "",
          "line": 138
        },
        {
          "name": "_disabled",
          "defaultValue": "signal(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<boolean>",
          "optional": false,
          "description": "",
          "line": 137
        },
        {
          "name": "_id",
          "defaultValue": "signal('')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string>",
          "optional": false,
          "description": "",
          "line": 141
        },
        {
          "name": "_inputElement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLInputElement>",
          "optional": false,
          "description": "",
          "line": 26,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'input'"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "_inputSize",
          "defaultValue": "signal('m')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<InputSize>",
          "optional": false,
          "description": "",
          "line": 136
        },
        {
          "name": "_name",
          "defaultValue": "signal('')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string>",
          "optional": false,
          "description": "",
          "line": 140
        },
        {
          "name": "_removeUniqueSelectionListener",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 144,
          "modifierKind": [123]
        },
        {
          "name": "_title",
          "defaultValue": "signal('')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string>",
          "optional": false,
          "description": "",
          "line": 139
        },
        {
          "name": "_value",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 135
        },
        {
          "name": "radioButtonContent",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 27,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'radioButtonContent'"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "radioGroup",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "RadioButtonGroupComponent | null",
          "optional": false,
          "description": "",
          "line": 133
        }
      ],
      "methodsClass": [
        {
          "name": "_emitChangeEvent",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 223,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para emitir el evento de cambio del radio button con el valor actual\n",
          "description": "<p>Función para emitir el evento de cambio del radio button con el valor actual</p>\n",
          "modifierKind": [123]
        },
        {
          "name": "createTitle",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 183,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para crear el título del radio button\n",
          "description": "<p>Función para crear el título del radio button</p>\n"
        },
        {
          "name": "createUniqueId",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 214,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para crear un ID único a partir del nombre\n",
          "description": "<p>Función para crear un ID único a partir del nombre</p>\n"
        },
        {
          "name": "createUniqueName",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 190,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para crear name único a partir del label del radio button\n",
          "description": "<p>Función para crear name único a partir del label del radio button</p>\n"
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 154,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 255,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 160,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onClickTargetRadioButton",
          "args": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 231,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción lanzada cuando el usuario hace clic en el radio button\n",
          "description": "<p>Función lanzada cuando el usuario hace clic en el radio button</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 7163,
                "end": 7168,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "event"
              },
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 7149,
                "end": 7154,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 7155,
                "end": 7162,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 7156,
                  "end": 7161,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 7156,
                    "end": 7161,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "Event"
                  }
                }
              }
            }
          ]
        },
        {
          "name": "updateSize",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 205,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para asignar el tamaño del radio button group al hijo\n",
          "description": "<p>Función para asignar el tamaño del radio button group al hijo</p>\n"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "<p>neo-radio-button\nComponente para crear un radio button con funcionalidad de control de formulario</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;neo-radio-button [(ngModel)]=&quot;value&quot;&gt;&lt;/neo-radio-button&gt;\n&lt;neo-radio-button formControlName=&quot;radio_name&quot;&gt;&lt;/neo-radio-button&gt;\n&lt;neo-radio-button [checked]=&quot;true&quot;&gt;&lt;/neo-radio-button&gt;\n&lt;neo-radio-button [disabled]=&quot;true&quot;&gt;&lt;/neo-radio-button&gt;\n&lt;neo-radio-button [value]=&quot;1&quot;&gt;&lt;/neo-radio-button&gt;</code></pre></div>",
      "rawdescription": "\n\nneo-radio-button\nComponente para crear un radio button con funcionalidad de control de formulario\n```html\n<neo-radio-button [(ngModel)]=\"value\"></neo-radio-button>\n<neo-radio-button formControlName=\"radio_name\"></neo-radio-button>\n<neo-radio-button [checked]=\"true\"></neo-radio-button>\n<neo-radio-button [disabled]=\"true\"></neo-radio-button>\n<neo-radio-button [value]=\"1\"></neo-radio-button>\n```",
      "type": "component",
      "sourceCode": "import { Component, ElementRef, EventEmitter, Inject, Input, Optional, Output, ViewChild, WritableSignal, booleanAttribute, signal } from '@angular/core';\r\nimport { InputsUtilsService } from '@shared/components/form-fields/services/inputs-utils.service';\r\nimport { NEO_RADIO_BUTTON_GROUP, RadioButtonGroupComponent } from './radio-button-group/radio-button-group.component';\r\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\r\nimport { InputSize } from '../models/form-field.entity';\r\n\r\n/**\r\n * @name\r\n * neo-radio-button\r\n * @description\r\n * Componente para crear un radio button con funcionalidad de control de formulario\r\n * @example\r\n * <neo-radio-button [(ngModel)]=\"value\"></neo-radio-button>\r\n * <neo-radio-button formControlName=\"radio_name\"></neo-radio-button>\r\n * <neo-radio-button [checked]=\"true\"></neo-radio-button>\r\n * <neo-radio-button [disabled]=\"true\"></neo-radio-button>\r\n * <neo-radio-button [value]=\"1\"></neo-radio-button>\r\n */\r\n@Component({\r\n  selector: 'neo-radio-button',\r\n  templateUrl: './radio-button.component.html',\r\n  styleUrls: ['./radio-button.component.scss', './../form-fields-settings.scss']\r\n})\r\nexport class RadioButtonComponent {\r\n\r\n  @ViewChild('input') _inputElement!: ElementRef<HTMLInputElement>;\r\n  @ViewChild('radioButtonContent') radioButtonContent!: ElementRef;\r\n\r\n  /**\r\n   * Input para asignar el tamaño del radio button\r\n   */\r\n  @Input()\r\n  get inputSize() {\r\n    return this._inputSize();\r\n  }\r\n  set inputSize(value: InputSize) {\r\n    this._inputSize.set(value || 'm');\r\n  }\r\n\r\n  /**\r\n   * Input para asignar el ID del radio button\r\n   */\r\n  @Input()\r\n  get id() {\r\n    return this._id();\r\n  }\r\n  set id(value: string) {\r\n    this._id.set(value);\r\n  }\r\n\r\n  /**\r\n   * Input para asignar el valor del radio button y asignar el valor al grupo de radio buttons\r\n   */\r\n  @Input()\r\n  get value(): any {\r\n    return this._value;\r\n  }\r\n  set value(value: any) {\r\n    if (this._value !== value) {\r\n      this._value = value;\r\n      if (this.radioGroup !== null) {\r\n\r\n        // Si no está marcado y el valor del grupo es el mismo que el valor del radio button, lo marcamos\r\n        if (!this.checked)\r\n          this.checked = this.radioGroup.value === value;\r\n\r\n        // Si el radio button está seleccionado, actualiza el valor del grupo de radio buttons\r\n        if (this.checked)\r\n          this.radioGroup.selected = this;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Input para asignar el estado deshabilitado del radio button\r\n   */\r\n  @Input({ transform: booleanAttribute })\r\n  get disabled(): boolean {\r\n    return this._disabled() || (this.radioGroup !== null && this.radioGroup.disabled);\r\n  }\r\n  set disabled(value: boolean) {\r\n    if (this._disabled() !== value)\r\n      this._disabled.set(value);\r\n  }\r\n\r\n  /**\r\n   * Input para asignar el nombre del radio buttons\r\n   */\r\n  @Input()\r\n  get name() {\r\n    return this._name();\r\n  }\r\n  set name(value: string) {\r\n\r\n    this._name.set(value);\r\n\r\n    // Actualizamos el ID del radio button\r\n    this.createUniqueId();\r\n  };\r\n\r\n  /**\r\n   * Input para asignar el estado marcado del radio button\r\n   */\r\n  @Input({ transform: booleanAttribute })\r\n  get checked(): boolean {\r\n    return this._checked();\r\n  }\r\n  set checked(value: boolean) {\r\n    if (this._checked() !== value) {\r\n\r\n      this._checked.set(value);\r\n\r\n      // Si el radio button está marcado y el grupo de radio buttons tiene un valor diferente, actualiza el valor del grupo\r\n      if (value && this.radioGroup && this.radioGroup.value !== this.value)\r\n        this.radioGroup.selected = this;\r\n      else if (!value && this.radioGroup && this.radioGroup.value === this.value)\r\n        this.radioGroup.selected = null;\r\n\r\n\r\n      // Si el radio button está marcado, notifica al dispatcher para desmarcar otros radio buttons con el mismo nombre\r\n      if (value)\r\n        this._radioDispatcher.notify(this.id, this.name);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Evento emitido cuando cambia el estado marcado del radio button.\r\n   * Los eventos `change` solo se emiten cuando el valor cambia debido a la interacción del usuario con\r\n   * el radio button (el mismo comportamiento que `<input type=\"radio\">`).\r\n   */\r\n  @Output() readonly change: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  radioGroup: RadioButtonGroupComponent | null = null;\r\n\r\n  _value: any = null;\r\n  _inputSize: WritableSignal<InputSize> = signal('m');\r\n  _disabled: WritableSignal<boolean> = signal(false);\r\n  _checked: WritableSignal<boolean> = signal(false);\r\n  _title: WritableSignal<string> = signal('');\r\n  _name: WritableSignal<string> = signal('');\r\n  _id: WritableSignal<string> = signal('');\r\n\r\n  // Nos servirá para desuscribirnos del _radioDispatcher\r\n  private _removeUniqueSelectionListener: () => void = () => { };\r\n\r\n  constructor(\r\n    @Optional() @Inject(NEO_RADIO_BUTTON_GROUP) radioGroup: RadioButtonGroupComponent,\r\n    private _radioDispatcher: UniqueSelectionDispatcher,\r\n    private readonly _inputsUtilsService: InputsUtilsService\r\n  ) {\r\n    this.radioGroup = radioGroup;\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.createTitle();\r\n    this.createUniqueName();\r\n    this.updateSize();\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.radioGroup) {\r\n\r\n      // Si el radio está dentro de un grupo de radio, determina si debe estar marcado\r\n      this.checked = this.radioGroup.value === this._value;\r\n\r\n      if (this.checked) {\r\n        this.radioGroup.selected = this;\r\n      }\r\n\r\n    }\r\n\r\n    // Utilizamos `_radioDispatcher` para notificar a otros radio buttons con el mismo nombre para desmarcar.\r\n    this._removeUniqueSelectionListener = this._radioDispatcher.listen((id, name) => {\r\n      if (id !== this.id && name === this.name) {\r\n        this.checked = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Función para crear el título del radio button\r\n   */\r\n  createTitle() {\r\n    this._title.set(this.radioButtonContent?.nativeElement?.innerHTML.replace(/(<([^>]+)>)/gi, \"\") || '');\r\n  }\r\n\r\n  /**\r\n   * Función para crear name único a partir del label del radio button\r\n   */\r\n  createUniqueName(): void {\r\n\r\n    // Copia el nombre del grupo de radio padre si no tiene nombre y el grupo de radio tiene nombre\r\n    if (this.radioGroup?.name)\r\n      this.name = this.radioGroup.name;\r\n\r\n    // Si no tiene nombre, crea un nombre único\r\n    if (!this._name() && !this.radioGroup?.name) {\r\n      this.name = this._inputsUtilsService.createUniqueId(this._title() || 'neo_radio');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Función para asignar el tamaño del radio button group al hijo\r\n   */\r\n  updateSize(): void {\r\n    if (this.radioGroup) {\r\n      this._inputSize.set(this.radioGroup.inputSize || 'm');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Función para crear un ID único a partir del nombre\r\n   */\r\n  createUniqueId(): void {\r\n    if (!this._id()) {\r\n      this._id.set(this._inputsUtilsService.createUniqueId(this._title() || 'neo_radio'));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Función para emitir el evento de cambio del radio button con el valor actual\r\n   */\r\n  private _emitChangeEvent(): void {\r\n    this.change.emit(this._value);\r\n  }\r\n\r\n  /**\r\n   * Función lanzada cuando el usuario hace clic en el radio button\r\n   * @param {Event} event\r\n   */\r\n  onClickTargetRadioButton(event: Event) {\r\n\r\n    event?.stopPropagation();\r\n\r\n    // Si el radio button no está marcado y no está deshabilitado, lo marcamos\r\n    // y emitimos el evento de cambio al grupo de radio buttons\r\n    if (!this.checked && !this.disabled) {\r\n\r\n      const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\r\n      this.checked = true;\r\n      this._emitChangeEvent();\r\n\r\n      if (this.radioGroup) {\r\n        this.radioGroup.onChange(this.value);\r\n        if (groupValueChanged)\r\n          this.radioGroup.emitChangeEvent();\r\n      }\r\n    }\r\n\r\n    // Si el radio button no está deshabilitado, enfocamos el input\r\n    if (!this.disabled)\r\n      this._inputElement.nativeElement.focus();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._removeUniqueSelectionListener();\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".neo-radiobutton {\r\n  display: flex;\r\n  position: relative;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n\r\n  &__control {\r\n    display: flex;\r\n    position: relative;\r\n    cursor: pointer;\r\n    align-items: center;\r\n\r\n    &__input {\r\n      position: absolute;\r\n      opacity: 0;\r\n      cursor: pointer;\r\n      height: 0;\r\n      width: 0;\r\n      margin: 0;\r\n      z-index: -1;\r\n    }\r\n\r\n    &__input:checked~&__checkmark {\r\n      border-color: var(--border-field-color);\r\n      box-shadow: none;\r\n    }\r\n\r\n    &__input:focus~&__checkmark {\r\n      outline-color: var(--outline-color);\r\n      outline-style: solid;\r\n      outline-width: 1px;\r\n      box-shadow: 0px 0px 2px 1px var(--bg-field-color);\r\n    }\r\n\r\n    &__input:checked~&__checkmark::after {\r\n      opacity: 1;\r\n    }\r\n\r\n    &__checkmark {\r\n      height: 18px;\r\n      width: 18px;\r\n      border: 1px solid var(--border-field-color);\r\n      background-color: var(--bg-field-color);\r\n      transition: background-color 0.25s ease;\r\n      border-radius: 50%;\r\n      cursor: pointer;\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      justify-content: center;\r\n\r\n      &::after {\r\n        content: \"\";\r\n        content: \"\";\r\n        border: solid var(--primary-color);\r\n        border-width: 4px;\r\n        opacity: 0;\r\n        transition: opacity 0.25s ease;\r\n        border-radius: 50%;\r\n        display: inline-block;\r\n      }\r\n    }\r\n\r\n    &__label {\r\n      color: var(--text-color);\r\n      margin: 0;\r\n      cursor: pointer;\r\n      padding-left: 5px;\r\n    }\r\n  }\r\n\r\n}\r\n",
          "styleUrl": "./radio-button.component.scss"
        },
        {
          "data": ".neo-input,\r\n.neo-input-password,\r\n.neo-input-date-picker,\r\n.neo-textarea,\r\n.neo-select {\r\n  &__label {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    margin-bottom: 5px;\r\n    gap: 5px;\r\n  }\r\n}\r\n\r\n.neo-select__field,\r\n.neo-input__wrapper__field,\r\n.neo-input-password__wrapper__field,\r\n.neo-input-date-picker__wrapper__field,\r\n.neo-checkbox__control,\r\n.neo-checkbox__control__label,\r\n.neo-radiobutton__control,\r\n.neo-radiobutton__control__label {\r\n\r\n  &.size-xs {\r\n    font-size: 0.6rem;\r\n    line-height: 0.6rem;\r\n  }\r\n\r\n  &.size-s {\r\n    font-size: 0.7rem;\r\n    line-height: 0.7rem;\r\n  }\r\n\r\n  &.size-xm {\r\n    font-size: 0.75rem;\r\n    line-height: 0.75rem;\r\n  }\r\n\r\n  &.size-m {\r\n    font-size: 0.8rem;\r\n    line-height: 0.8rem;\r\n  }\r\n\r\n  &.size-l {\r\n    font-size: 0.85rem;\r\n    line-height: 0.85rem;\r\n  }\r\n\r\n  &.size-xl {\r\n    font-size: 0.9rem;\r\n    line-height: 0.9rem;\r\n  }\r\n}\r\n\r\n.neo-select__field,\r\n.neo-input__wrapper__field,\r\n.neo-input-password__wrapper__field,\r\n.neo-input-date-picker__wrapper__field,\r\n.neo-checkbox__control,\r\n.neo-radiobutton__control {\r\n  &.size-xs {\r\n    height: 25px;\r\n  }\r\n\r\n  &.size-s {\r\n    height: 28px;\r\n  }\r\n\r\n  &.size-xm {\r\n    height: 32px;\r\n  }\r\n\r\n  &.size-m {\r\n    height: 35px;\r\n  }\r\n\r\n  &.size-l {\r\n    height: 40px;\r\n  }\r\n\r\n  &.size-xl {\r\n    height: 45px;\r\n  }\r\n}\r\n\r\n.neo-checkbox__control,\r\n.neo-radiobutton__control {\r\n\r\n  &.size-xs &__checkmark,\r\n  &.size-s &__checkmark {\r\n    height: 10px;\r\n    width: 10px;\r\n\r\n    &::after {\r\n      border-width: 4px;\r\n    }\r\n  }\r\n\r\n  &.size-xm &__checkmark {\r\n    height: 14px;\r\n    width: 14px;\r\n\r\n    &::after {\r\n      border-width: 4px;\r\n    }\r\n  }\r\n\r\n  &.size-m &__checkmark {\r\n    height: 18px;\r\n    width: 18px;\r\n\r\n    &::after {\r\n      border-width: 5px;\r\n    }\r\n  }\r\n\r\n  &.size-l &__checkmark {\r\n    height: 22px;\r\n    width: 22px;\r\n\r\n    &::after {\r\n      border-width: 6px;\r\n    }\r\n  }\r\n\r\n  &.size-xl &__checkmark {\r\n    height: 26px;\r\n    width: 26px;\r\n\r\n    &::after {\r\n      border-width: 8px;\r\n    }\r\n  }\r\n}\r\n",
          "styleUrl": "./../form-fields-settings.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "radioGroup",
            "type": "RadioButtonGroupComponent",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_radioDispatcher",
            "type": "UniqueSelectionDispatcher",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_inputsUtilsService",
            "type": "InputsUtilsService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 144,
        "jsdoctags": [
          {
            "name": "radioGroup",
            "type": "RadioButtonGroupComponent",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_radioDispatcher",
            "type": "UniqueSelectionDispatcher",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_inputsUtilsService",
            "type": "InputsUtilsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "accessors": {
        "inputSize": {
          "name": "inputSize",
          "setSignature": {
            "name": "inputSize",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "InputSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "value",
                "type": "InputSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "inputSize",
            "type": "",
            "returnType": "",
            "line": 33,
            "rawdescription": "\n\nInput para asignar el tamaño del radio button\n",
            "description": "<p>Input para asignar el tamaño del radio button</p>\n"
          }
        },
        "id": {
          "name": "id",
          "setSignature": {
            "name": "id",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 47,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "id",
            "type": "",
            "returnType": "",
            "line": 44,
            "rawdescription": "\n\nInput para asignar el ID del radio button\n",
            "description": "<p>Input para asignar el ID del radio button</p>\n"
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "any",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 58,
            "jsdoctags": [
              {
                "name": "value",
                "type": "any",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "any",
            "returnType": "any",
            "line": 55,
            "rawdescription": "\n\nInput para asignar el valor del radio button y asignar el valor al grupo de radio buttons\n",
            "description": "<p>Input para asignar el valor del radio button y asignar el valor al grupo de radio buttons</p>\n"
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 81,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 78,
            "rawdescription": "\n\nInput para asignar el estado deshabilitado del radio button\n",
            "description": "<p>Input para asignar el estado deshabilitado del radio button</p>\n"
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 93,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "",
            "returnType": "",
            "line": 90,
            "rawdescription": "\n\nInput para asignar el nombre del radio buttons\n",
            "description": "<p>Input para asignar el nombre del radio buttons</p>\n"
          }
        },
        "checked": {
          "name": "checked",
          "setSignature": {
            "name": "checked",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 108,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "checked",
            "type": "boolean",
            "returnType": "boolean",
            "line": 105,
            "rawdescription": "\n\nInput para asignar el estado marcado del radio button\n",
            "description": "<p>Input para asignar el estado marcado del radio button</p>\n"
          }
        }
      },
      "templateData": "<div class=\"neo-radiobutton\">\r\n  <div class=\"neo-radiobutton__control size-{{ inputSize }}\">\r\n    <input\r\n      class=\"neo-radiobutton__control__input\"\r\n      #input\r\n      type=\"radio\"\r\n      [id]=\"_id()\"\r\n      [checked]=\"checked\"\r\n      [disabled]=\"_disabled()\"\r\n      [attr.name]=\"name\"\r\n      [attr.value]=\"value\"\r\n      [tabIndex]=\"disabled ? -1 : 0\"\r\n      [attr.aria-label]=\"_title()\"\r\n      [attr.aria-labelledby]=\"_id()\"\r\n      (change)=\"onClickTargetRadioButton($event)\"\r\n    />\r\n    <div\r\n      class=\"neo-radiobutton__control__checkmark\"\r\n      (click)=\"onClickTargetRadioButton($event)\"\r\n    ></div>\r\n    <label\r\n      class=\"neo-radiobutton__control__label size-{{ inputSize }}\"\r\n      [for]=\"_id()\"\r\n      [title]=\"_title()\"\r\n      #radioButtonContent\r\n    >\r\n      <ng-content></ng-content>\r\n    </label>\r\n  </div>\r\n</div>\r\n"
    },
    {
      "name": "RadioButtonGroupComponent",
      "id": "component-RadioButtonGroupComponent-3686ce552fe27c2adc90e0cacf81f446dd295fd98dc19252651c1553369a65230125d916dc8c5ef16a475c775878f471c34ced21d7ad10042488858ef68d48b4",
      "file": "src/app/shared/components/form-fields/radio-button/radio-button-group/radio-button-group.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => RadioButtonGroupComponent), multi: true,\n}",
          "type": "component"
        },
        {
          "name": "{ provide: NEO_RADIO_BUTTON_GROUP, useExisting: RadioButtonGroupComponent }",
          "type": "component"
        }
      ],
      "selector": "neo-radio-button-group",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./radio-button-group.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "direction",
          "defaultValue": "'horizontal'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput para asignar la dirección del grupo de radio buttons (horizontal | vertical)\n",
          "description": "<p>Input para asignar la dirección del grupo de radio buttons (horizontal | vertical)</p>\n",
          "line": 60,
          "type": "DirectionRadioButtonGroup",
          "decorators": []
        },
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput para deshabilitar el grupo de radio buttons\n",
          "description": "<p>Input para deshabilitar el grupo de radio buttons</p>\n",
          "line": 95,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "hideLabel",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput para ocultar el título del grupo de radio buttons\n",
          "description": "<p>Input para ocultar el título del grupo de radio buttons</p>\n",
          "line": 55,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "inputSize",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput para asignar el tamaño del grupo de radio buttons\n",
          "description": "<p>Input para asignar el tamaño del grupo de radio buttons</p>\n",
          "line": 66,
          "type": "InputSize",
          "decorators": []
        },
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput para asignar el título del grupo de radio buttons\n",
          "description": "<p>Input para asignar el título del grupo de radio buttons</p>\n",
          "line": 50,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput para asignar el nombre del grupo de radio buttons\n",
          "description": "<p>Input para asignar el nombre del grupo de radio buttons</p>\n",
          "line": 81,
          "type": "string",
          "decorators": []
        },
        {
          "name": "selected",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput para seleccionar el radio button del grupo\n",
          "description": "<p>Input para seleccionar el radio button del grupo</p>\n",
          "line": 109,
          "type": "any",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput para asignar el valor del grupo de radio buttons\n",
          "description": "<p>Input para asignar el valor del grupo de radio buttons</p>\n",
          "line": 122,
          "type": "any",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "new EventEmitter<any>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nEvento emitido cuando cambia el estado marcado del grupo de radio buttons.\nLos eventos `change` solo se emiten cuando el valor cambia debido a la interacción del usuario con\nel radio button (el mismo comportamiento que `<input type=\"radio\">`).\n",
          "description": "<p>Evento emitido cuando cambia el estado marcado del grupo de radio buttons.\nLos eventos <code>change</code> solo se emiten cuando el valor cambia debido a la interacción del usuario con\nel radio button (el mismo comportamiento que <code>&lt;input type=&quot;radio&quot;&gt;</code>).</p>\n",
          "line": 141,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [
        {
          "name": "_disabled",
          "defaultValue": "signal(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<boolean>",
          "optional": false,
          "description": "",
          "line": 145,
          "modifierKind": [123]
        },
        {
          "name": "_inputSize",
          "defaultValue": "'m'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "InputSize",
          "optional": false,
          "description": "",
          "line": 147,
          "modifierKind": [123]
        },
        {
          "name": "_name",
          "defaultValue": "signal('')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string>",
          "optional": false,
          "description": "",
          "line": 148,
          "modifierKind": [123]
        },
        {
          "name": "_selected",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "RadioButtonComponent | null",
          "optional": false,
          "description": "",
          "line": 144,
          "modifierKind": [123]
        },
        {
          "name": "_title",
          "defaultValue": "signal('')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string>",
          "optional": false,
          "description": "",
          "line": 143
        },
        {
          "name": "_value",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 146,
          "modifierKind": [123]
        },
        {
          "name": "onChange",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 229
        },
        {
          "name": "onTouched",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 230
        },
        {
          "name": "radioButtons",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "QueryList<RadioButtonComponent>",
          "optional": false,
          "description": "",
          "line": 45,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "undefined, {descendants: true}"
            }
          ],
          "modifierKind": [170]
        }
      ],
      "methodsClass": [
        {
          "name": "changeValue",
          "args": [
            {
              "name": "value",
              "type": "string | number | boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 244,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "string | number | boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "checkSelectedRadioButton",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 172,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nActualiza el radio button seleccionado\n",
          "description": "<p>Actualiza el radio button seleccionado</p>\n",
          "modifierKind": [123]
        },
        {
          "name": "createTitle",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 165,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "disableRadioButtons",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 217,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para deshabilitar cada radio button del grupo\n",
          "description": "<p>Función para deshabilitar cada radio button del grupo</p>\n",
          "modifierKind": [123]
        },
        {
          "name": "emitChangeEvent",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 225,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para emitir el evento de cambio del grupo de radio buttons con el valor actual\n",
          "description": "<p>Función para emitir el evento de cambio del grupo de radio buttons con el valor actual</p>\n"
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 154,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "registerOnChange",
          "args": [
            {
              "name": "fn",
              "type": "Function",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 236,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "Function",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnTouched",
          "args": [
            {
              "name": "fn",
              "type": "Function",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 240,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "Function",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setDisabledState",
          "args": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 249,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateInputSizeRadioButtons",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 201,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nActualiza el inputSize de cada radio button del grupo\n",
          "description": "<p>Actualiza el inputSize de cada radio button del grupo</p>\n",
          "modifierKind": [123]
        },
        {
          "name": "updateRadioButtonsName",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 209,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nActualiza el nombre de cada radio button del grupo\n",
          "description": "<p>Actualiza el nombre de cada radio button del grupo</p>\n",
          "modifierKind": [123]
        },
        {
          "name": "updateSelectedRadioFromValue",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 181,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nActualiza el radio button seleccionado a partir del valor\n",
          "description": "<p>Actualiza el radio button seleccionado a partir del valor</p>\n",
          "modifierKind": [123]
        },
        {
          "name": "writeValue",
          "args": [
            {
              "name": "value",
              "type": "string | number | boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 232,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "string | number | boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "<p>neo-radio-button-group\nComponente para crear un grupo de radio buttons con funcionalidad de control de formulario mediante el componente <code>neo-radio-button</code></p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;neo-radio-button-group formControlName=&quot;radio_name&quot; inputSize=&#39;m&#39; label=&quot;Grupo de radio buttons&quot; direction=&quot;horizontal&quot;&gt;\n  &lt;neo-radio-button [value]=&quot;1&quot;&gt;Opción 1&lt;/neo-radio-button&gt;\n  &lt;neo-radio-button [value]=&quot;2&quot;&gt;Opción 2&lt;/neo-radio-button&gt;\n  &lt;neo-radio-button [value]=&quot;3&quot;&gt;Opción 3&lt;/neo-radio-button&gt;\n&lt;/neo-radio-button-group&gt;</code></pre></div><p>&lt;neo-radio-button-group [(ngModel)]=&quot;value&quot; inputSize=&#39;m&#39; label=&quot;Grupo de radio buttons&quot; direction=&quot;horizontal&quot;&gt;\n  &lt;neo-radio-button [value]=&quot;1&quot;&gt;Opción 1</neo-radio-button>\n  &lt;neo-radio-button [value]=&quot;2&quot;&gt;Opción 2</neo-radio-button>\n  &lt;neo-radio-button [value]=&quot;3&quot;&gt;Opción 3</neo-radio-button>\n</neo-radio-button-group></p>\n",
      "rawdescription": "\n\nneo-radio-button-group\nComponente para crear un grupo de radio buttons con funcionalidad de control de formulario mediante el componente `neo-radio-button`\n```html\n<neo-radio-button-group formControlName=\"radio_name\" inputSize='m' label=\"Grupo de radio buttons\" direction=\"horizontal\">\n  <neo-radio-button [value]=\"1\">Opción 1</neo-radio-button>\n  <neo-radio-button [value]=\"2\">Opción 2</neo-radio-button>\n  <neo-radio-button [value]=\"3\">Opción 3</neo-radio-button>\n</neo-radio-button-group>\n```\n<neo-radio-button-group [(ngModel)]=\"value\" inputSize='m' label=\"Grupo de radio buttons\" direction=\"horizontal\">\n  <neo-radio-button [value]=\"1\">Opción 1</neo-radio-button>\n  <neo-radio-button [value]=\"2\">Opción 2</neo-radio-button>\n  <neo-radio-button [value]=\"3\">Opción 3</neo-radio-button>\n</neo-radio-button-group>\n",
      "type": "component",
      "sourceCode": "import { Component, ContentChildren, EventEmitter, InjectionToken, Input, Output, QueryList, WritableSignal, forwardRef, signal } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\nimport { InputsUtilsService } from '@shared/components/form-fields/services/inputs-utils.service';\r\nimport { InputSize } from '../../models/form-field.entity';\r\nimport { RadioButtonComponent } from '../radio-button.component';\r\nimport { DirectionRadioButtonGroup } from '../models/radio-button.entity';\r\n\r\n/**\r\n * Permite inyectar el componente RadioButtonGroupComponent en el componente RadioButtonComponent\r\n * para poder acceder a sus propiedades y métodos desde el componente RadioButtonComponent hijo\r\n */\r\nexport const NEO_RADIO_BUTTON_GROUP = new InjectionToken<RadioButtonGroupComponent>('RadioButtonGroupComponent');\r\n\r\n/**\r\n * @name\r\n * neo-radio-button-group\r\n * @description\r\n * Componente para crear un grupo de radio buttons con funcionalidad de control de formulario mediante el componente `neo-radio-button`\r\n * @example\r\n * <neo-radio-button-group formControlName=\"radio_name\" inputSize='m' label=\"Grupo de radio buttons\" direction=\"horizontal\">\r\n *   <neo-radio-button [value]=\"1\">Opción 1</neo-radio-button>\r\n *   <neo-radio-button [value]=\"2\">Opción 2</neo-radio-button>\r\n *   <neo-radio-button [value]=\"3\">Opción 3</neo-radio-button>\r\n * </neo-radio-button-group>\r\n *\r\n * <neo-radio-button-group [(ngModel)]=\"value\" inputSize='m' label=\"Grupo de radio buttons\" direction=\"horizontal\">\r\n *   <neo-radio-button [value]=\"1\">Opción 1</neo-radio-button>\r\n *   <neo-radio-button [value]=\"2\">Opción 2</neo-radio-button>\r\n *   <neo-radio-button [value]=\"3\">Opción 3</neo-radio-button>\r\n * </neo-radio-button-group>\r\n */\r\n@Component({\r\n  selector: 'neo-radio-button-group',\r\n  templateUrl: './radio-button-group.component.html',\r\n  styleUrl: './radio-button-group.component.scss',\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => RadioButtonGroupComponent),\r\n    multi: true,\r\n  },\r\n  { provide: NEO_RADIO_BUTTON_GROUP, useExisting: RadioButtonGroupComponent },]\r\n})\r\nexport class RadioButtonGroupComponent implements ControlValueAccessor {\r\n\r\n  @ContentChildren(forwardRef(() => RadioButtonComponent), { descendants: true }) radioButtons!: QueryList<RadioButtonComponent>;\r\n\r\n  /**\r\n   * Input para asignar el título del grupo de radio buttons\r\n   */\r\n  @Input() label?: string;\r\n\r\n  /**\r\n   * Input para ocultar el título del grupo de radio buttons\r\n   */\r\n  @Input() hideLabel: boolean = false;\r\n\r\n  /**\r\n   * Input para asignar la dirección del grupo de radio buttons (horizontal | vertical)\r\n   */\r\n  @Input() direction: DirectionRadioButtonGroup = 'horizontal';\r\n\r\n  /**\r\n   * Input para asignar el tamaño del grupo de radio buttons\r\n   */\r\n  @Input()\r\n  get inputSize() {\r\n    return this._inputSize;\r\n  }\r\n  set inputSize(value: InputSize) {\r\n\r\n    this._inputSize = value || 'm';\r\n\r\n    // Actualizamos el nombre de cada radio button del grupo\r\n    this.updateInputSizeRadioButtons();\r\n  }\r\n\r\n  /**\r\n   * Input para asignar el nombre del grupo de radio buttons\r\n   */\r\n  @Input()\r\n  get name() {\r\n    return this._name();\r\n  }\r\n  set name(value: string) {\r\n    this._name.set(value);\r\n\r\n    // Actualizamos el nombre de cada radio button del grupo\r\n    this.updateRadioButtonsName();\r\n  }\r\n\r\n  /**\r\n   * Input para deshabilitar el grupo de radio buttons\r\n   */\r\n  @Input()\r\n  set disabled(status: boolean) {\r\n    this._disabled.set(status);\r\n\r\n    // Deshabilitamos cada radio button del grupo si el grupo está deshabilitado\r\n    this.disableRadioButtons();\r\n  }\r\n  get disabled() {\r\n    return this._disabled();\r\n  }\r\n\r\n  /**\r\n   * Input para seleccionar el radio button del grupo\r\n   */\r\n  @Input()\r\n  get selected() {\r\n    return this._selected;\r\n  }\r\n  set selected(selected: RadioButtonComponent | null) {\r\n    this._selected = selected;\r\n    this.value = selected ? selected.value : null;\r\n    this.checkSelectedRadioButton();\r\n  }\r\n\r\n  /**\r\n   * Input para asignar el valor del grupo de radio buttons\r\n   */\r\n  @Input()\r\n  get value(): any {\r\n    return this._value;\r\n  }\r\n  set value(newValue: any) {\r\n    if (this._value !== newValue) {\r\n\r\n      this._value = newValue;\r\n\r\n      // Actualizamos el radio button seleccionado a partir del valor\r\n      this.updateSelectedRadioFromValue();\r\n      this.checkSelectedRadioButton();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Evento emitido cuando cambia el estado marcado del grupo de radio buttons.\r\n   * Los eventos `change` solo se emiten cuando el valor cambia debido a la interacción del usuario con\r\n   * el radio button (el mismo comportamiento que `<input type=\"radio\">`).\r\n   */\r\n  @Output() readonly change: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  _title: WritableSignal<string> = signal('');\r\n  private _selected: RadioButtonComponent | null = null;\r\n  private _disabled: WritableSignal<boolean> = signal(false);\r\n  private _value: any = null;\r\n  private _inputSize: InputSize = 'm';\r\n  private _name: WritableSignal<string> = signal('');\r\n\r\n  constructor(\r\n    private readonly _inputsUtilsService: InputsUtilsService\r\n  ) { }\r\n\r\n  ngAfterViewInit(): void {\r\n\r\n    this.createTitle();\r\n\r\n    if (!this._name()) {\r\n      this._name.set(this._inputsUtilsService.createUniqueId(this.label || 'neo_group_radio'));\r\n      this.updateRadioButtonsName();\r\n    }\r\n\r\n  }\r\n\r\n  createTitle() {\r\n    this._title.set(this.label?.replace(/(<([^>]+)>)/gi, \"\") || '');\r\n  }\r\n\r\n  /**\r\n   * Actualiza el radio button seleccionado\r\n   */\r\n  private checkSelectedRadioButton() {\r\n    if (this._selected && !this._selected.checked) {\r\n      this._selected.checked = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Actualiza el radio button seleccionado a partir del valor\r\n   */\r\n  private updateSelectedRadioFromValue(): void {\r\n\r\n    // Si el valor es null, no seleccionamos ningún radio button\r\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\r\n\r\n    // Si hay un radio button seleccionado y no es el mismo que el valor, lo deseleccionamos\r\n    if (this.radioButtons && !isAlreadySelected) {\r\n      this._selected = null;\r\n      this.radioButtons.forEach(radio => {\r\n        radio.checked = this.value === radio.value;\r\n        if (radio.checked) {\r\n          this._selected = radio;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Actualiza el inputSize de cada radio button del grupo\r\n   */\r\n  private updateInputSizeRadioButtons(): void {\r\n    if (!this.radioButtons) return;\r\n    this.radioButtons.forEach(radioButton => radioButton.inputSize = this._inputSize || 'm');\r\n  }\r\n\r\n  /**\r\n   * Actualiza el nombre de cada radio button del grupo\r\n   */\r\n  private updateRadioButtonsName(): void {\r\n    if (!this.radioButtons) return;\r\n    this.radioButtons.forEach(radioButton => radioButton.name = this._name());\r\n  }\r\n\r\n  /**\r\n   * Función para deshabilitar cada radio button del grupo\r\n   */\r\n  private disableRadioButtons(): void {\r\n    if (!this.radioButtons) return;\r\n    this.radioButtons.forEach(radioButton => radioButton.disabled = this._disabled());\r\n  }\r\n\r\n  /**\r\n   * Función para emitir el evento de cambio del grupo de radio buttons con el valor actual\r\n   */\r\n  emitChangeEvent(): void {\r\n    this.change.emit(this._value);\r\n  }\r\n\r\n  onChange: any = () => { };\r\n  onTouched: any = () => { };\r\n\r\n  writeValue(value: string | number | boolean) {\r\n    this.value = value;\r\n  }\r\n\r\n  registerOnChange(fn: Function): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: Function): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  changeValue(value: string | number | boolean) {\r\n    this.onChange(value);\r\n    this.onTouched();\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean) {\r\n    this._disabled.set(isDisabled);\r\n  }\r\n\r\n}\r\n",
      "styleUrl": "./radio-button-group.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_inputsUtilsService",
            "type": "InputsUtilsService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 148,
        "jsdoctags": [
          {
            "name": "_inputsUtilsService",
            "type": "InputsUtilsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "implements": ["ControlValueAccessor"],
      "accessors": {
        "inputSize": {
          "name": "inputSize",
          "setSignature": {
            "name": "inputSize",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "InputSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 69,
            "jsdoctags": [
              {
                "name": "value",
                "type": "InputSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "inputSize",
            "type": "",
            "returnType": "",
            "line": 66,
            "rawdescription": "\n\nInput para asignar el tamaño del grupo de radio buttons\n",
            "description": "<p>Input para asignar el tamaño del grupo de radio buttons</p>\n"
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 84,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "",
            "returnType": "",
            "line": 81,
            "rawdescription": "\n\nInput para asignar el nombre del grupo de radio buttons\n",
            "description": "<p>Input para asignar el nombre del grupo de radio buttons</p>\n"
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "status",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 95,
            "rawdescription": "\n\nInput para deshabilitar el grupo de radio buttons\n",
            "description": "<p>Input para deshabilitar el grupo de radio buttons</p>\n",
            "jsdoctags": [
              {
                "name": "status",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "",
            "returnType": "",
            "line": 101
          }
        },
        "selected": {
          "name": "selected",
          "setSignature": {
            "name": "selected",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "selected",
                "type": "RadioButtonComponent | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 112,
            "jsdoctags": [
              {
                "name": "selected",
                "type": "RadioButtonComponent | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "selected",
            "type": "",
            "returnType": "",
            "line": 109,
            "rawdescription": "\n\nInput para seleccionar el radio button del grupo\n",
            "description": "<p>Input para seleccionar el radio button del grupo</p>\n"
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "newValue",
                "type": "any",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 125,
            "jsdoctags": [
              {
                "name": "newValue",
                "type": "any",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "any",
            "returnType": "any",
            "line": 122,
            "rawdescription": "\n\nInput para asignar el valor del grupo de radio buttons\n",
            "description": "<p>Input para asignar el valor del grupo de radio buttons</p>\n"
          }
        }
      },
      "templateData": "<div class=\"neo-radio-button-group\" [title]=\"_title()\">\r\n  @if (label && !hideLabel) {\r\n    <label class=\"neo-radio-button-group__label\">\r\n      <span [innerHtml]=\"label\"></span>\r\n    </label>\r\n  }\r\n  <div class=\"neo-radio-button-group__items {{ direction }}\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n</div>\r\n"
    },
    {
      "name": "SectionTitleComponent",
      "id": "component-SectionTitleComponent-6fe98fe259d04f843c52f4abb5106dae3bd6f3ed9f33e4034b94c59ae0526f05dac3c29e39b438f96cc99f8cda808bb91f22afa394e3807f60643d0ff63ecf2b",
      "file": "src/app/shared/components/section-title/section-title.component.ts",
      "encapsulation": ["ViewEncapsulation.None"],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-section-title",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./section-title.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "hideLine",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "icon",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "string",
          "decorators": []
        },
        {
          "name": "iconNoColor",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "iconPosition",
          "defaultValue": "'left'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "IconPosition",
          "decorators": []
        },
        {
          "name": "iconSize",
          "defaultValue": "'0.85rem'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "string",
          "decorators": []
        },
        {
          "name": "title",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { IconPosition } from './models/section-title.entity';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'neo-section-title',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './section-title.component.html',\r\n  styleUrl: './section-title.component.scss',\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class SectionTitleComponent {\r\n\r\n  @Input() title: string = '';\r\n  @Input() icon: string = '';\r\n  @Input() iconPosition: IconPosition = 'left';\r\n  @Input() iconSize: string = '0.85rem';\r\n  @Input() iconNoColor: boolean = false;\r\n  @Input() hideLine: boolean = false;\r\n\r\n}\r\n",
      "styleUrl": "./section-title.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "templateData": "<div class=\"section-title\" [class.section-title--no-line]=\"hideLine\" [class.section-title--icon-no-color]=\"iconNoColor\">\r\n  @if (icon && iconPosition === 'left') {\r\n    <i [class]=\"icon\" [ngStyle]=\"{'font-size': iconSize}\"></i>\r\n  }\r\n  <h4>{{ title }}</h4>\r\n  @if (icon && iconPosition === 'right') {\r\n    <i [class]=\"icon\" [ngStyle]=\"{'font-size': iconSize}\"></i>\r\n  }\r\n</div>\r\n"
    },
    {
      "name": "SelectComponent",
      "id": "component-SelectComponent-a1f17b605bd45614c773ec289efe1b18c47cdb476f9849a902a20f90e790a48bc00306a3402385e641cbd898941bf37e3853ba8adefbce4656960796a68d0dbc",
      "file": "src/app/shared/components/form-fields/select/select.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SelectComponent), multi: true\n}",
          "type": "component"
        }
      ],
      "selector": "neo-select",
      "styleUrls": [
        "./select.component.scss",
        "./../form-fields-settings.scss"
      ],
      "styles": [],
      "templateUrl": ["./select.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "classes",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "Array<string>",
          "decorators": []
        },
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput para marcar el campo como deshabilitado\n",
          "description": "<p>Input para marcar el campo como deshabilitado</p>\n",
          "line": 45,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "string",
          "decorators": []
        },
        {
          "name": "inputSize",
          "defaultValue": "'m'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 38,
          "type": "InputSize",
          "decorators": []
        },
        {
          "name": "label",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "string",
          "decorators": []
        },
        {
          "name": "multiple",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "placeholder",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "string",
          "decorators": []
        },
        {
          "name": "required",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "search",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "title",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "string",
          "decorators": []
        },
        {
          "name": "transparent",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "new EventEmitter<any>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_disabled",
          "defaultValue": "signal(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<boolean>",
          "optional": false,
          "description": "",
          "line": 59
        },
        {
          "name": "_hasErrors",
          "defaultValue": "signal(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<boolean>",
          "optional": false,
          "description": "",
          "line": 40
        },
        {
          "name": "hasErrors",
          "defaultValue": "input<boolean>(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "InputSignal<boolean>",
          "optional": false,
          "description": "",
          "line": 39
        },
        {
          "name": "isDropdownOpened",
          "defaultValue": "signal(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<boolean>",
          "optional": false,
          "description": "",
          "line": 61
        },
        {
          "name": "itemsOption",
          "defaultValue": "[] as unknown as QueryList<ElementRef>",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "QueryList<ElementRef>",
          "optional": false,
          "description": "",
          "line": 56,
          "decorators": [
            {
              "name": "ViewChildren",
              "stringifiedArguments": "'itemOption'"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "onChange",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 217
        },
        {
          "name": "onTouched",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 218
        },
        {
          "name": "options",
          "defaultValue": "null as unknown as QueryList<OptionsComponent>",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "QueryList<OptionsComponent>",
          "optional": false,
          "description": "",
          "line": 57,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "OptionsComponent"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "optionSelected",
          "defaultValue": "signal(null)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<any>",
          "optional": false,
          "description": "",
          "line": 63
        },
        {
          "name": "optionsFiltered",
          "defaultValue": "signal([] as OptionsComponent[])",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<OptionsComponent[]>",
          "optional": false,
          "description": "",
          "line": 62
        },
        {
          "name": "optionsSelected",
          "defaultValue": "signal([])",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<OptionsComponent[]>",
          "optional": false,
          "description": "",
          "line": 64
        },
        {
          "name": "optionsSelectedValues",
          "defaultValue": "signal([])",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<any[]>",
          "optional": false,
          "description": "",
          "line": 65
        },
        {
          "name": "scrollStrategy",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ScrollStrategy",
          "optional": false,
          "description": "",
          "line": 66
        },
        {
          "name": "searchInput",
          "defaultValue": "null as unknown as ElementRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 55,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'searchInput'"
            }
          ],
          "modifierKind": [170]
        }
      ],
      "methodsClass": [
        {
          "name": "changeOption",
          "args": [
            {
              "name": "optionItem",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 166,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "optionItem",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "checkErrors",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 118,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para comprobar si hay errores en el campo y mostrarlos\n",
          "description": "<p>Método para comprobar si hay errores en el campo y mostrarlos</p>\n"
        },
        {
          "name": "closeDropdown",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 110,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para cerrar el selector si está abierto\n",
          "description": "<p>Método para cerrar el selector si está abierto</p>\n"
        },
        {
          "name": "findSetOption",
          "args": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 247,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 74,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "registerOnChange",
          "args": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 282,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnTouched",
          "args": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 286,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "scrollToOptionSelected",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 157,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para mover el scroll a la opción seleccionada\n",
          "description": "<p>Método para mover el scroll a la opción seleccionada</p>\n"
        },
        {
          "name": "searchOption",
          "args": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 129,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para buscar opciones en el selector\n",
          "description": "<p>Método para buscar opciones en el selector</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 4852,
                "end": 4857,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "value"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 4837,
                "end": 4842,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 4843,
                "end": 4851,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 4844,
                  "end": 4850,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 154
                }
              }
            }
          ]
        },
        {
          "name": "setDisabledState",
          "args": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 290,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setFocusToSearch",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 149,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para establecer el foco en el input de búsqueda\n",
          "description": "<p>Método para establecer el foco en el input de búsqueda</p>\n"
        },
        {
          "name": "toggleDropdown",
          "args": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 88,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para abrir / cerrar el selector\n",
          "description": "<p>Método para abrir / cerrar el selector</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 3651,
                "end": 3656,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "event"
              },
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3637,
                "end": 3642,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 3643,
                "end": 3650,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 3644,
                  "end": 3649,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 3644,
                    "end": 3649,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "Event"
                  }
                }
              }
            }
          ]
        },
        {
          "name": "unselectOptions",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 212,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "writeValue",
          "args": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 220,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "<p>neo-select\nComponente para crear un campo de selección junto con el componente <code>neo-options</code>.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;neo-select [label]=&quot;&#39;Label&#39;&quot; [title]=&quot;&#39;Title&#39;&quot; [id]=&quot;&#39;id&#39;&quot; [multiple]=&quot;false&quot; [transparent]=&quot;false&quot; [customOptions]=&quot;false&quot; [cssClass]=&quot;&#39;css-class&#39;&quot; [placeholder]=&quot;&#39;Placeholder&#39;&quot; [inputSize]=&quot;&#39;m&#39;&quot; (change)=&quot;change($event)&quot;&gt;&lt;/neo-select&gt;</code></pre></div>",
      "rawdescription": "\n\nneo-select\nComponente para crear un campo de selección junto con el componente `neo-options`.\n```html\n<neo-select [label]=\"'Label'\" [title]=\"'Title'\" [id]=\"'id'\" [multiple]=\"false\" [transparent]=\"false\" [customOptions]=\"false\" [cssClass]=\"'css-class'\" [placeholder]=\"'Placeholder'\" [inputSize]=\"'m'\" (change)=\"change($event)\"></neo-select>\n```",
      "type": "component",
      "sourceCode": "import { ScrollStrategy, ScrollStrategyOptions } from '@angular/cdk/overlay';\r\nimport { ElementRef, EventEmitter, InputSignal, Output, ViewChild, ViewChildren, WritableSignal, input, signal } from '@angular/core';\r\nimport { Component, ContentChildren, forwardRef, Input, QueryList } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { OptionsComponent } from './options/options.component';\r\nimport { InputSize } from '../models/form-field.entity';\r\n\r\n/**\r\n * @name\r\n * neo-select\r\n * @description\r\n * Componente para crear un campo de selección junto con el componente `neo-options`.\r\n * @example\r\n * <neo-select [label]=\"'Label'\" [title]=\"'Title'\" [id]=\"'id'\" [multiple]=\"false\" [transparent]=\"false\" [customOptions]=\"false\" [cssClass]=\"'css-class'\" [placeholder]=\"'Placeholder'\" [inputSize]=\"'m'\" (change)=\"change($event)\"></neo-select>\r\n */\r\n@Component({\r\n  selector: 'neo-select',\r\n  templateUrl: './select.component.html',\r\n  styleUrls: ['./select.component.scss', './../form-fields-settings.scss'],\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => SelectComponent),\r\n    multi: true\r\n  }]\r\n})\r\n\r\nexport class SelectComponent implements ControlValueAccessor {\r\n\r\n  @Input() label?: string = '';\r\n  @Input() title?: string = '';\r\n  @Input() required?: boolean = false;\r\n  @Input() id?: string;\r\n  @Input() multiple?: boolean = false;\r\n  @Input() transparent?: boolean = false;\r\n  @Input() search?: boolean = false;\r\n  @Input() classes?: Array<string> = [];\r\n  @Input() placeholder?: string;\r\n  @Input() inputSize: InputSize = 'm';\r\n  hasErrors: InputSignal<boolean> = input<boolean>(false);\r\n  _hasErrors: WritableSignal<boolean> = signal(false);\r\n\r\n  /**\r\n  * Input para marcar el campo como deshabilitado\r\n  */\r\n  @Input() set disabled(status: boolean) {\r\n    this._disabled.set(status);\r\n  }\r\n\r\n  get disabled() {\r\n    return this._disabled();\r\n  }\r\n\r\n  @Output() change = new EventEmitter<any>();\r\n\r\n  @ViewChild('searchInput') searchInput: ElementRef = null as unknown as ElementRef;\r\n  @ViewChildren('itemOption') itemsOption: QueryList<ElementRef> = [] as unknown as QueryList<ElementRef>;\r\n  @ContentChildren(OptionsComponent) options: QueryList<OptionsComponent> = null as unknown as QueryList<OptionsComponent>;\r\n\r\n  _disabled: WritableSignal<boolean> = signal(false);\r\n\r\n  isDropdownOpened: WritableSignal<boolean> = signal(false);\r\n  optionsFiltered: WritableSignal<OptionsComponent[]> = signal([] as OptionsComponent[]); // Se utilizará para almacenar las opciones filtradas por el input de búsqueda\r\n  optionSelected: WritableSignal<any> = signal(null); // // Se utilizará para almecenar un objeto OPTION completo (OptionsComponent)\r\n  optionsSelected: WritableSignal<OptionsComponent[]> = signal([]); // Se utilizará para almecenar el array de objetos OPTION completo (OptionsComponent)\r\n  optionsSelectedValues: WritableSignal<any[]> = signal([]); // Se utilizará para emitir los valores en un array cuando sea múltiple\r\n  scrollStrategy: ScrollStrategy;\r\n\r\n  constructor(\r\n    scrollStrategyOptions: ScrollStrategyOptions\r\n  ) {\r\n    this.scrollStrategy = scrollStrategyOptions.close();\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n\r\n    // Si alguno ha sido marcado como \"true\" usando su input, notificamos al selector\r\n    const optionSelected: OptionsComponent | null = this.options.find(option => option.selected) || null;\r\n    if (optionSelected)\r\n      this.writeValue(optionSelected?.value || null);\r\n\r\n    this.optionsFiltered.set(this.options.toArray());\r\n  }\r\n\r\n  /**\r\n   * Método para abrir / cerrar el selector\r\n   * @param {Event} event\r\n   */\r\n  toggleDropdown(event: Event) {\r\n\r\n    // Reestablecemos las opciones al abrir el selector por si se ha cerrado con texto de búsqueda\r\n    this.optionsFiltered.set(this.options.toArray());\r\n\r\n    event?.preventDefault();\r\n    event?.stopPropagation();\r\n\r\n    this.isDropdownOpened.set(!this.isDropdownOpened());\r\n\r\n    // Si el campo está abierto y tiene búsqueda, enfocamos el input\r\n    // --\r\n    // Si no, movemos el scroll a la opción seleccionada\r\n    if (this.isDropdownOpened() && this.search)\r\n      this.setFocusToSearch();\r\n    else\r\n      this.scrollToOptionSelected();\r\n  }\r\n\r\n  /**\r\n   * Método para cerrar el selector si está abierto\r\n   */\r\n  closeDropdown() {\r\n    if (this.isDropdownOpened())\r\n      this.isDropdownOpened.set(false);\r\n  }\r\n\r\n  /**\r\n   * Método para comprobar si hay errores en el campo y mostrarlos\r\n   */\r\n  checkErrors() {\r\n    if (this.required && !this.isDropdownOpened() && ((!this.multiple && !this.optionSelected()) || (this.multiple && this.optionsSelected().length === 0))) {\r\n      this._hasErrors.set(true);\r\n    } else\r\n      this._hasErrors.set(false);\r\n  }\r\n\r\n  /**\r\n   * Método para buscar opciones en el selector\r\n   * @param {string} value\r\n   */\r\n  searchOption(value: string) {\r\n\r\n    // Normalizamos el texto para que no haya problemas con las tildes\r\n    const textToSearchNormalized = String(value).normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\r\n\r\n    // Si el texto está vacío, mostramos todas las opciones\r\n    if (textToSearchNormalized === '') return this.optionsFiltered.set(this.options.toArray());\r\n\r\n    // Si no, filtramos las opciones que contengan el texto buscado\r\n    const optionsFiltereds = this.options.filter((option: OptionsComponent) => {\r\n      const labelNormalized: string = String(option.label).normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\r\n      return labelNormalized.includes(textToSearchNormalized);\r\n    });\r\n    this.optionsFiltered.set(optionsFiltereds);\r\n\r\n  }\r\n\r\n  /**\r\n   * Método para establecer el foco en el input de búsqueda\r\n   */\r\n  setFocusToSearch() {\r\n    if (this.search)\r\n      setTimeout(() => this.searchInput.nativeElement.focus(), 0);\r\n  }\r\n\r\n  /**\r\n   * Método para mover el scroll a la opción seleccionada\r\n   */\r\n  scrollToOptionSelected() {\r\n    setTimeout(() => {\r\n      if (this.isDropdownOpened() && !this.search && this.optionSelected() && this.itemsOption?.length > 0) {\r\n        let elementSelected: ElementRef | undefined = this.itemsOption?.find(element => element.nativeElement.classList.contains('selected')) || undefined;\r\n        elementSelected?.nativeElement?.scrollIntoView();\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  changeOption(optionItem: any) {\r\n\r\n    if (optionItem && !optionItem?.disabled) {\r\n      if (this.multiple) {\r\n\r\n        // Si ya estaba marcado, la borramos\r\n        // --\r\n        // Si no, la añadimos al array\r\n        if (optionItem.selected) {\r\n          optionItem.selected = false;\r\n          const index: number = this.optionsSelected().indexOf(optionItem);\r\n          const indexValues: number = this.optionsSelectedValues().indexOf(optionItem.value);\r\n          if (index !== -1) {\r\n            this.optionsSelected.update(options => options.filter((_, idx) => index !== idx));\r\n            this.optionsSelectedValues.update(options => options.filter((_, idx) => indexValues !== idx));\r\n          }\r\n        } else {\r\n          optionItem.selected = true;\r\n          this.optionsSelected.update(options => ([...options, optionItem]));\r\n          this.optionsSelectedValues.update(options => ([...options, optionItem.value]));\r\n        }\r\n\r\n        this.change.emit(this.optionsSelectedValues);\r\n        this.onChange(this.optionsSelectedValues);\r\n        this.onTouched();\r\n\r\n      } else {\r\n\r\n        // Desmarcamos todas las opciones que estén seleccionadas\r\n        this.unselectOptions();\r\n\r\n        // Reinitializamos la búsqueda\r\n        this.searchOption('');\r\n\r\n        // Marcamos la actual\r\n        optionItem.selected = true;\r\n\r\n        this.optionSelected.set(optionItem);\r\n        this.change.emit(optionItem.value);\r\n        this.onChange(optionItem.value);\r\n        this.onTouched();\r\n        this.closeDropdown();\r\n      }\r\n    }\r\n  }\r\n\r\n  unselectOptions() {\r\n    this.options?.forEach((option) => option.selected = false);\r\n  }\r\n\r\n  // Funciones de control de eventos\r\n  onChange: any = () => { };\r\n  onTouched: any = () => { };\r\n\r\n  writeValue(value: any) {\r\n    if (this.options) {\r\n\r\n      // Si es de selector múltiple, al pasar los valores iniciales\r\n      // comprobamos si viene un array o datos normales.\r\n      // --\r\n      // Si no es multiple, marcamos solo el valor\r\n      if (this.multiple) {\r\n\r\n        if (value) {\r\n          if (value instanceof Array) {\r\n            value.forEach(element => this.findSetOption(element));\r\n          } else {\r\n            this.findSetOption(value);\r\n          }\r\n        } else {\r\n          this.optionSelected.set(null);\r\n          this.unselectOptions();\r\n        }\r\n\r\n      } else {\r\n        this.findSetOption(value);\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  findSetOption(value: any) {\r\n\r\n    let isResetOptionSelected: boolean = false;\r\n\r\n    if (value === null || value === undefined || value === '') {\r\n      this.optionSelected.set(null);\r\n      this.optionsSelected.set([]);\r\n      this.optionsSelectedValues.set([]);\r\n      isResetOptionSelected = true;\r\n    }\r\n\r\n    if ((this.multiple && (this.optionsSelectedValues().indexOf(value) === -1 || this.optionsSelected().indexOf(value) === -1)) || !this.multiple) {\r\n\r\n      this.options?.forEach(option => {\r\n\r\n        option.selected = false;\r\n\r\n        // Comparamos si el option del listado y el valor son iguales\r\n        if (!isResetOptionSelected && JSON.stringify(option.value) === JSON.stringify(value)) {\r\n\r\n          option.selected = true;\r\n\r\n          if (this.multiple) {\r\n            this.optionsSelected.update(options => ([...options, option]));\r\n            this.optionsSelectedValues.update(options => ([...options, option.value]));\r\n          } else {\r\n            this.optionSelected.set(option);\r\n          }\r\n        }\r\n      });\r\n\r\n    }\r\n\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this._disabled.set(isDisabled);\r\n  }\r\n\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import 'base';\r\n\r\n:host {\r\n  display: block;\r\n  width: 100%;\r\n}\r\n\r\n.neo-select {\r\n  position: relative;\r\n\r\n  &--disabled {\r\n    cursor: not-allowed;\r\n    pointer-events: none;\r\n  }\r\n\r\n  &__label {\r\n    &--required {\r\n      &::after {\r\n        content: '*';\r\n        color: var(--danger-color);\r\n      }\r\n    }\r\n  }\r\n\r\n  &__field {\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    border-radius: 5px;\r\n    font-weight: 500;\r\n    box-sizing: border-box;\r\n    padding: 10px 10px;\r\n    cursor: pointer;\r\n    flex-direction: row;\r\n    display: flex;\r\n    position: relative;\r\n    gap: 5px;\r\n\r\n    &--disabled {\r\n      cursor: not-allowed;\r\n    }\r\n\r\n    &--has-error {\r\n      border: 1px solid var(--danger-color);\r\n    }\r\n\r\n    &--transparent {\r\n      background-color: transparent !important;\r\n    }\r\n\r\n    &__arrow-dropdown {\r\n      position: absolute;\r\n      right: 5px;\r\n\r\n      &.open {\r\n        transform: rotate(180deg);\r\n        transition: transform 150ms ease;\r\n      }\r\n\r\n      &:not(.open) {\r\n        transform: rotate(0deg);\r\n        transition: transform 150ms ease;\r\n      }\r\n\r\n      &:before {\r\n        color: var(--icon-field-color);\r\n      }\r\n    }\r\n\r\n    &__value {\r\n      display: block;\r\n      width: 100%;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n      line-height: normal;\r\n\r\n      &__label {\r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  &__dropdown {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    &__search {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      padding: 0 5px;\r\n      margin-top: 10px;\r\n      position: relative;\r\n\r\n      &__input {\r\n        height: 35px;\r\n        font-size: 12px;\r\n        width: 100%;\r\n        border-radius: 5px;\r\n        border: none;\r\n        box-sizing: border-box;\r\n        padding: 10px;\r\n      }\r\n\r\n      &__icon {\r\n        position: absolute;\r\n        right: 20px;\r\n        cursor: default;\r\n\r\n        &:before {\r\n          color: var(--icon-field-color);\r\n        }\r\n      }\r\n    }\r\n\r\n    &__options {\r\n      max-height: 150px;\r\n      overflow: auto;\r\n      padding: 5px;\r\n      scrollbar-width: thin !important;\r\n      scrollbar-color: var(--bg-scroll-color) var(--bg-field-color) !important;\r\n\r\n      &__item {\r\n        padding: 10px;\r\n        cursor: pointer;\r\n        font-size: 12px;\r\n        line-height: 15px;\r\n        letter-spacing: 0.3px;\r\n        display: flex;\r\n        align-items: center;\r\n        align-content: center;\r\n        margin: 3px 0px;\r\n\r\n        &__label {\r\n          white-space: nowrap;\r\n          overflow: hidden;\r\n          text-overflow: ellipsis;\r\n          width: 100%;\r\n        }\r\n\r\n        &--selected {\r\n          font-weight: 500;\r\n          border-radius: 5px;\r\n          gap: 5px;\r\n        }\r\n\r\n        &--disabled {\r\n          filter: opacity(0.3) !important;\r\n        }\r\n\r\n        &:hover,\r\n        &:focus,\r\n        &:hover:has(:focus) {\r\n          border-radius: 5px;\r\n        }\r\n\r\n        &:focus:not(.selected) {\r\n          background-color: transparent !important;\r\n        }\r\n\r\n        &:last-child {\r\n          border-bottom: none;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
          "styleUrl": "./select.component.scss"
        },
        {
          "data": ".neo-input,\r\n.neo-input-password,\r\n.neo-input-date-picker,\r\n.neo-textarea,\r\n.neo-select {\r\n  &__label {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    margin-bottom: 5px;\r\n    gap: 5px;\r\n  }\r\n}\r\n\r\n.neo-select__field,\r\n.neo-input__wrapper__field,\r\n.neo-input-password__wrapper__field,\r\n.neo-input-date-picker__wrapper__field,\r\n.neo-checkbox__control,\r\n.neo-checkbox__control__label,\r\n.neo-radiobutton__control,\r\n.neo-radiobutton__control__label {\r\n\r\n  &.size-xs {\r\n    font-size: 0.6rem;\r\n    line-height: 0.6rem;\r\n  }\r\n\r\n  &.size-s {\r\n    font-size: 0.7rem;\r\n    line-height: 0.7rem;\r\n  }\r\n\r\n  &.size-xm {\r\n    font-size: 0.75rem;\r\n    line-height: 0.75rem;\r\n  }\r\n\r\n  &.size-m {\r\n    font-size: 0.8rem;\r\n    line-height: 0.8rem;\r\n  }\r\n\r\n  &.size-l {\r\n    font-size: 0.85rem;\r\n    line-height: 0.85rem;\r\n  }\r\n\r\n  &.size-xl {\r\n    font-size: 0.9rem;\r\n    line-height: 0.9rem;\r\n  }\r\n}\r\n\r\n.neo-select__field,\r\n.neo-input__wrapper__field,\r\n.neo-input-password__wrapper__field,\r\n.neo-input-date-picker__wrapper__field,\r\n.neo-checkbox__control,\r\n.neo-radiobutton__control {\r\n  &.size-xs {\r\n    height: 25px;\r\n  }\r\n\r\n  &.size-s {\r\n    height: 28px;\r\n  }\r\n\r\n  &.size-xm {\r\n    height: 32px;\r\n  }\r\n\r\n  &.size-m {\r\n    height: 35px;\r\n  }\r\n\r\n  &.size-l {\r\n    height: 40px;\r\n  }\r\n\r\n  &.size-xl {\r\n    height: 45px;\r\n  }\r\n}\r\n\r\n.neo-checkbox__control,\r\n.neo-radiobutton__control {\r\n\r\n  &.size-xs &__checkmark,\r\n  &.size-s &__checkmark {\r\n    height: 10px;\r\n    width: 10px;\r\n\r\n    &::after {\r\n      border-width: 4px;\r\n    }\r\n  }\r\n\r\n  &.size-xm &__checkmark {\r\n    height: 14px;\r\n    width: 14px;\r\n\r\n    &::after {\r\n      border-width: 4px;\r\n    }\r\n  }\r\n\r\n  &.size-m &__checkmark {\r\n    height: 18px;\r\n    width: 18px;\r\n\r\n    &::after {\r\n      border-width: 5px;\r\n    }\r\n  }\r\n\r\n  &.size-l &__checkmark {\r\n    height: 22px;\r\n    width: 22px;\r\n\r\n    &::after {\r\n      border-width: 6px;\r\n    }\r\n  }\r\n\r\n  &.size-xl &__checkmark {\r\n    height: 26px;\r\n    width: 26px;\r\n\r\n    &::after {\r\n      border-width: 8px;\r\n    }\r\n  }\r\n}\r\n",
          "styleUrl": "./../form-fields-settings.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "scrollStrategyOptions",
            "type": "ScrollStrategyOptions",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 66,
        "jsdoctags": [
          {
            "name": "scrollStrategyOptions",
            "type": "ScrollStrategyOptions",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "implements": ["ControlValueAccessor"],
      "accessors": {
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "status",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 45,
            "rawdescription": "\n\nInput para marcar el campo como deshabilitado\n",
            "description": "<p>Input para marcar el campo como deshabilitado</p>\n",
            "jsdoctags": [
              {
                "name": "status",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "",
            "returnType": "",
            "line": 49
          }
        }
      },
      "templateData": "<div class=\"neo-select\">\r\n  @if (label !== \"\" && label !== undefined && label !== null) {\r\n    <label\r\n      (click)=\"toggleDropdown($event)\"\r\n      class=\"neo-select__label\"\r\n      [class.neo-select__label--required]=\"required\"\r\n    >\r\n      <span [innerHtml]=\"label\"></span>\r\n    </label>\r\n  }\r\n\r\n  @if (!_disabled() && options && options.length > 0) {\r\n    <div\r\n      #selectField\r\n      class=\"neo-select__field size-{{ inputSize }}\"\r\n      [title]=\"title || label\"\r\n      [ngClass]=\"classes\"\r\n      [class.transparent]=\"transparent\"\r\n      [class.neo-select__field--has-error]=\"\r\n        hasErrors() || _hasErrors() || false\r\n      \"\r\n      (click)=\"toggleDropdown($event)\"\r\n      clickable\r\n      (focusout)=\"checkErrors()\"\r\n      cdkOverlayOrigin\r\n      #selectDropdown=\"cdkOverlayOrigin\"\r\n      [attr.id]=\"id\"\r\n      [attr.aria-labelledby]=\"id\"\r\n    >\r\n      <div class=\"neo-select__field__value\">\r\n        @if (!multiple && optionSelected()) {\r\n          <span\r\n            class=\"neo-select__field__value__label\"\r\n            [innerHTML]=\"optionSelected().label | safeHtml\"\r\n          ></span>\r\n        }\r\n        @if (multiple && optionsSelected().length > 0) {\r\n          <span\r\n            class=\"neo-select__field__value__label\"\r\n            [innerHTML]=\"\r\n              optionsSelected().length === 1\r\n                ? (optionsSelected()[0].label | safeHtml)\r\n                : optionsSelected().length +\r\n                  ' ' +\r\n                  ('DROPDOWN.MULTIPLE_CHOICES' | translate)\r\n            \"\r\n          ></span>\r\n        }\r\n        @if (\r\n          (!multiple && !optionSelected()) ||\r\n          (multiple && optionsSelected().length === 0)\r\n        ) {\r\n          <span class=\"neo-select__field__value__label\">{{\r\n            placeholder || \"DROPDOWN.SELECT_OPTION\" | translate\r\n          }}</span>\r\n        }\r\n      </div>\r\n      <i\r\n        class=\"ri-arrow-down-s-line neo-select__field__arrow-dropdown\"\r\n        [ngClass]=\"{ open: isDropdownOpened() }\"\r\n      ></i>\r\n    </div>\r\n\r\n    <ng-template\r\n      cdkConnectedOverlay\r\n      [cdkConnectedOverlayOrigin]=\"selectDropdown\"\r\n      [cdkConnectedOverlayOpen]=\"isDropdownOpened()\"\r\n      [cdkConnectedOverlayScrollStrategy]=\"scrollStrategy\"\r\n      cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\r\n      [cdkConnectedOverlayHasBackdrop]=\"true\"\r\n      (detach)=\"closeDropdown()\"\r\n      (backdropClick)=\"closeDropdown()\"\r\n    >\r\n      <div class=\"neo-select__dropdown\">\r\n        @if (search) {\r\n          <div class=\"neo-select__dropdown__search\">\r\n            <input\r\n              #searchInput\r\n              class=\"neo-select__dropdown__search__input\"\r\n              type=\"text\"\r\n              [placeholder]=\"'APP.SEARCH' | translate\"\r\n              (input)=\"searchOption(searchInput.value)\"\r\n            />\r\n            <i\r\n              class=\"ri-search-line neo-select__dropdown__search__icon\"\r\n            ></i>\r\n          </div>\r\n        }\r\n        <div\r\n          class=\"neo-select__dropdown__options\"\r\n          [cdkTrapFocus]=\"!search\"\r\n          [cdkTrapFocusAutoCapture]=\"!search\"\r\n          [ngStyle]=\"{ 'min-width': selectField.offsetWidth + 'px' }\"\r\n        >\r\n          <!-- LISTADO DE OPTIONS -->\r\n          @if (isDropdownOpened()) {\r\n            @for (option of optionsFiltered(); track option) {\r\n              <div\r\n                #itemOption\r\n                class=\"neo-select__dropdown__options__item\"\r\n                [class.neo-select__dropdown__options__item--selected]=\"\r\n                  option.selected\r\n                \"\r\n                [class.neo-select__dropdown__options__item--disabled]=\"\r\n                  option.disabled\r\n                \"\r\n                [autofocus]=\"option.selected\"\r\n                (click)=\"changeOption(option)\"\r\n                clickable\r\n                [title]=\"option.label | striphtml\"\r\n              >\r\n                @if (option.selected) {\r\n                  <i class=\"ri-check-line\"></i>\r\n                }\r\n                <span\r\n                  class=\"neo-select__dropdown__options__item__label\"\r\n                  [innerHTML]=\"option.label | safeHtml\"\r\n                ></span>\r\n              </div>\r\n            }\r\n          }\r\n        </div>\r\n      </div>\r\n    </ng-template>\r\n  } @else {\r\n    <!-- SE CARGARÁ SI EL COMPONENTE ESTÁ DESHABILITADO -->\r\n    <div\r\n      [attr.aria-disabled]=\"true\"\r\n      class=\"neo-select__field size-{{ inputSize }}\"\r\n      [class.neo-select__field--disabled]=\"true\"\r\n      [class.neo-select__field--transparent]=\"transparent\"\r\n      [title]=\"title || label\"\r\n      [ngClass]=\"classes\"\r\n      [attr.id]=\"id\"\r\n      [attr.aria-labelledby]=\"id\"\r\n    >\r\n      <div class=\"neo-select__field__value\">\r\n        @if (optionSelected()) {\r\n          <span\r\n            class=\"neo-select__field__value__label\"\r\n            [innerHTML]=\"optionSelected().label | safeHtml\"\r\n          ></span>\r\n        } @else {\r\n          <span class=\"neo-select__field__value__label\">{{\r\n            placeholder || \"DROPDOWN.SELECT_OPTION\" | translate\r\n          }}</span>\r\n        }\r\n      </div>\r\n      <i\r\n        class=\"ri-arrow-down-s-line neo-select__field__arrow-dropdown\"\r\n        [ngClass]=\"{ open: isDropdownOpened() }\"\r\n      ></i>\r\n    </div>\r\n  }\r\n</div>\r\n"
    },
    {
      "name": "SidebarPanelComponent",
      "id": "component-SidebarPanelComponent-34709e0dd7a67fb3c5346cdfc27a40729aef5b0e1685cd9eb6ae6101a7c3c5f8757f78460b9a2af540054ee7180e1bb2eb00926eef987480e93960e8eda283e8",
      "file": "src/app/shared/components/sidebar-panel/sidebar-panel.component.ts",
      "encapsulation": ["ViewEncapsulation.None"],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-sidebar-panel",
      "styleUrls": ["./sidebar-panel.component.scss"],
      "styles": [],
      "templateUrl": ["./sidebar-panel.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "BOTTOM_POSITION",
          "defaultValue": "SidebarbarPanelPosition.BOTTOM",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 36
        },
        {
          "name": "classes",
          "defaultValue": "signal([])",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string[]>",
          "optional": false,
          "description": "",
          "line": 42,
          "modifierKind": [125]
        },
        {
          "name": "isPanelVisible",
          "defaultValue": "signal(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<boolean>",
          "optional": false,
          "description": "",
          "line": 38,
          "modifierKind": [125]
        },
        {
          "name": "LEFT_POSITION",
          "defaultValue": "SidebarbarPanelPosition.LEFT",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 33
        },
        {
          "name": "panelContentRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ViewContainerRef",
          "optional": false,
          "description": "",
          "line": 31,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'content', {read: ViewContainerRef}"
            }
          ],
          "modifierKind": [170, 125]
        },
        {
          "name": "position",
          "defaultValue": "signal(DEFAULT_POSITION)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<SidebarbarPanelPosition>",
          "optional": false,
          "description": "",
          "line": 40,
          "modifierKind": [125]
        },
        {
          "name": "RIGHT_POSITION",
          "defaultValue": "SidebarbarPanelPosition.RIGHT",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 34
        },
        {
          "name": "size",
          "defaultValue": "signal(DEFAULT_SIZE)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<SidebarbarPanelSize>",
          "optional": false,
          "description": "",
          "line": 39,
          "modifierKind": [125]
        },
        {
          "name": "title",
          "defaultValue": "signal('')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string>",
          "optional": false,
          "description": "",
          "line": 41,
          "modifierKind": [125]
        },
        {
          "name": "TOP_POSITION",
          "defaultValue": "SidebarbarPanelPosition.TOP",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 35
        }
      ],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 77,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para cerrar el panel\n",
          "description": "<p>Método para cerrar el panel</p>\n"
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 48,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "setPanelContent",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 84,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para establecer el contenido del panel\n",
          "description": "<p>Método para establecer el contenido del panel</p>\n",
          "modifierKind": [123]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "A11yModule",
          "type": "module"
        },
        {
          "name": "TranslateModule",
          "type": "module"
        },
        {
          "name": "EscapeKeyDirective",
          "type": "directive"
        },
        {
          "name": "CdkScrollable"
        }
      ],
      "description": "<p>neo-sidebar-panel\nComponente para crear un panel lateral mediante el servicio <code>sidebar-panel.service</code></p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;neo-sidebar-panel&gt;&lt;/neo-sidebar-panel&gt;</code></pre></div>",
      "rawdescription": "\n\nneo-sidebar-panel\nComponente para crear un panel lateral mediante el servicio `sidebar-panel.service`\n```html\n<neo-sidebar-panel></neo-sidebar-panel>\n```",
      "type": "component",
      "sourceCode": "import { Component, ComponentRef, OnInit, ViewChild, ViewContainerRef, ViewEncapsulation, WritableSignal, signal } from \"@angular/core\";\r\nimport { DEFAULT_POSITION, DEFAULT_SIZE, SidebarbarPanelEntity, SidebarbarPanelPosition, SidebarbarPanelSize } from \"./models/sidebar-panel.entity\";\r\nimport { SidebarPanelService } from \"./services/sidebar-panel.service\";\r\nimport { A11yModule } from \"@angular/cdk/a11y\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { TranslateModule } from \"@ngx-translate/core\";\r\nimport { EscapeKeyDirective } from \"@shared/directives/escape-key.directive\";\r\nimport { CdkScrollable } from \"@angular/cdk/scrolling\";\r\nimport { FADE_IN_OUT_PANEL } from \"./animations/fade-in-out.animation\";\r\nimport { SLIDE_BY_POSITION } from \"./animations/slide-by-position.animation\";\r\n\r\n/**\r\n * @name\r\n * neo-sidebar-panel\r\n * @description\r\n * Componente para crear un panel lateral mediante el servicio `sidebar-panel.service`\r\n * @example\r\n * <neo-sidebar-panel></neo-sidebar-panel>\r\n */\r\n@Component({\r\n  selector: \"neo-sidebar-panel\",\r\n  templateUrl: \"./sidebar-panel.component.html\",\r\n  styleUrls: [\"./sidebar-panel.component.scss\"],\r\n  animations: [FADE_IN_OUT_PANEL, SLIDE_BY_POSITION],\r\n  standalone: true,\r\n  imports: [CommonModule, A11yModule, TranslateModule, EscapeKeyDirective, CdkScrollable],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class SidebarPanelComponent implements OnInit {\r\n\r\n  @ViewChild(\"content\", { read: ViewContainerRef }) public panelContentRef!: ViewContainerRef;\r\n\r\n  LEFT_POSITION = SidebarbarPanelPosition.LEFT;\r\n  RIGHT_POSITION = SidebarbarPanelPosition.RIGHT;\r\n  TOP_POSITION = SidebarbarPanelPosition.TOP;\r\n  BOTTOM_POSITION = SidebarbarPanelPosition.BOTTOM;\r\n\r\n  public isPanelVisible: WritableSignal<boolean> = signal(false);\r\n  public size: WritableSignal<SidebarbarPanelSize> = signal(DEFAULT_SIZE);\r\n  public position: WritableSignal<SidebarbarPanelPosition> = signal(DEFAULT_POSITION);\r\n  public title: WritableSignal<string> = signal('');\r\n  public classes: WritableSignal<string[]> = signal([]); // Para poder añadir clases extras al panel\r\n\r\n  constructor(\r\n    private _sidebarPanelService: SidebarPanelService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n    /**\r\n     * Escuchamos si el panel es visible o no\r\n     */\r\n    this._sidebarPanelService.isPanelVisible()\r\n      .subscribe(\r\n        (isVisible: boolean) => {\r\n          this.isPanelVisible.set(isVisible);\r\n          if (isVisible)\r\n            this.setPanelContent();\r\n        }\r\n      );\r\n\r\n    /**\r\n     * Escuchamos si el contenido del panel cambia\r\n     */\r\n    this._sidebarPanelService.panelContentChanged()\r\n      .subscribe(\r\n        (data: SidebarbarPanelEntity | null) => {\r\n          if (this.isPanelVisible())\r\n            this.setPanelContent();\r\n        }\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Método para cerrar el panel\r\n   */\r\n  close(): void {\r\n    this._sidebarPanelService.close();\r\n  }\r\n\r\n  /**\r\n   * Método para establecer el contenido del panel\r\n   */\r\n  private setPanelContent() {\r\n\r\n    setTimeout(() => {\r\n\r\n      const content: SidebarbarPanelEntity | null = this._sidebarPanelService.getPanelContent();\r\n\r\n      // Si no hay contenido, limpiamos el panel y salimos\r\n      if (!content || content === null) {\r\n        this.size.set(DEFAULT_SIZE);\r\n        this.position.set(DEFAULT_POSITION);\r\n        this.title.set('');\r\n        this.classes.set([]);\r\n        this.panelContentRef?.clear();\r\n        return;\r\n      }\r\n\r\n      // Establecemos las opciones del sidebar, si es que lleva alguna\r\n      this.size.set(content.size || DEFAULT_SIZE);\r\n      this.position.set(content.position || DEFAULT_POSITION);\r\n      this.title.set(content.title || '');\r\n      this.classes.set(content.classes || []);\r\n\r\n      // Si hay componente asignado, lo mostramos en el panel y aplicamos las opciones que tenga\r\n      if (content?.component) {\r\n\r\n        this.panelContentRef?.clear();\r\n        const componentCreated: ComponentRef<any> = this.panelContentRef?.createComponent(content.component);\r\n        componentCreated.location.nativeElement.classList.add('sidebar-panel__host');\r\n\r\n        if (content?.inputs && content.inputs.length > 0) {\r\n          content?.inputs.forEach((input) => {\r\n            componentCreated.instance[input.name] = input.value;\r\n          });\r\n        }\r\n      }\r\n    }, 0);\r\n\r\n  }\r\n\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import 'base';\r\n\r\n.sidebar-panel {\r\n\r\n  position: fixed;\r\n  overflow: hidden;\r\n  z-index: 10061;\r\n  height: 100vh;\r\n  background-color: var(--background-color);\r\n  box-shadow: var(--shadow-box);\r\n  color: var(--text-color);\r\n\r\n  /* SIGNIFICA QUE HARÁ SLIDE DE DERECHA A IZQUIERDA */\r\n  &--right {\r\n    top: 0;\r\n    right: 0;\r\n    left: auto;\r\n    bottom: auto;\r\n  }\r\n\r\n  /* SIGNIFICA QUE HARÁ SLIDE DE IZQUIERDA A DERECHA */\r\n  &--left {\r\n    top: 0;\r\n    left: 0;\r\n    right: auto;\r\n    bottom: auto;\r\n  }\r\n\r\n  /* SIGNIFICA QUE HARÁ SLIDE DE ABAJO HACIA ARRIBA */\r\n  &--top {\r\n    top: 0;\r\n    left: 0;\r\n    right: auto;\r\n    bottom: auto;\r\n  }\r\n\r\n  /* SIGNIFICA QUE HARÁ SLIDE DE ARRIBA HACIA ABAJO */\r\n  &--bottom {\r\n    bottom: 0;\r\n    left: 0;\r\n    right: auto;\r\n    top: auto;\r\n  }\r\n\r\n  &.size-s {\r\n    width: 35%;\r\n\r\n    @media (max-width: 1024px) {\r\n      width: 50%;\r\n    }\r\n\r\n    @media (min-width: 1440px) {\r\n      width: 25%;\r\n    }\r\n\r\n    @media (max-width: 576px) {\r\n      width: 100%;\r\n    }\r\n  }\r\n\r\n  &.size-m {\r\n    width: 50%;\r\n\r\n    @media (max-width: 1024px) {\r\n      width: 65%;\r\n    }\r\n\r\n    @media (min-width: 1440px) {\r\n      width: 40%;\r\n    }\r\n\r\n    @media (max-width: 576px) {\r\n      width: 100%;\r\n    }\r\n  }\r\n\r\n  &.size-l {\r\n    width: 80%;\r\n\r\n    @media (max-width: 1024px) {\r\n      width: 85%;\r\n    }\r\n\r\n    @media (min-width: 1440px) {\r\n      width: 70%;\r\n    }\r\n\r\n    @media (max-width: 576px) {\r\n      width: 100%;\r\n    }\r\n  }\r\n\r\n  &.size-xl {\r\n    width: 100%;\r\n  }\r\n\r\n  &__header {\r\n    position: absolute;\r\n    width: 100%;\r\n    padding: 20px 25px;\r\n\r\n    &__close {\r\n      cursor: pointer;\r\n      border: none;\r\n      background: transparent;\r\n      font-size: 15px;\r\n    }\r\n\r\n    &__wrapper {\r\n      padding: 0 5px;\r\n      padding-bottom: 0px;\r\n      height: 40px;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      flex-direction: row;\r\n\r\n      h1 {\r\n        margin: 0;\r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n        font-size: 14px;\r\n        font-weight: 600;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: stretch;\r\n        justify-content: center;\r\n      }\r\n    }\r\n  }\r\n\r\n  &__wrapper {\r\n    display: flex;\r\n    align-items: flex-start;\r\n    justify-content: flex-start;\r\n    flex-direction: column;\r\n    padding: 20px 25px;\r\n    height: calc(100% - 45px);\r\n    overflow-y: auto;\r\n    margin-top: 45px;\r\n  }\r\n\r\n  &__overlay {\r\n    position: fixed;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 10060;\r\n    background: rgba(0, 0, 0, 0.3);\r\n    height: 100%;\r\n  }\r\n}\r\n\r\n/* Entramos en las clases de aquel componente que irá dentro del sidebar */\r\n.sidebar-panel {\r\n  &__host {\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n\r\n  &__box {\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n\r\n  &__content {\r\n    height: 100%;\r\n    overflow-y: auto;\r\n    overflow-x: hidden;\r\n    padding: 5px;\r\n  }\r\n\r\n  &__action-buttons {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: flex-end;\r\n    align-items: flex-start;\r\n    height: 40px;\r\n    margin-top: 10px;\r\n    padding: 5px;\r\n    gap: 10px;\r\n  }\r\n}\r\n",
          "styleUrl": "./sidebar-panel.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_sidebarPanelService",
            "type": "SidebarPanelService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 42,
        "jsdoctags": [
          {
            "name": "_sidebarPanelService",
            "type": "SidebarPanelService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "implements": ["OnInit"],
      "templateData": "@if (isPanelVisible()) {\r\n  <aside\r\n    class=\"sidebar-panel size-{{ size() }}\"\r\n    [class.sidebar-panel--left]=\"position() === LEFT_POSITION\"\r\n    [class.sidebar-panel--right]=\"position() === RIGHT_POSITION\"\r\n    [class.sidebar-panel--top]=\"position() === TOP_POSITION\"\r\n    [class.sidebar-panel--bottom]=\"position() === BOTTOM_POSITION\"\r\n    [ngClass]=\"classes() || ''\"\r\n    [cdkTrapFocus]=\"isPanelVisible()\"\r\n    [cdkTrapFocusAutoCapture]=\"isPanelVisible()\"\r\n    [@slideByPosition]=\"position()\"\r\n    (escapeKey)=\"close()\"\r\n  >\r\n    <div class=\"sidebar-panel__header\">\r\n      <div class=\"sidebar-panel__header__wrapper\">\r\n        <h1 [innerHTML]=\"title() || ''\"></h1>\r\n        <button\r\n          class=\"sidebar-panel__header__close\"\r\n          [title]=\"'APP.CLOSE' | translate\"\r\n          [attr.aria-label]=\"'APP.CLOSE' | translate\"\r\n          (click)=\"close()\"\r\n          clickable\r\n          autofocus\r\n        >\r\n          <i class=\"ri-close-fill\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div class=\"sidebar-panel__wrapper\">\r\n      <ng-container #content></ng-container>\r\n    </div>\r\n  </aside>\r\n  <div class=\"sidebar-panel__overlay\" [@fadeInOutPanel] (click)=\"close()\"></div>\r\n}\r\n"
    },
    {
      "name": "SideMenuComponent",
      "id": "component-SideMenuComponent-d66f6d6c7612cdbc7c00931a5de3709ca31aa92914518e544c2f14639a3a1aaf4a2e1a7ff6d2652ab13884a61eae38388101b0b492dcbf480ffc98b40475bdd9",
      "file": "src/app/shared/components/side-menu/side-menu.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-side-menu",
      "styleUrls": ["./side-menu.component.scss"],
      "styles": [],
      "templateUrl": ["./side-menu.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "keepMultipleOpen",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nVariable para mantener abiertos varios elementos desplegables del menú a la vez.\n",
          "description": "<p>Variable para mantener abiertos varios elementos desplegables del menú a la vez.</p>\n",
          "line": 34,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "position",
          "defaultValue": "DEFAULT_MENU_POSITION",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nVariable para establecer la posición del menú lateral de la aplicación. Por defecto es `SideMenuPosition.LEFT`.\n",
          "description": "<p>Variable para establecer la posición del menú lateral de la aplicación. Por defecto es <code>SideMenuPosition.LEFT</code>.</p>\n",
          "line": 39,
          "type": "SideMenuPosition",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "isMenuOpened",
          "defaultValue": "signal(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Signal<boolean>",
          "optional": false,
          "description": "",
          "line": 42
        },
        {
          "name": "LEFT_MENU_POSITION",
          "defaultValue": "SideMenuPosition.LEFT",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 28
        },
        {
          "name": "menu",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MenuEntity[]",
          "optional": false,
          "description": "",
          "line": 41
        },
        {
          "name": "RIGHT_MENU_POSITION",
          "defaultValue": "SideMenuPosition.RIGHT",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 29
        }
      ],
      "methodsClass": [
        {
          "name": "closeSideMenu",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 74,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para cerrar el menú lateral de la aplicación.\n",
          "description": "<p>Método para cerrar el menú lateral de la aplicación.</p>\n"
        },
        {
          "name": "getMenu",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 60,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para obtener el menú de la aplicación y guardarlo en la variable `menu`.\nEste método se ejecuta al inicializar el componente.\n",
          "description": "<p>Método para obtener el menú de la aplicación y guardarlo en la variable <code>menu</code>.\nEste método se ejecuta al inicializar el componente.</p>\n"
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 51,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "shrinkItems",
          "args": [
            {
              "name": "item",
              "type": "MenuEntity",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 82,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para expandir o contraer los elementos desplegables del menú\n",
          "description": "<p>Método para expandir o contraer los elementos desplegables del menú</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 2478,
                "end": 2482,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "item"
              },
              "type": "MenuEntity",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2459,
                "end": 2464,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 2465,
                "end": 2477,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 2466,
                  "end": 2476,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 2466,
                    "end": 2476,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "MenuEntity"
                  }
                }
              }
            }
          ]
        },
        {
          "name": "toogleMenu",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 67,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para cerrar o abrir el menú lateral de la aplicación.\n",
          "description": "<p>Método para cerrar o abrir el menú lateral de la aplicación.</p>\n"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "<p>neo-side-menu\nComponente que representa el menú lateral de la aplicación y que se encarga de mostrar las opciones de navegación mediante el componente <code>neo-side-menu-item</code> de su interior.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;neo-side-menu&gt;&lt;/neo-side-menu&gt;</code></pre></div>",
      "rawdescription": "\n\nneo-side-menu\nComponente que representa el menú lateral de la aplicación y que se encarga de mostrar las opciones de navegación mediante el componente `neo-side-menu-item` de su interior.\n```html\n<neo-side-menu></neo-side-menu>\n```",
      "type": "component",
      "sourceCode": "import { Component, Input, Signal, computed, signal } from '@angular/core';\r\nimport { DEFAULT_MENU_POSITION, MenuEntity, SideMenuPosition } from './model/menu.entity';\r\nimport { MenuService } from './services/menu.service';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\nimport { filter } from 'rxjs';\r\nimport { FADE_IN_OUT_MENU } from './animations/fade-in-out.animation';\r\nimport { SLIDE_BY_POSITION } from './animations/slide-by-position.animation';\r\n\r\n/**\r\n * @name\r\n * neo-side-menu\r\n * @description\r\n * Componente que representa el menú lateral de la aplicación y que se encarga de mostrar las opciones de navegación mediante el componente `neo-side-menu-item` de su interior.\r\n * @example\r\n * <neo-side-menu></neo-side-menu>\r\n */\r\n@Component({\r\n  selector: 'neo-side-menu',\r\n  templateUrl: './side-menu.component.html',\r\n  styleUrls: ['./side-menu.component.scss'],\r\n  animations: [\r\n    FADE_IN_OUT_MENU,\r\n    SLIDE_BY_POSITION\r\n  ]\r\n})\r\nexport class SideMenuComponent {\r\n\r\n  LEFT_MENU_POSITION = SideMenuPosition.LEFT;\r\n  RIGHT_MENU_POSITION = SideMenuPosition.RIGHT;\r\n\r\n  /**\r\n   * Variable para mantener abiertos varios elementos desplegables del menú a la vez.\r\n   */\r\n  @Input() keepMultipleOpen: boolean = false;\r\n\r\n  /**\r\n   * Variable para establecer la posición del menú lateral de la aplicación. Por defecto es `SideMenuPosition.LEFT`.\r\n   */\r\n  @Input() position: SideMenuPosition = DEFAULT_MENU_POSITION;\r\n\r\n  menu: MenuEntity[] = [];\r\n  isMenuOpened: Signal<boolean> = signal(false);\r\n\r\n  constructor(\r\n    private readonly _menuService: MenuService,\r\n    private readonly router: Router\r\n  ) {\r\n    this.router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe(() => this.closeSideMenu());\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.isMenuOpened = computed(() => this._menuService.isMenuVisible());\r\n    this.getMenu();\r\n  }\r\n\r\n  /**\r\n   * Método para obtener el menú de la aplicación y guardarlo en la variable `menu`.\r\n   * Este método se ejecuta al inicializar el componente.\r\n   */\r\n  getMenu() {\r\n    this.menu = this._menuService.getMenu();\r\n  }\r\n\r\n  /**\r\n   * Método para cerrar o abrir el menú lateral de la aplicación.\r\n   */\r\n  toogleMenu() {\r\n    this._menuService.toggle();\r\n  }\r\n\r\n  /**\r\n   * Método para cerrar el menú lateral de la aplicación.\r\n   */\r\n  closeSideMenu() {\r\n    this._menuService.close();\r\n  }\r\n\r\n  /**\r\n   * Método para expandir o contraer los elementos desplegables del menú\r\n   * @param {MenuEntity} item\r\n   */\r\n  shrinkItems(item: MenuEntity): void {\r\n    if (!this.keepMultipleOpen) {\r\n      for (let modelItem of this.menu) {\r\n        if (item !== modelItem && modelItem.expanded) {\r\n          modelItem.expanded = false;\r\n          modelItem.active = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import 'base';\r\n\r\n.neo-main-menu {\r\n  bottom: 0;\r\n  float: none;\r\n  position: fixed;\r\n  top: 0;\r\n  height: 100vh;\r\n  overflow-y: auto;\r\n  z-index: 1001;\r\n  transition: left 0.3s;\r\n  width: 255px;\r\n  margin-top: 45px;\r\n  padding-bottom: 45px;\r\n  background-color: var(--bg-menu-color);\r\n  box-shadow: var(--shadow-box);\r\n\r\n  &--right {\r\n    right: 0;\r\n    left: auto;\r\n  }\r\n\r\n  &--left {\r\n    right: auto;\r\n    left: 0;\r\n  }\r\n\r\n  &__wrapper {\r\n    padding: 10px;\r\n  }\r\n\r\n  &__backdrop {\r\n    background: #0000002b;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    position: fixed;\r\n    display: block;\r\n    z-index: 50;\r\n  }\r\n}\r\n",
          "styleUrl": "./side-menu.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_menuService",
            "type": "MenuService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 42,
        "jsdoctags": [
          {
            "name": "_menuService",
            "type": "MenuService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "templateData": "@if (isMenuOpened()) {\r\n  <aside\r\n    class=\"neo-main-menu\"\r\n    [class.neo-main-menu--left]=\"position === LEFT_MENU_POSITION\"\r\n    [class.neo-main-menu--right]=\"position === RIGHT_MENU_POSITION\"\r\n    role=\"navigation\"\r\n    [@slideByPosition]=\"position\"\r\n    [ngClass]=\"{\r\n      open: isMenuOpened(),\r\n      close: !isMenuOpened()\r\n    }\"\r\n  >\r\n    <div class=\"neo-main-menu__wrapper\">\r\n      @for (item of menu; track item) {\r\n        <neo-side-menu-item class=\"neo-main-menu__item\" [itemMenu]=\"item\" (closeMainItemsMenu)=\"shrinkItems(item)\">\r\n        </neo-side-menu-item>\r\n      }\r\n    </div>\r\n  </aside>\r\n  <div\r\n    [@fadeInOutMenu]\r\n    class=\"neo-main-menu__backdrop\"\r\n    (click)=\"closeSideMenu()\"\r\n  ></div>\r\n}\r\n"
    },
    {
      "name": "SideMenuItemComponent",
      "id": "component-SideMenuItemComponent-ecd4f50d8381cf378196891467c4b8ce5c97dc8814c8b83652f3efa4920c5ff3ee74642e5dd23109047304dcae3a98e225ed72f739d142309fbb707ef9711e9f",
      "file": "src/app/shared/components/side-menu/side-menu-item/side-menu-item.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-side-menu-item",
      "styleUrls": ["./side-menu-item.component.scss"],
      "styles": [],
      "templateUrl": ["./side-menu-item.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "depthLevel",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nNivel de profundiad del item del menú\n",
          "description": "<p>Nivel de profundiad del item del menú</p>\n",
          "line": 34,
          "type": "number",
          "decorators": []
        },
        {
          "name": "itemMenu",
          "defaultValue": "{} as MenuEntity",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nObjeto con la información del item del menú.\n",
          "description": "<p>Objeto con la información del item del menú.</p>\n",
          "line": 29,
          "type": "MenuEntity",
          "decorators": []
        },
        {
          "name": "keepMultipleOpen",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nVariable para mantener abiertos varios elementos desplegables del menú a la vez.\n",
          "description": "<p>Variable para mantener abiertos varios elementos desplegables del menú a la vez.</p>\n",
          "line": 24,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "closeMainItemsMenu",
          "defaultValue": "new EventEmitter<boolean>(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nEvento para notificar que se ha cerrado el elemento principal\n",
          "description": "<p>Evento para notificar que se ha cerrado el elemento principal</p>\n",
          "line": 39,
          "type": "EventEmitter<boolean>"
        },
        {
          "name": "setActive",
          "defaultValue": "new EventEmitter<void>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nEvento para notificar que un elemento del menú ha sido activado\n",
          "description": "<p>Evento para notificar que un elemento del menú ha sido activado</p>\n",
          "line": 44,
          "type": "EventEmitter<void>"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "activeItemMenu",
          "args": [
            {
              "name": "item",
              "type": "MenuEntity",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 77,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para activar un item del menú y desactivar el resto de items\n",
          "description": "<p>Método para activar un item del menú y desactivar el resto de items</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 2122,
                "end": 2126,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "item"
              },
              "type": "MenuEntity",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2103,
                "end": 2108,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 2109,
                "end": 2121,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 2110,
                  "end": 2120,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 2110,
                    "end": 2120,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "MenuEntity"
                  }
                }
              }
            }
          ]
        },
        {
          "name": "deactivateItemsMenu",
          "args": [
            {
              "name": "items",
              "type": "MenuEntity[]",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "currentItem",
              "type": "MenuEntity",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 96,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para desactivar el resto de items del menú\n",
          "description": "<p>Método para desactivar el resto de items del menú</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 2547,
                "end": 2552,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "items"
              },
              "type": "MenuEntity[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2526,
                "end": 2531,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 2532,
                "end": 2546,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 2533,
                  "end": 2545,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 188,
                  "elementType": {
                    "pos": 2533,
                    "end": 2543,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 1,
                    "kind": 183,
                    "typeName": {
                      "pos": 2533,
                      "end": 2543,
                      "flags": 16777216,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 80,
                      "escapedText": "MenuEntity"
                    }
                  }
                }
              }
            },
            {
              "name": {
                "pos": 2579,
                "end": 2590,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "currentItem"
              },
              "type": "MenuEntity",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2560,
                "end": 2565,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 2566,
                "end": 2578,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 2567,
                  "end": 2577,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 2567,
                    "end": 2577,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "MenuEntity"
                  }
                }
              }
            }
          ]
        },
        {
          "name": "handleClick",
          "args": [
            {
              "name": "item",
              "type": "MenuEntity",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 62,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para manejar el evento de click en un item del menú.\n",
          "description": "<p>Método para manejar el evento de click en un item del menú.</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 1766,
                "end": 1770,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "item"
              },
              "type": "MenuEntity",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1747,
                "end": 1752,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1753,
                "end": 1765,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 1754,
                  "end": 1764,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 1754,
                    "end": 1764,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "MenuEntity"
                  }
                }
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 51,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "shrinkItems",
          "args": [
            {
              "name": "item",
              "type": "MenuEntity",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 110,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nMétodo para expandir o contraer los elementos desplegables del menú\n",
          "description": "<p>Método para expandir o contraer los elementos desplegables del menú</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 3081,
                "end": 3085,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "item"
              },
              "type": "MenuEntity",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3062,
                "end": 3067,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 3068,
                "end": 3080,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 3069,
                  "end": 3079,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 3069,
                    "end": 3079,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "MenuEntity"
                  }
                }
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "<p>neo-side-menu-item\nComponente que representa un item del menú lateral de la aplicación y que se encarga de mostrar las opciones de navegación de cada item.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;neo-side-menu-item [itemMenu]=&quot;itemMenu&quot;&gt;&lt;/neo-side-menu-item&gt;</code></pre></div>",
      "rawdescription": "\n\nneo-side-menu-item\nComponente que representa un item del menú lateral de la aplicación y que se encarga de mostrar las opciones de navegación de cada item.\n```html\n<neo-side-menu-item [itemMenu]=\"itemMenu\"></neo-side-menu-item>\n```",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { MenuEntity } from '../model/menu.entity';\r\nimport { MenuService } from '../services/menu.service';\r\n\r\n/**\r\n * @name\r\n * neo-side-menu-item\r\n * @description\r\n * Componente que representa un item del menú lateral de la aplicación y que se encarga de mostrar las opciones de navegación de cada item.\r\n * @example\r\n * <neo-side-menu-item [itemMenu]=\"itemMenu\"></neo-side-menu-item>\r\n */\r\n@Component({\r\n  selector: 'neo-side-menu-item',\r\n  templateUrl: './side-menu-item.component.html',\r\n  styleUrls: ['./side-menu-item.component.scss']\r\n})\r\nexport class SideMenuItemComponent {\r\n\r\n  /**\r\n   * Variable para mantener abiertos varios elementos desplegables del menú a la vez.\r\n   */\r\n  @Input() keepMultipleOpen: boolean = false;\r\n\r\n  /**\r\n   * Objeto con la información del item del menú.\r\n   */\r\n  @Input() itemMenu: MenuEntity = {} as MenuEntity;\r\n\r\n  /**\r\n   * Nivel de profundiad del item del menú\r\n   */\r\n  @Input() depthLevel: number = 0;\r\n\r\n  /**\r\n   * Evento para notificar que se ha cerrado el elemento principal\r\n   */\r\n  @Output() closeMainItemsMenu: EventEmitter<boolean> = new EventEmitter<boolean>(false);\r\n\r\n  /**\r\n   * Evento para notificar que un elemento del menú ha sido activado\r\n   */\r\n  @Output() setActive: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  constructor(\r\n    private readonly _menuService: MenuService,\r\n    private readonly router: Router,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    setTimeout(() => {\r\n      if (this.router.url === this.itemMenu.route)\r\n        this.activeItemMenu(this.itemMenu);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Método para manejar el evento de click en un item del menú.\r\n   * @param {MenuEntity} item\r\n   */\r\n  handleClick(item: MenuEntity): void {\r\n\r\n    this.shrinkItems(item);\r\n    item.expanded = !item.expanded;\r\n\r\n    if (this.depthLevel === 0)\r\n      this.closeMainItemsMenu.emit(true);\r\n    else\r\n      this.activeItemMenu(item);\r\n  }\r\n\r\n  /**\r\n   * Método para activar un item del menú y desactivar el resto de items\r\n   * @param {MenuEntity} item\r\n   */\r\n  activeItemMenu(item: MenuEntity): void {\r\n\r\n    item.active = true;\r\n    item.expanded = true;\r\n\r\n    const menu: MenuEntity[] = this._menuService.getMenu() || [];\r\n    this.deactivateItemsMenu(menu, item);\r\n\r\n    if (this.depthLevel !== 0)\r\n      this.setActive.emit();\r\n    else\r\n      this.shrinkItems(item);\r\n  }\r\n\r\n  /**\r\n   * Método para desactivar el resto de items del menú\r\n   * @param {MenuEntity[]} items\r\n   * @param {MenuEntity} currentItem\r\n   */\r\n  deactivateItemsMenu(items: MenuEntity[], currentItem: MenuEntity): void {\r\n    for (let modelItem of items || []) {\r\n      if (currentItem !== modelItem && modelItem.active) {\r\n        modelItem.active = false;\r\n        if (modelItem.childrens && modelItem.childrens.length > 0)\r\n          this.deactivateItemsMenu(modelItem.childrens, currentItem);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Método para expandir o contraer los elementos desplegables del menú\r\n   * @param {MenuEntity} item\r\n   */\r\n  shrinkItems(item: MenuEntity): void {\r\n    if (!this.keepMultipleOpen) {\r\n\r\n      let menu: MenuEntity[] = [];\r\n\r\n      if (this.depthLevel === 0)\r\n        menu = this._menuService.getMenu() || [];\r\n      else\r\n        menu = this.itemMenu.childrens || [];\r\n\r\n      for (let modelItem of menu || []) {\r\n        if (item !== modelItem && modelItem.expanded) {\r\n          modelItem.expanded = false;\r\n          modelItem.active = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import 'base';\r\n\r\n:host {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: auto;\r\n}\r\n\r\n.item-menu {\r\n  display: flex;\r\n  align-items: flex-start;\r\n  flex-direction: column;\r\n  font-size: 12px;\r\n  cursor: pointer;\r\n  padding: 10px 15px;\r\n  margin: 2px 0;\r\n  flex-wrap: nowrap;\r\n  text-decoration: none;\r\n  background-color: var(--bg-menu-color);\r\n  color: var(--text-color);\r\n\r\n  i::before {\r\n    color: var(--text-color);\r\n  }\r\n\r\n  &:hover,\r\n  &:focus,\r\n  &.active {\r\n    border-radius: 5px;\r\n    background-color: var(--menu-item-hover-active-color) !important;\r\n    color: var(--menu-item-hover-active-text) !important;\r\n\r\n    i::before {\r\n      color: var(--menu-item-hover-active-text) !important;\r\n    }\r\n  }\r\n\r\n  &__wrapper {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    flex-direction: row;\r\n    width: 100%;\r\n  }\r\n\r\n  &__icon {\r\n    margin-right: 10px;\r\n  }\r\n\r\n  &__childrens {\r\n    height: 0;\r\n    overflow: hidden;\r\n\r\n    &.opened {\r\n      height: auto;\r\n      overflow: visible;\r\n    }\r\n\r\n    &.level_0 {\r\n      padding-left: 10px;\r\n    }\r\n\r\n    &.level_1 {\r\n      padding-left: 20px;\r\n    }\r\n\r\n    &.level_2 {\r\n      padding-left: 30px;\r\n    }\r\n  }\r\n}\r\n",
          "styleUrl": "./side-menu-item.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_menuService",
            "type": "MenuService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 44,
        "jsdoctags": [
          {
            "name": "_menuService",
            "type": "MenuService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "templateData": "@if (itemMenu.route) {\r\n  <a\r\n    class=\"item-menu\"\r\n    [class.active]=\"itemMenu.active\"\r\n    [title]=\"itemMenu.label | translate\"\r\n    [routerLink]=\"[itemMenu.route]\"\r\n    [routerLinkActiveOptions]=\"{ exact: true }\"\r\n    [routerLinkActive]=\"['active']\"\r\n    (click)=\"activeItemMenu(itemMenu)\"\r\n  >\r\n    <span class=\"item-menu__label\">{{ itemMenu.label | translate }}</span>\r\n  </a>\r\n} @else {\r\n  <div\r\n    clickable\r\n    class=\"item-menu\"\r\n    [title]=\"itemMenu.label | translate\"\r\n    [class.active]=\"itemMenu.active\"\r\n    (click)=\"handleClick(itemMenu)\"\r\n  >\r\n    <div class=\"item-menu__wrapper\">\r\n      <span class=\"item-menu__label\">{{ itemMenu.label | translate }}</span>\r\n      @if (itemMenu.childrens && itemMenu.childrens.length > 0) {\r\n        <div class=\"item-menu__toggle\">\r\n          <i class=\"fa fa-angle-right\"></i>\r\n          @if (itemMenu.expanded) {\r\n            <i class=\"ri-arrow-down-s-line\"></i>\r\n          } @else {\r\n            <i class=\"ri-arrow-right-s-line\"></i>\r\n          }\r\n        </div>\r\n      }\r\n    </div>\r\n  </div>\r\n  <div\r\n    class=\"item-menu__childrens {{ 'level_' + depthLevel }}\"\r\n    [ngClass]=\"{ opened: itemMenu.expanded }\"\r\n  >\r\n    @for (itemChildren of itemMenu.childrens; track itemChildren) {\r\n      <neo-side-menu-item\r\n        [itemMenu]=\"itemChildren\"\r\n        [depthLevel]=\"depthLevel + 1\"\r\n        [keepMultipleOpen]=\"keepMultipleOpen\"\r\n        (setActive)=\"activeItemMenu(itemMenu)\"\r\n      ></neo-side-menu-item>\r\n    }\r\n  </div>\r\n}\r\n"
    },
    {
      "name": "SpinnerComponent",
      "id": "component-SpinnerComponent-d01dadfa770995a8cf4edfc8dfe1615abcb336b7ca86216ec4a51ca82fea64c135528a0e95b88511aa548b3dca7c597c72936967676eef011aa9793127c01917",
      "file": "src/app/shared/components/spinner/spinner.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-spinner",
      "styleUrls": ["./spinner.component.scss"],
      "styles": [],
      "templateUrl": ["./spinner.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "label",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "string",
          "decorators": []
        },
        {
          "name": "labelColor",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "string",
          "decorators": []
        },
        {
          "name": "labelSize",
          "defaultValue": "'0.8rem'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string",
          "decorators": []
        },
        {
          "name": "overlay",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "position",
          "defaultValue": "'absolute'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "SpinnerPosition",
          "decorators": []
        },
        {
          "name": "size",
          "defaultValue": "'m'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "SpinnerSize",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, OnInit, SimpleChanges } from '@angular/core';\r\nimport { SpinnerPosition, SpinnerSize } from './models/spinner.entity';\r\n\r\n@Component({\r\n  selector: 'neo-spinner',\r\n  templateUrl: './spinner.component.html',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  styleUrls: ['./spinner.component.scss'],\r\n})\r\nexport class SpinnerComponent {\r\n\r\n  @Input() size: SpinnerSize = 'm';\r\n  @Input() position: SpinnerPosition = 'absolute';\r\n  @Input() overlay: boolean = false;\r\n  @Input() labelSize: string = '0.8rem';\r\n  @Input() labelColor: string = '';\r\n  @Input() label: string = '';\r\n\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import 'base';\r\n\r\n.spinner {\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 5px 0;\r\n\r\n  &--overlay {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    z-index: 9990;\r\n    top: 0;\r\n    left: 0;\r\n  }\r\n\r\n  &--wrapper {\r\n    height: 100% !important;\r\n  }\r\n\r\n  &--center {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: 10px;\r\n  }\r\n\r\n  &__label {\r\n    font-weight: 700;\r\n    color: var(--text-color) !important;\r\n    width: 80%;\r\n    text-align: center;\r\n    -webkit-user-drag: none;\r\n    -khtml-user-drag: none;\r\n    -moz-user-drag: none;\r\n    -o-user-drag: none;\r\n    -webkit-touch-callout: none;\r\n    -webkit-user-select: none;\r\n    -khtml-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    user-select: none;\r\n    z-index: 10;\r\n  }\r\n\r\n  &__icon {\r\n    position: relative;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    &::after,\r\n    &::before {\r\n      content: '';\r\n      border-style: solid;\r\n      border-color: var(--bg-spinner-primary-color);\r\n      border-radius: 50%;\r\n      position: absolute;\r\n      content: '';\r\n      display: block;\r\n    }\r\n\r\n    &::before {\r\n      border-bottom-color: transparent;\r\n      border-left-color: transparent;\r\n      animation: spinner-1o3y8q 0.75s infinite linear reverse;\r\n    }\r\n\r\n    &::after {\r\n      animation: spinner-1o3y8q 0.7s infinite linear;\r\n      border-right-color: transparent;\r\n      border-top-color: transparent;\r\n    }\r\n\r\n    @keyframes spinner-1o3y8q {\r\n      to {\r\n        transform: rotate(360deg);\r\n      }\r\n    }\r\n\r\n    &--size-xs {\r\n      width: 24px;\r\n      height: 24px;\r\n\r\n      &::before,\r\n      &::after {\r\n        border-width: 3px;\r\n      }\r\n\r\n      &::before {\r\n        width: 14.4px;\r\n        height: 14.4px;\r\n      }\r\n\r\n      &::after {\r\n        height: 24px;\r\n        width: 24px;\r\n      }\r\n    }\r\n\r\n    &--size-s {\r\n      width: 35px;\r\n      height: 35px;\r\n\r\n      &::before,\r\n      &::after {\r\n        border-width: 4.2px;\r\n      }\r\n\r\n      &::before {\r\n        width: 22px;\r\n        height: 22px;\r\n      }\r\n\r\n      &::after {\r\n        height: 35px;\r\n        width: 35px;\r\n      }\r\n    }\r\n\r\n    &--size-xm {\r\n      width: 40px;\r\n      height: 40px;\r\n\r\n      &::before,\r\n      &::after {\r\n        border-width: 4.85px;\r\n      }\r\n\r\n      &::before {\r\n        width: 24.5px;\r\n        height: 24.5px;\r\n      }\r\n\r\n      &::after {\r\n        height: 40px;\r\n        width: 40px;\r\n      }\r\n    }\r\n\r\n    &--size-m {\r\n      width: 55px;\r\n      height: 55px;\r\n\r\n      &::before,\r\n      &::after {\r\n        border-width: 6.5px;\r\n      }\r\n\r\n      &::before {\r\n        width: 33.5px;\r\n        height: 33.5px;\r\n      }\r\n\r\n      &::after {\r\n        height: 55px;\r\n        width: 55px;\r\n      }\r\n    }\r\n\r\n    &--size-l {\r\n      width: 72px;\r\n      height: 72px;\r\n\r\n      &::before,\r\n      &::after {\r\n        border-width: 8.5px;\r\n      }\r\n\r\n      &::before {\r\n        width: 43.5px;\r\n        height: 43.5px;\r\n      }\r\n\r\n      &::after {\r\n        height: 72px;\r\n        width: 72px;\r\n      }\r\n\r\n    }\r\n\r\n    &--size-xl {\r\n      width: 88px;\r\n      height: 88px;\r\n\r\n      &::before,\r\n      &::after {\r\n        border-width: 10.5px;\r\n      }\r\n\r\n      &::before {\r\n        width: 52.5px;\r\n        height: 52.5px;\r\n      }\r\n\r\n      &::after {\r\n        height: 88px;\r\n        width: 88px;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
          "styleUrl": "./spinner.component.scss"
        }
      ],
      "stylesData": "",
      "extends": [],
      "templateData": "<div\r\n  class=\"spinner\"\r\n  [ngClass]=\"{\r\n    'spinner--overlay': overlay,\r\n    'spinner--center': label && label !== ''\r\n  }\"\r\n  [style.position]=\"overlay ? position : 'inherit'\"\r\n>\r\n  <div class=\"spinner__icon spinner__icon--size-{{ size }}\"></div>\r\n\r\n  @if (label && label !== \"\") {\r\n    <div\r\n      class=\"spinner__label\"\r\n      [ngStyle]=\"{ color: labelColor, 'font-size': labelSize }\"\r\n    >\r\n      {{ label }}\r\n    </div>\r\n  }\r\n</div>\r\n"
    },
    {
      "name": "TabsBodyComponent",
      "id": "component-TabsBodyComponent-935c11fefe22d67a8014a370d116ab106b3055b9123d0a58bbf9c0c9f8a486405551754fff72905813e3acd19f87c74c2d6a522c9904e9c8ca7d5ffa795f0c9c",
      "file": "src/app/shared/components/tabs/tabs-item/tabs-body/tabs-body.component.ts",
      "encapsulation": ["ViewEncapsulation.None"],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-tabs-body",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./tabs-body.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'neo-tabs-body',\r\n  templateUrl: './tabs-body.component.html',\r\n  styleUrl: './tabs-body.component.scss',\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class TabsBodyComponent {\r\n\r\n}\r\n",
      "styleUrl": "./tabs-body.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "templateData": "<div class=\"tabs__content__item__body\">\r\n  <ng-content></ng-content>\r\n</div>\r\n"
    },
    {
      "name": "TabsComponent",
      "id": "component-TabsComponent-431835e3df8030471b7054d9c1c9ce6cf2d2dadf718817972b961f3ddda8d7b77246692242bf7aa983abc66ad529faea8863c0673a5e1059e31742a1a49ce157",
      "file": "src/app/shared/components/tabs/tabs.component.ts",
      "encapsulation": ["ViewEncapsulation.None"],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-tabs",
      "styleUrls": ["./tabs.component.scss"],
      "styles": [],
      "templateUrl": ["./tabs.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "orientation",
          "defaultValue": "'v'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "TabOrientation",
          "decorators": []
        },
        {
          "name": "type",
          "defaultValue": "'tab'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "TabType",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "tabSelectedIdx",
          "defaultValue": "new EventEmitter<number>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "tabs",
          "defaultValue": "[] as unknown as QueryList<TabsItemComponent>",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "QueryList<TabsItemComponent>",
          "optional": false,
          "description": "",
          "line": 29,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "TabsItemComponent"
            }
          ],
          "modifierKind": [170]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 38,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "selected",
          "args": [
            {
              "name": "tab",
              "type": "TabsItemComponent",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "tabIdx",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 67,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para seleccionar una tab y desactivar el resto\n",
          "description": "<p>Función para seleccionar una tab y desactivar el resto</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 2139,
                "end": 2142,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "tab"
              },
              "type": "TabsItemComponent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2113,
                "end": 2118,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 2119,
                "end": 2138,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 2120,
                  "end": 2137,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 183,
                  "typeName": {
                    "pos": 2120,
                    "end": 2137,
                    "flags": 16777216,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 80,
                    "escapedText": "TabsItemComponent"
                  }
                }
              }
            },
            {
              "name": {
                "pos": 2165,
                "end": 2171,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "tabIdx"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2150,
                "end": 2155,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 2156,
                "end": 2164,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 2157,
                  "end": 2163,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 150
                }
              }
            }
          ]
        },
        {
          "name": "setIndex",
          "args": [
            {
              "name": "tabIdx",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 58,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para emitir el índice de la tab seleccionada\n",
          "description": "<p>Función para emitir el índice de la tab seleccionada</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 1948,
                "end": 1954,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "tabIdx"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1933,
                "end": 1938,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1939,
                "end": 1947,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 1940,
                  "end": 1946,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 150
                }
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "<p>neo-tabs\nComponente para crear un conjunto de tabs utilizando el componente <code>neo-tabs-item</code> para cada uno de ellos</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;neo-tabs [type]=&quot;&#39;tab&#39;&quot; [orientation]=&quot;&#39;v&#39;&quot;&gt;\n   &lt;neo-tabs-item title=&quot;Tab 1&quot;&gt;\n       &lt;p&gt;Contenido tab 1&lt;/p&gt;\n   &lt;/neo-tabs-item&gt;\n   &lt;neo-tabs-item title=&quot;Tab 2&quot;&gt;\n       &lt;p&gt;Contenido tab 2&lt;/p&gt;\n   &lt;/neo-tabs-item&gt;\n&lt;/neo-tabs&gt;</code></pre></div>",
      "rawdescription": "\n\nneo-tabs\nComponente para crear un conjunto de tabs utilizando el componente `neo-tabs-item` para cada uno de ellos\n```html\n<neo-tabs [type]=\"'tab'\" [orientation]=\"'v'\">\n   <neo-tabs-item title=\"Tab 1\">\n       <p>Contenido tab 1</p>\n   </neo-tabs-item>\n   <neo-tabs-item title=\"Tab 2\">\n       <p>Contenido tab 2</p>\n   </neo-tabs-item>\n</neo-tabs>\n```",
      "type": "component",
      "sourceCode": "import { AfterContentInit, Component, ContentChildren, EventEmitter, Input, Output, QueryList, ViewEncapsulation } from '@angular/core';\r\nimport { TabsItemComponent } from './tabs-item/tabs-item.component';\r\nimport { TabOrientation, TabType } from './models/tabs.entity';\r\nimport { TabsFooterComponent } from './tabs-item/tabs-footer/tabs-footer.component';\r\n\r\n/**\r\n * @name\r\n * neo-tabs\r\n * @description\r\n * Componente para crear un conjunto de tabs utilizando el componente `neo-tabs-item` para cada uno de ellos\r\n * @example\r\n * <neo-tabs [type]=\"'tab'\" [orientation]=\"'v'\">\r\n *    <neo-tabs-item title=\"Tab 1\">\r\n *        <p>Contenido tab 1</p>\r\n *    </neo-tabs-item>\r\n *    <neo-tabs-item title=\"Tab 2\">\r\n *        <p>Contenido tab 2</p>\r\n *    </neo-tabs-item>\r\n * </neo-tabs>\r\n */\r\n@Component({\r\n  selector: 'neo-tabs',\r\n  templateUrl: './tabs.component.html',\r\n  styleUrls: ['./tabs.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class TabsComponent implements AfterContentInit {\r\n\r\n  @ContentChildren(TabsItemComponent) tabs: QueryList<TabsItemComponent> = [] as unknown as QueryList<TabsItemComponent>;\r\n\r\n  @Input() type: TabType = 'tab';\r\n  @Input() orientation: TabOrientation = 'v';\r\n\r\n  @Output() tabSelectedIdx = new EventEmitter<number>();\r\n\r\n  constructor() { }\r\n\r\n  ngAfterContentInit() {\r\n\r\n    // Obtenemos las tabs activas, si las hay, mediante un loop con \"filter\"\r\n    const activeTabs = this.tabs.filter((tab: TabsItemComponent) => tab.isActive);\r\n\r\n    // Si no hubiese ninguna activa, activamos la primera por defecto\r\n    if (activeTabs.length === 0) {\r\n\r\n      // Si es de tipo \"tab\", marcamos como una pestaña normal\r\n      // --\r\n      // Si es de tipo \"router-tab\", marcamos mediante las rutas\r\n      if (this.type === 'tab')\r\n        setTimeout(() => this.selected(this.tabs.first, 0));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Función para emitir el índice de la tab seleccionada\r\n   * @param {number} tabIdx\r\n   */\r\n  setIndex(tabIdx: number) {\r\n    this.tabSelectedIdx.emit(tabIdx);\r\n  }\r\n\r\n  /**\r\n   * Función para seleccionar una tab y desactivar el resto\r\n   * @param {TabsItemComponent} tab\r\n   * @param {number} tabIdx\r\n   */\r\n  selected(tab: TabsItemComponent, tabIdx: number) {\r\n    if (tab) {\r\n\r\n      // Emitimos el índice de la tab seleccionada\r\n      this.setIndex(tabIdx);\r\n\r\n      // Desactivamos todas las tabs, recorriéndolas\r\n      this.tabs.forEach((tabItem: TabsItemComponent) => tabItem.isActive = false);\r\n\r\n      // Activamos la tab actual, la llamada en la función\r\n      tab.isActive = true;\r\n    }\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import 'base';\r\n\r\n.tabs {\r\n  display: flex;\r\n  align-items: flex-start;\r\n  justify-content: flex-start;\r\n\r\n  &--vertical {\r\n    flex-direction: column;\r\n    gap: 10px;\r\n  }\r\n\r\n  &--horizontal {\r\n    flex-direction: row;\r\n    gap: 15px;\r\n  }\r\n\r\n  &__content {\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    overflow-x: hidden;\r\n    position: relative;\r\n    height: 100% !important;\r\n    overflow-y: auto;\r\n    padding-right: 3px;\r\n  }\r\n\r\n  &__nav {\r\n    list-style: none;\r\n    padding: 0px;\r\n    display: flex;\r\n\r\n    &__item {\r\n      font-size: 0.85rem;\r\n      font-style: normal;\r\n      font-weight: 700;\r\n      line-height: normal;\r\n      letter-spacing: 0.1px;\r\n      padding: 2px 20px;\r\n      cursor: pointer;\r\n      color: var(--text-color);\r\n      height: 45px;\r\n      display: flex;\r\n      align-items: center;\r\n      border-bottom: 2px solid;\r\n      border-bottom-color: transparent;\r\n      gap: 10px;\r\n\r\n      i {\r\n        font-weight: normal !important;\r\n      }\r\n\r\n      &--active,\r\n      &:hover,\r\n      &:focus {\r\n        border-bottom: 2px solid;\r\n        border-bottom-color: var(--bg-btn-primary-color);\r\n        background-color: var(--hover-bg-btn-primary-transparent-color);\r\n      }\r\n\r\n    }\r\n\r\n    &--vertical {\r\n      flex-direction: row;\r\n      width: 100%;\r\n      height: 45px;\r\n      display: flex;\r\n      align-items: center;\r\n      border-bottom: 1px solid var(--border-color);\r\n    }\r\n\r\n    &__separator {\r\n      width: 0.5px;\r\n      background-color: var(--text-color);\r\n      height: 20px;\r\n    }\r\n  }\r\n}\r\n",
          "styleUrl": "./tabs.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 34
      },
      "extends": [],
      "implements": ["AfterContentInit"],
      "templateData": "<div\r\n  class=\"tabs\"\r\n  [class.tabs--vertical]=\"orientation === 'v'\"\r\n  [class.tabs--horizontal]=\"orientation === 'h'\"\r\n>\r\n  @if (tabs && tabs.length > 1) {\r\n    <div\r\n      class=\"tabs__nav type-{{ type }}\"\r\n      [class.tabs__nav--vertical]=\"orientation === 'v'\"\r\n      [class.tabs__nav--horizontal]=\"orientation === 'h'\"\r\n    >\r\n      @for (tab of tabs; track $index; let isLast = $last) {\r\n        <div\r\n          class=\"tabs__nav__item\"\r\n          (click)=\"selected(tab, $index)\"\r\n          clickable\r\n          [class.tabs__nav__item--active]=\"tab.isActive\"\r\n          [title]=\"tab._title\"\r\n          [routerLinkActiveOptions]=\"{ exact: true }\"\r\n          [routerLink]=\"tab.route ? [tab.route] : []\"\r\n          [routerLinkActive]=\"tab.route ? ['tabs__nav__item--active'] : []\"\r\n        >\r\n          @if (!tab.tabLabel) {\r\n            @if (tab.icon) {\r\n              <span class=\"tabs__nav__item__icon\"\r\n                ><i [class]=\"tab.icon\"></i\r\n              ></span>\r\n            }\r\n            <span class=\"tabs__nav__item__label\">{{ tab._title }}</span>\r\n          } @else {\r\n            <ng-container\r\n              *ngTemplateOutlet=\"tab.tabLabel.templateRef\"\r\n            ></ng-container>\r\n          }\r\n        </div>\r\n      }\r\n    </div>\r\n  }\r\n\r\n  <div class=\"tabs__content\">\r\n    @if (type === \"tab\") {\r\n      <ng-content select=\"neo-tabs-item\"></ng-content>\r\n    } @else {\r\n      <router-outlet></router-outlet>\r\n    }\r\n  </div>\r\n</div>\r\n"
    },
    {
      "name": "TabsFooterComponent",
      "id": "component-TabsFooterComponent-59277c2bcc3612b0ee7eeb106328eff1785332f580e08af78155125a873939cf8762d3b8014bcfe968b988123c24c4d5eeca1851f5e47522e5b1bc7967f15012",
      "file": "src/app/shared/components/tabs/tabs-item/tabs-footer/tabs-footer.component.ts",
      "encapsulation": ["ViewEncapsulation.None"],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-tabs-footer",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./tabs-footer.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'neo-tabs-footer',\r\n  templateUrl: './tabs-footer.component.html',\r\n  styleUrl: './tabs-footer.component.scss',\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class TabsFooterComponent {\r\n\r\n}\r\n",
      "styleUrl": "./tabs-footer.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "templateData": "<div class=\"tabs__content__item__footer\">\r\n  <ng-content></ng-content>\r\n</div>\r\n"
    },
    {
      "name": "TabsHeaderComponent",
      "id": "component-TabsHeaderComponent-abc7b8fe90a6ad0a5cf2f6276a36cf37055ab6f68c6edf106b393ad0d794f7169f7adbce6c3f49b16ddf8847c7c3ab3c932ae3a91ba5d3d9966b9b9d6b4efd30",
      "file": "src/app/shared/components/tabs/tabs-item/tabs-header/tabs-header.component.ts",
      "encapsulation": ["ViewEncapsulation.None"],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-tabs-header",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./tabs-header.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'neo-tabs-header',\r\n  templateUrl: './tabs-header.component.html',\r\n  styleUrl: './tabs-header.component.scss',\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class TabsHeaderComponent {\r\n\r\n}\r\n",
      "styleUrl": "./tabs-header.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "templateData": "<div class=\"tabs__content__item__header\">\r\n  <ng-content></ng-content>\r\n</div>\r\n"
    },
    {
      "name": "TabsItemComponent",
      "id": "component-TabsItemComponent-b0cf394ae41e38faf7599f99f3b4cc86c01f7ea66247a0ef91acadca2401bdcd90277b74005213ab32d1cd799097361dfada083c6cbdb82f1848717be0795dfd",
      "file": "src/app/shared/components/tabs/tabs-item/tabs-item.component.ts",
      "encapsulation": ["ViewEncapsulation.None"],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-tabs-item",
      "styleUrls": ["./tabs-item.component.scss"],
      "styles": [],
      "templateUrl": ["./tabs-item.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "active",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "icon",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 47,
          "type": "string",
          "decorators": []
        },
        {
          "name": "route",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "string",
          "decorators": []
        },
        {
          "name": "title",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 46,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_title",
          "defaultValue": "DEFAULT_TITLE",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 51
        },
        {
          "name": "isActive",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 50
        },
        {
          "name": "tabBody",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TabsBodyComponent | null",
          "optional": false,
          "description": "",
          "line": 40,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "TabsBodyComponent"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabFooter",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TabsFooterComponent | null",
          "optional": false,
          "description": "",
          "line": 41,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "TabsFooterComponent"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabHeader",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TabsHeaderComponent | null",
          "optional": false,
          "description": "",
          "line": 39,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "TabsHeaderComponent"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabLabel",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TabLabelDirective | null",
          "optional": false,
          "description": "",
          "line": 43,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "TabLabelDirective"
            }
          ],
          "modifierKind": [170]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 59,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 55,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "<p>neo-tabs-item\nComponente para crear un item de un tab en el componente <code>neo-tabs</code>.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;neo-tabs [type]=&quot;&#39;tab&#39;&quot; [orientation]=&quot;&#39;v&#39;&quot;&gt;\n   &lt;neo-tabs-item title=&quot;Tab 1&quot;&gt;\n       &lt;p&gt;Contenido tab 1&lt;/p&gt;\n   &lt;/neo-tabs-item&gt;\n   &lt;neo-tabs-item title=&quot;Tab 2&quot;&gt;\n       &lt;neo-tabs-header&gt;\n           CABECERA\n       &lt;/neo-tabs-header&gt;\n       &lt;neo-tabs-body&gt;\n           CONTENIDO\n       &lt;/neo-tabs-body&gt;\n       &lt;neo-tabs-footer&gt;\n           PIE\n       &lt;/neo-tabs-footer&gt;\n   &lt;/neo-tabs-item&gt;\n&lt;/neo-tabs&gt;</code></pre></div>",
      "rawdescription": "\n\nneo-tabs-item\nComponente para crear un item de un tab en el componente `neo-tabs`.\n```html\n<neo-tabs [type]=\"'tab'\" [orientation]=\"'v'\">\n   <neo-tabs-item title=\"Tab 1\">\n       <p>Contenido tab 1</p>\n   </neo-tabs-item>\n   <neo-tabs-item title=\"Tab 2\">\n       <neo-tabs-header>\n           CABECERA\n       </neo-tabs-header>\n       <neo-tabs-body>\n           CONTENIDO\n       </neo-tabs-body>\n       <neo-tabs-footer>\n           PIE\n       </neo-tabs-footer>\n   </neo-tabs-item>\n</neo-tabs>\n```",
      "type": "component",
      "sourceCode": "import { Component, ContentChild, Input, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { TabLabelDirective } from '@shared/components/tabs/directives/tab-label.directive';\r\nimport { DEFAULT_TITLE } from '../models/tabs.entity';\r\nimport { TabsFooterComponent } from './tabs-footer/tabs-footer.component';\r\nimport { TabsBodyComponent } from './tabs-body/tabs-body.component';\r\nimport { TabsHeaderComponent } from './tabs-header/tabs-header.component';\r\n\r\n/**\r\n * @name\r\n * neo-tabs-item\r\n * @description\r\n * Componente para crear un item de un tab en el componente `neo-tabs`.\r\n * @example\r\n * <neo-tabs [type]=\"'tab'\" [orientation]=\"'v'\">\r\n *    <neo-tabs-item title=\"Tab 1\">\r\n *        <p>Contenido tab 1</p>\r\n *    </neo-tabs-item>\r\n *    <neo-tabs-item title=\"Tab 2\">\r\n *        <neo-tabs-header>\r\n *            CABECERA\r\n *        </neo-tabs-header>\r\n *        <neo-tabs-body>\r\n *            CONTENIDO\r\n *        </neo-tabs-body>\r\n *        <neo-tabs-footer>\r\n *            PIE\r\n *        </neo-tabs-footer>\r\n *    </neo-tabs-item>\r\n * </neo-tabs>\r\n */\r\n@Component({\r\n  selector: 'neo-tabs-item',\r\n  templateUrl: './tabs-item.component.html',\r\n  styleUrls: ['./tabs-item.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class TabsItemComponent implements OnInit {\r\n\r\n  @ContentChild(TabsHeaderComponent) tabHeader: TabsHeaderComponent | null = null;\r\n  @ContentChild(TabsBodyComponent) tabBody: TabsBodyComponent | null = null;\r\n  @ContentChild(TabsFooterComponent) tabFooter: TabsFooterComponent | null = null;\r\n\r\n  @ContentChild(TabLabelDirective) tabLabel: TabLabelDirective | null = null;\r\n\r\n  @Input() active: boolean = false;\r\n  @Input() title: string = '';\r\n  @Input() icon: string = '';\r\n  @Input() route: string = '';\r\n\r\n  isActive: boolean = false;\r\n  _title: string = DEFAULT_TITLE;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    this.isActive = this.active;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    if (this.title) {\r\n      this._title = this.title;\r\n    } else {\r\n      this._title = DEFAULT_TITLE;\r\n    }\r\n  }\r\n\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".tabs {\r\n  &__content {\r\n\r\n    &__item {\r\n      width: 100%;\r\n      display: flex;\r\n      flex-direction: column;\r\n      gap: 10px;\r\n\r\n      &__header {\r\n        width: 100%;\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: center;\r\n        align-items: center;\r\n        gap: 15px;\r\n        height: 20px;\r\n      }\r\n\r\n      &__body {\r\n        width: 100%;\r\n        display: flex;\r\n        flex-direction: column;\r\n        overflow-x: hidden;\r\n        overflow-y: auto;\r\n        padding-right: 5px;\r\n        padding-left: 5px;\r\n        height: calc(100vh - 280px);\r\n      }\r\n\r\n      &--no_header {\r\n        .tabs__content__item__body {\r\n          height: calc(100vh - 275px);\r\n        }\r\n      }\r\n\r\n      &__footer {\r\n        width: 100%;\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: center;\r\n        align-items: center;\r\n        gap: 15px;\r\n        height: 45px;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
          "styleUrl": "./tabs-item.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 51
      },
      "extends": [],
      "implements": ["OnInit"],
      "templateData": "@if (isActive) {\r\n  @if (!tabBody && !tabHeader && !tabFooter) {\r\n    <div class=\"tabs__content__item\">\r\n      <ng-content></ng-content>\r\n    </div>\r\n  } @else {\r\n    <div class=\"tabs__content__item\" [class.tabs__content__item--no_header]=\"!tabHeader\">\r\n      <ng-content select=\"neo-tabs-header\"></ng-content>\r\n\r\n      <ng-content select=\"neo-tabs-content\"></ng-content>\r\n\r\n      <ng-content select=\"neo-tabs-footer\"></ng-content>\r\n    </div>\r\n  }\r\n}\r\n"
    },
    {
      "name": "TextAreaComponent",
      "id": "component-TextAreaComponent-5facc6a09f0f5230abac65bebc3b954e43106abdfa8094e54ba1f88d2741618c6d5cb7e49345a6ade5a30196d55fc6bd6c71dde7f8b84b7af7c218e0ea463534",
      "file": "src/app/shared/components/form-fields/text-area/text-area.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => TextAreaComponent), multi: true,\n}",
          "type": "component"
        }
      ],
      "selector": "neo-textarea",
      "styleUrls": [
        "./text-area.component.scss",
        "./../form-fields-settings.scss"
      ],
      "styles": [],
      "templateUrl": ["./text-area.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "autofocus",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "cols",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "number",
          "decorators": []
        },
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput para marcar el campo como deshabilitado\n",
          "description": "<p>Input para marcar el campo como deshabilitado</p>\n",
          "line": 49,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "string",
          "decorators": []
        },
        {
          "name": "inputSize",
          "defaultValue": "'m'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "InputSize",
          "decorators": []
        },
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "string",
          "decorators": []
        },
        {
          "name": "maxlength",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "number",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "string",
          "decorators": []
        },
        {
          "name": "placeholder",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "string",
          "decorators": []
        },
        {
          "name": "readonly",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "required",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "resize",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "rows",
          "defaultValue": "3",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 38,
          "type": "number",
          "decorators": []
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "string",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput para introducir el valor del campo\n",
          "description": "<p>Input para introducir el valor del campo</p>\n",
          "line": 60,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "new EventEmitter<string>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_disabled",
          "defaultValue": "signal(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<boolean>",
          "optional": false,
          "description": "",
          "line": 69
        },
        {
          "name": "_value",
          "defaultValue": "signal('')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string | null>",
          "optional": false,
          "description": "",
          "line": 68
        },
        {
          "name": "hasErrors",
          "defaultValue": "input<boolean>(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "InputSignal<boolean>",
          "optional": false,
          "description": "",
          "line": 44
        },
        {
          "name": "labelId",
          "defaultValue": "signal('')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string>",
          "optional": false,
          "description": "",
          "line": 70
        },
        {
          "name": "onChange",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "<p>Funciones de control de eventos</p>\n",
          "line": 111,
          "rawdescription": "\n\nFunciones de control de eventos\n"
        },
        {
          "name": "onTouched",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 112
        }
      ],
      "methodsClass": [
        {
          "name": "createUniqueId",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 83,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción para crear un id único para el label del input\n",
          "description": "<p>Función para crear un id único para el label del input</p>\n"
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 76,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onBlur",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 104,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción del evento `blur` del campo para marcar el campo como \"touched\"\n",
          "description": "<p>Función del evento <code>blur</code> del campo para marcar el campo como &quot;touched&quot;</p>\n"
        },
        {
          "name": "onInput",
          "args": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 94,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nFunción del evento `input` del campo para obtener el valor introducido\n",
          "description": "<p>Función del evento <code>input</code> del campo para obtener el valor introducido</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 2865,
                "end": 2870,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "value"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2850,
                "end": 2855,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 2856,
                "end": 2864,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 2857,
                  "end": 2863,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 154
                }
              }
            }
          ]
        },
        {
          "name": "registerOnChange",
          "args": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 124,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nUpdate form when DOM element value changes (view => model)\n",
          "description": "<p>Update form when DOM element value changes (view =&gt; model)</p>\n",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnTouched",
          "args": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 131,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nUpdate form when DOM element is blurred (view => model)\n",
          "description": "<p>Update form when DOM element is blurred (view =&gt; model)</p>\n",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setDisabledState",
          "args": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 138,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nWrite form disabled state to the DOM element (model => view)\n",
          "description": "<p>Write form disabled state to the DOM element (model =&gt; view)</p>\n",
          "jsdoctags": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "writeValue",
          "args": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 117,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nWrite form value to the DOM element (model => view)\n",
          "description": "<p>Write form value to the DOM element (model =&gt; view)</p>\n",
          "jsdoctags": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "FormsModule",
          "type": "module"
        },
        {
          "name": "TranslateModule",
          "type": "module"
        }
      ],
      "description": "<p>neo-textarea\nComponente para crear un campo de texto de varias líneas</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;neo-textarea [value]=&quot;&#39;Texto&#39;&quot; [label]=&quot;&#39;Label&#39;&quot; [name]=&quot;&#39;name&#39;&quot; [id]=&quot;&#39;id&#39;&quot; [placeholder]=&quot;&#39;Placeholder&#39;&quot; [rows]=&quot;5&quot; [cols]=&quot;10&quot; [maxlength]=&quot;100&quot; [resize]=&quot;true&quot; [inputSize]=&quot;&#39;m&#39;&quot;&gt;&lt;/neo-textarea&gt;</code></pre></div>",
      "rawdescription": "\n\nneo-textarea\nComponente para crear un campo de texto de varias líneas\n```html\n<neo-textarea [value]=\"'Texto'\" [label]=\"'Label'\" [name]=\"'name'\" [id]=\"'id'\" [placeholder]=\"'Placeholder'\" [rows]=\"5\" [cols]=\"10\" [maxlength]=\"100\" [resize]=\"true\" [inputSize]=\"'m'\"></neo-textarea>\n```",
      "type": "component",
      "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, EventEmitter, forwardRef, input, Input, InputSignal, Output, signal, WritableSignal } from '@angular/core';\r\nimport { FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { InputsUtilsService } from '@shared/components/form-fields/services/inputs-utils.service';\r\nimport { InputSize } from '../models/form-field.entity';\r\n\r\n/**\r\n * @name\r\n * neo-textarea\r\n * @description\r\n * Componente para crear un campo de texto de varias líneas\r\n * @example\r\n * <neo-textarea [value]=\"'Texto'\" [label]=\"'Label'\" [name]=\"'name'\" [id]=\"'id'\" [placeholder]=\"'Placeholder'\" [rows]=\"5\" [cols]=\"10\" [maxlength]=\"100\" [resize]=\"true\" [inputSize]=\"'m'\"></neo-textarea>\r\n */\r\n@Component({\r\n  selector: 'neo-textarea',\r\n  templateUrl: './text-area.component.html',\r\n  styleUrls: ['./text-area.component.scss', './../form-fields-settings.scss'],\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => TextAreaComponent),\r\n    multi: true,\r\n  }],\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule, TranslateModule]\r\n})\r\nexport class TextAreaComponent {\r\n\r\n  @Input() autofocus?: boolean = false;\r\n  @Input() readonly?: boolean = false;\r\n  @Input() required: boolean = false;\r\n  @Input() title?: string;\r\n  @Input() label?: string;\r\n  @Input() name?: string;\r\n  @Input() id?: string;\r\n  @Input() placeholder?: string;\r\n  @Input() rows: number = 3;\r\n  @Input() cols?: number;\r\n  @Input() maxlength?: number;\r\n  @Input() resize?: boolean = true;\r\n  @Input() inputSize: InputSize = 'm';\r\n  @Output() change = new EventEmitter<string>();\r\n  hasErrors: InputSignal<boolean> = input<boolean>(false);\r\n\r\n  /**\r\n   * Input para marcar el campo como deshabilitado\r\n   */\r\n  @Input() set disabled(status: boolean) {\r\n    this._disabled.set(status);\r\n  }\r\n\r\n  get disabled() {\r\n    return this._disabled();\r\n  }\r\n\r\n  /**\r\n   * Input para introducir el valor del campo\r\n   */\r\n  @Input() set value(value: string) {\r\n    this._value.set(value);\r\n  }\r\n\r\n  get value(): string | null {\r\n    return this._value();\r\n  }\r\n\r\n  _value: WritableSignal<string | null> = signal('');\r\n  _disabled: WritableSignal<boolean> = signal(false);\r\n  labelId: WritableSignal<string> = signal('');\r\n\r\n  constructor(\r\n    private readonly _inputsUtilsService: InputsUtilsService,\r\n  ) { }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.createUniqueId();\r\n  }\r\n\r\n  /**\r\n   * Función para crear un id único para el label del input\r\n   */\r\n  createUniqueId(): void {\r\n    if (!this.id && this.label && this.label !== '') {\r\n      this.id = this._inputsUtilsService.createUniqueId(this.label);\r\n      this.labelId.set(`label_${this.id}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Función del evento `input` del campo para obtener el valor introducido\r\n   * @param {string} value\r\n   */\r\n  onInput(value: string) {\r\n    this._value.set(value);\r\n    this.onChange(value);\r\n    this.onTouched();\r\n    this.change.emit(value);\r\n  }\r\n\r\n  /**\r\n   * Función del evento `blur` del campo para marcar el campo como \"touched\"\r\n   */\r\n  onBlur() {\r\n    this.onTouched();\r\n  }\r\n\r\n  /**\r\n  * Funciones de control de eventos\r\n  */\r\n  onChange: any = () => { };\r\n  onTouched: any = () => { };\r\n\r\n  /**\r\n   * Write form value to the DOM element (model => view)\r\n   */\r\n  writeValue(value: any) {\r\n    this._value = value;\r\n  }\r\n\r\n  /**\r\n   * Update form when DOM element value changes (view => model)\r\n   */\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  /**\r\n   * Update form when DOM element is blurred (view => model)\r\n   */\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /**\r\n   * Write form disabled state to the DOM element (model => view)\r\n   */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this._disabled.set(isDisabled);\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import 'base';\r\n\r\n.neo-textarea {\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  &--disabled {\r\n    cursor: not-allowed;\r\n    pointer-events: none;\r\n  }\r\n\r\n  &__label {\r\n    &--required {\r\n      &::after {\r\n        content: '*';\r\n        color: var(--danger-color);\r\n      }\r\n    }\r\n  }\r\n\r\n  &__wrapper {\r\n    position: relative;\r\n    &__field {\r\n      width: 100%;\r\n      border-radius: 5px;\r\n      box-sizing: border-box;\r\n      text-decoration: none;\r\n      padding: 10px;\r\n\r\n      &--has-error {\r\n        border: 1px solid var(--danger-color);\r\n      }\r\n\r\n      &.no-resize {\r\n        resize: none;\r\n      }\r\n\r\n      &:disabled {\r\n        cursor: not-allowed;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
          "styleUrl": "./text-area.component.scss"
        },
        {
          "data": ".neo-input,\r\n.neo-input-password,\r\n.neo-input-date-picker,\r\n.neo-textarea,\r\n.neo-select {\r\n  &__label {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    margin-bottom: 5px;\r\n    gap: 5px;\r\n  }\r\n}\r\n\r\n.neo-select__field,\r\n.neo-input__wrapper__field,\r\n.neo-input-password__wrapper__field,\r\n.neo-input-date-picker__wrapper__field,\r\n.neo-checkbox__control,\r\n.neo-checkbox__control__label,\r\n.neo-radiobutton__control,\r\n.neo-radiobutton__control__label {\r\n\r\n  &.size-xs {\r\n    font-size: 0.6rem;\r\n    line-height: 0.6rem;\r\n  }\r\n\r\n  &.size-s {\r\n    font-size: 0.7rem;\r\n    line-height: 0.7rem;\r\n  }\r\n\r\n  &.size-xm {\r\n    font-size: 0.75rem;\r\n    line-height: 0.75rem;\r\n  }\r\n\r\n  &.size-m {\r\n    font-size: 0.8rem;\r\n    line-height: 0.8rem;\r\n  }\r\n\r\n  &.size-l {\r\n    font-size: 0.85rem;\r\n    line-height: 0.85rem;\r\n  }\r\n\r\n  &.size-xl {\r\n    font-size: 0.9rem;\r\n    line-height: 0.9rem;\r\n  }\r\n}\r\n\r\n.neo-select__field,\r\n.neo-input__wrapper__field,\r\n.neo-input-password__wrapper__field,\r\n.neo-input-date-picker__wrapper__field,\r\n.neo-checkbox__control,\r\n.neo-radiobutton__control {\r\n  &.size-xs {\r\n    height: 25px;\r\n  }\r\n\r\n  &.size-s {\r\n    height: 28px;\r\n  }\r\n\r\n  &.size-xm {\r\n    height: 32px;\r\n  }\r\n\r\n  &.size-m {\r\n    height: 35px;\r\n  }\r\n\r\n  &.size-l {\r\n    height: 40px;\r\n  }\r\n\r\n  &.size-xl {\r\n    height: 45px;\r\n  }\r\n}\r\n\r\n.neo-checkbox__control,\r\n.neo-radiobutton__control {\r\n\r\n  &.size-xs &__checkmark,\r\n  &.size-s &__checkmark {\r\n    height: 10px;\r\n    width: 10px;\r\n\r\n    &::after {\r\n      border-width: 4px;\r\n    }\r\n  }\r\n\r\n  &.size-xm &__checkmark {\r\n    height: 14px;\r\n    width: 14px;\r\n\r\n    &::after {\r\n      border-width: 4px;\r\n    }\r\n  }\r\n\r\n  &.size-m &__checkmark {\r\n    height: 18px;\r\n    width: 18px;\r\n\r\n    &::after {\r\n      border-width: 5px;\r\n    }\r\n  }\r\n\r\n  &.size-l &__checkmark {\r\n    height: 22px;\r\n    width: 22px;\r\n\r\n    &::after {\r\n      border-width: 6px;\r\n    }\r\n  }\r\n\r\n  &.size-xl &__checkmark {\r\n    height: 26px;\r\n    width: 26px;\r\n\r\n    &::after {\r\n      border-width: 8px;\r\n    }\r\n  }\r\n}\r\n",
          "styleUrl": "./../form-fields-settings.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_inputsUtilsService",
            "type": "InputsUtilsService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 70,
        "jsdoctags": [
          {
            "name": "_inputsUtilsService",
            "type": "InputsUtilsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "accessors": {
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "status",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 49,
            "rawdescription": "\n\nInput para marcar el campo como deshabilitado\n",
            "description": "<p>Input para marcar el campo como deshabilitado</p>\n",
            "jsdoctags": [
              {
                "name": "status",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "",
            "returnType": "",
            "line": 53
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 60,
            "rawdescription": "\n\nInput para introducir el valor del campo\n",
            "description": "<p>Input para introducir el valor del campo</p>\n",
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 64
          }
        }
      },
      "templateData": "<div class=\"neo-textarea\" [title]=\"label || ''\">\r\n  @if (label) {\r\n    <label\r\n      [for]=\"id\"\r\n      [id]=\"labelId()\"\r\n      class=\"neo-textarea__label\"\r\n      [class.neo-textarea__label--required]=\"required\"\r\n    >\r\n      <span [innerHtml]=\"label\"></span>\r\n    </label>\r\n  }\r\n  <div class=\"neo-textarea__wrapper\">\r\n    <textarea\r\n      #textArea=\"ngModel\"\r\n      class=\"neo-textarea__wrapper__field size-{{ inputSize }}\"\r\n      [class.neo-textarea__wrapper__field--has-error]=\"\r\n        hasErrors() ||\r\n        (textArea?.errors && (textArea?.dirty || textArea?.touched)) ||\r\n        false\r\n      \"\r\n      [ngClass]=\"{ 'no-resize': !resize }\"\r\n      [(ngModel)]=\"value\"\r\n      (input)=\"onInput(textArea.value)\"\r\n      (blur)=\"onBlur()\"\r\n      [attr.id]=\"id\"\r\n      [attr.name]=\"name\"\r\n      [attr.rows]=\"rows\"\r\n      [attr.cols]=\"cols\"\r\n      [readonly]=\"readonly\"\r\n      [disabled]=\"_disabled()\"\r\n      [required]=\"required\"\r\n      [attr.maxlength]=\"maxlength\"\r\n      [attr.autofocus]=\"autofocus\"\r\n      [attr.aria-disabled]=\"_disabled()\"\r\n      [attr.aria-readonly]=\"readonly\"\r\n      [attr.aria-label]=\"placeholder\"\r\n      [attr.aria-labelledby]=\"labelId()\"\r\n      [attr.aria-required]=\"required\"\r\n      [attr.placeholder]=\"placeholder\"\r\n      [title]=\"title || label || placeholder || ''\"\r\n    ></textarea>\r\n  </div>\r\n</div>\r\n"
    },
    {
      "name": "ThemeToggleComponent",
      "id": "component-ThemeToggleComponent-53aa3524676b763602876cff3385d87ae9bdafb3f188c236304ee3e0f00f8ee0686859b3405ff8867a69d32c403a3184773dafc590e6bed24acf74d086cd9129",
      "file": "src/app/shared/components/theme-toggle/theme-toggle.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "neo-theme-toggle",
      "styleUrls": ["./theme-toggle.component.scss"],
      "styles": [],
      "templateUrl": ["./theme-toggle.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "color",
          "defaultValue": "'primary'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "ButtonColor",
          "decorators": []
        },
        {
          "name": "size",
          "defaultValue": "'m'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "ButtonSize",
          "decorators": []
        },
        {
          "name": "transparent",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "currentTheme",
          "defaultValue": "signal(LIGHT_THEME)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Signal<string>",
          "optional": false,
          "description": "",
          "line": 27
        },
        {
          "name": "DARK_THEME",
          "defaultValue": "DARK_THEME",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 22
        },
        {
          "name": "LIGHT_THEME",
          "defaultValue": "LIGHT_THEME",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 21
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 33,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "toggleTheme",
          "args": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 37,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "<p>neo-theme-toggle\nComponente para crear un toggle de tema mediante un botón y el servicio <code>ThemesService</code>.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;neo-theme-toggle color=&#39;primary&#39; size=&#39;m&#39;&gt;&lt;/neo-theme-toggle&gt;</code></pre></div>",
      "rawdescription": "\n\nneo-theme-toggle\nComponente para crear un toggle de tema mediante un botón y el servicio `ThemesService`.\n```html\n<neo-theme-toggle color='primary' size='m'></neo-theme-toggle>\n```",
      "type": "component",
      "sourceCode": "import { Component, Input, Signal, computed, signal } from '@angular/core';\r\nimport { DARK_THEME, LIGHT_THEME } from './model/theme.entity';\r\nimport { ThemesService } from './service/themes.service';\r\nimport { ButtonColor, ButtonSize } from '../button/models/button.entity';\r\n\r\n/**\r\n * @name\r\n * neo-theme-toggle\r\n * @description\r\n * Componente para crear un toggle de tema mediante un botón y el servicio `ThemesService`.\r\n * @example\r\n * <neo-theme-toggle color='primary' size='m'></neo-theme-toggle>\r\n */\r\n@Component({\r\n  selector: 'neo-theme-toggle',\r\n  templateUrl: './theme-toggle.component.html',\r\n  styleUrls: ['./theme-toggle.component.scss'],\r\n})\r\nexport class ThemeToggleComponent {\r\n\r\n  LIGHT_THEME = LIGHT_THEME;\r\n  DARK_THEME = DARK_THEME;\r\n\r\n  @Input() color: ButtonColor = 'primary';\r\n  @Input() size: ButtonSize = 'm';\r\n  @Input() transparent: boolean = true;\r\n  currentTheme: Signal<string> = signal(LIGHT_THEME);\r\n\r\n  constructor(\r\n    private readonly _themesService: ThemesService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.currentTheme = computed(() => this._themesService.getCurrentTheme());\r\n  }\r\n\r\n  toggleTheme(event: Event) {\r\n    event?.preventDefault();\r\n    event?.stopPropagation();\r\n    if (this._themesService.getCurrentTheme() === LIGHT_THEME)\r\n      this._themesService.setTheme(DARK_THEME);\r\n    else\r\n      this._themesService.setTheme(LIGHT_THEME);\r\n  }\r\n\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ":host {\r\n  display: flex;\r\n}\r\n",
          "styleUrl": "./theme-toggle.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_themesService",
            "type": "ThemesService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 27,
        "jsdoctags": [
          {
            "name": "_themesService",
            "type": "ThemesService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "templateData": "<neo-button\r\n  mode=\"icon\"\r\n  [color]=\"color\"\r\n  [transparent]=\"transparent\"\r\n  (click)=\"toggleTheme($event)\"\r\n  [size]=\"size\"\r\n  [title]=\"\r\n    (currentTheme() === LIGHT_THEME\r\n      ? 'THEME.DARK_THEME'\r\n      : 'THEME.LIGHT_THEME'\r\n    ) | translate\r\n  \"\r\n>\r\n  @if (currentTheme() === LIGHT_THEME) {\r\n    <i class=\"ri-moon-line\"></i>\r\n  } @else {\r\n    <i class=\"ri-sun-line\"></i>\r\n  }\r\n</neo-button>\r\n"
    }
  ],
  "modules": [
    {
      "name": "CalendarDatePickerModule",
      "id": "module-CalendarDatePickerModule-cc668c786da604fb0e88f5b8892e4fd60368f2f724e0f0308741941cb39082a5c780b95eeab536b5aeb5942a2145842361b33e4af2df0ca6ed4b398fc276a5fb",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/shared/components/form-fields/input-date-picker/calendar-date-picker.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { A11yModule } from '@angular/cdk/a11y';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ClickOutsideDirective } from '@shared/directives/click-outside.directive';\r\nimport { ClickableDirective } from '@shared/directives/clickable.directive';\r\nimport { EscapeKeyDirective } from '@shared/directives/escape-key.directive';\r\nimport { CalendarPickerComponent } from './calendar-picker/calendar-picker.component';\r\nimport { InputDatePickerComponent } from './input-date-picker.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    InputDatePickerComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    OverlayModule,\r\n    A11yModule,\r\n    CalendarPickerComponent,\r\n    ClickableDirective,\r\n    ClickOutsideDirective,\r\n    EscapeKeyDirective\r\n  ],\r\n  exports: [\r\n    InputDatePickerComponent,\r\n    CalendarPickerComponent\r\n  ]\r\n})\r\nexport class CalendarDatePickerModule { }\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "InputDatePickerComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "CalendarPickerComponent"
            },
            {
              "name": "ClickOutsideDirective"
            },
            {
              "name": "ClickableDirective"
            },
            {
              "name": "EscapeKeyDirective"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "CalendarPickerComponent"
            },
            {
              "name": "InputDatePickerComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "CardModule",
      "id": "module-CardModule-791821368f2b7fbf717a492f3cde388df2458a1455b73baecb08d53d85f55c36a40fcd7a99ffb29ad182b7af174f7d64fa88c239f5a3447555839b60d05803b8",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/shared/components/card/card.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { ButtonComponent } from '../button/button.component';\r\nimport { CardComponent } from './card.component';\r\nimport { CardHeaderDirective } from './card-header/card-header.directive';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CardComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ButtonComponent,\r\n    CardHeaderDirective,\r\n    TranslateModule\r\n  ],\r\n  exports: [\r\n    CardComponent,\r\n    CardHeaderDirective\r\n  ]\r\n})\r\nexport class CardModule { }\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "CardComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ButtonComponent"
            },
            {
              "name": "CardHeaderDirective"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "CardComponent"
            },
            {
              "name": "CardHeaderDirective"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "FormFields",
      "id": "module-FormFields-8a5d78199afefe2d0a771c52d133703778ca6c95161caeb978daf399ea03d8264874f3b484f79a67761e38f7fcec96a1b2840bce6aa6bfefa5d2f9341224a88c",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/shared/components/form-fields/form-fields.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { InputComponent } from './input/input.component';\r\nimport { TextAreaComponent } from './text-area/text-area.component';\r\nimport { InputPasswordComponent } from './input-password/input-password.component';\r\nimport { SelectModule } from './select/select.module';\r\nimport { CalendarDatePickerModule } from './input-date-picker/calendar-date-picker.module';\r\nimport { FormErrorComponent } from './form-error/form-error.component';\r\nimport { CheckboxComponent } from './checkbox/checkbox.component';\r\nimport { RadioButtonModule } from './radio-button/radio-button.module';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    InputComponent,\r\n    TextAreaComponent,\r\n    InputPasswordComponent,\r\n    SelectModule,\r\n    CheckboxComponent,\r\n    FormErrorComponent,\r\n    CalendarDatePickerModule,\r\n    RadioButtonModule\r\n  ],\r\n  exports: [\r\n    InputComponent,\r\n    TextAreaComponent,\r\n    InputPasswordComponent,\r\n    FormErrorComponent,\r\n    SelectModule,\r\n    CheckboxComponent,\r\n    CalendarDatePickerModule,\r\n    RadioButtonModule\r\n  ]\r\n})\r\nexport class FormFields { }\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "CalendarDatePickerModule"
            },
            {
              "name": "CheckboxComponent"
            },
            {
              "name": "FormErrorComponent"
            },
            {
              "name": "InputComponent"
            },
            {
              "name": "InputPasswordComponent"
            },
            {
              "name": "RadioButtonModule"
            },
            {
              "name": "SelectModule"
            },
            {
              "name": "TextAreaComponent"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "CalendarDatePickerModule"
            },
            {
              "name": "CheckboxComponent"
            },
            {
              "name": "FormErrorComponent"
            },
            {
              "name": "InputComponent"
            },
            {
              "name": "InputPasswordComponent"
            },
            {
              "name": "RadioButtonModule"
            },
            {
              "name": "SelectModule"
            },
            {
              "name": "TextAreaComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "MenuContextModule",
      "id": "module-MenuContextModule-958706dab05f9408ee0838a53f17f02350db8f197c09f6a0b07aae81c43e55888041c3225d2d0288cc8c3f28a24ff0f9eeb20032932e4b3484f3e78d1f8abb75",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/shared/components/menu-context/menu-context.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { A11yModule } from '@angular/cdk/a11y';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { ClickOutsideDirective } from '@shared/directives/click-outside.directive';\r\nimport { ClickableDirective } from '@shared/directives/clickable.directive';\r\nimport { EscapeKeyDirective } from '@shared/directives/escape-key.directive';\r\nimport { ButtonComponent } from '../button/button.component';\r\nimport { MenuContextComponent } from './menu-context.component';\r\nimport { ItemMenuContextComponent } from './item-menu-context/item-menu-context.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MenuContextComponent,\r\n    ItemMenuContextComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ClickableDirective,\r\n    ClickOutsideDirective,\r\n    EscapeKeyDirective,\r\n    ButtonComponent,\r\n    TranslateModule,\r\n    A11yModule,\r\n    OverlayModule\r\n  ],\r\n  exports: [\r\n    MenuContextComponent,\r\n    ItemMenuContextComponent\r\n  ]\r\n})\r\nexport class MenuContextModule { }\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ItemMenuContextComponent"
            },
            {
              "name": "MenuContextComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ButtonComponent"
            },
            {
              "name": "ClickOutsideDirective"
            },
            {
              "name": "ClickableDirective"
            },
            {
              "name": "EscapeKeyDirective"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ItemMenuContextComponent"
            },
            {
              "name": "MenuContextComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "RadioButtonModule",
      "id": "module-RadioButtonModule-311f37f2b3041adbf55713ecab6cebf4d61ec97f4da4334b53f9e2e9f38a94474805e43c7cf115d6a5fc49c5c52e529a124830e0d4236512cfeaf9d60aa19921",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/shared/components/form-fields/radio-button/radio-button.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RadioButtonGroupComponent } from './radio-button-group/radio-button-group.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RadioButtonComponent } from './radio-button.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    RadioButtonGroupComponent,\r\n    RadioButtonComponent,\r\n  ],\r\n  imports: [\r\n    FormsModule,\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    RadioButtonGroupComponent,\r\n    RadioButtonComponent\r\n  ]\r\n})\r\nexport class RadioButtonModule { }\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "RadioButtonComponent"
            },
            {
              "name": "RadioButtonGroupComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "RadioButtonComponent"
            },
            {
              "name": "RadioButtonGroupComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "SelectModule",
      "id": "module-SelectModule-439b8bb523ae6f4d173608d664bfb8653b2159be459c3c20311cc1e8610a31b28ff0ea10bba71c6757e9d60856653c21070d028f6bba10efc81cc64482ed106c",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/shared/components/form-fields/select/select.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { OptionsComponent } from './options/options.component';\r\nimport { A11yModule } from '@angular/cdk/a11y';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { ClickOutsideDirective } from '@shared/directives/click-outside.directive';\r\nimport { ClickableDirective } from '@shared/directives/clickable.directive';\r\nimport { EscapeKeyDirective } from '@shared/directives/escape-key.directive';\r\nimport { SafeHtmlPipe } from '@shared/pipes/safeHtml/safe-html.pipe';\r\nimport { StripHtmlPipe } from '@shared/pipes/striphtml/striphtml.pipe';\r\nimport { SelectComponent } from './select.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    SelectComponent,\r\n    OptionsComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    TranslateModule,\r\n    A11yModule,\r\n    OverlayModule,\r\n    SafeHtmlPipe,\r\n    StripHtmlPipe,\r\n    ClickableDirective,\r\n    ClickOutsideDirective,\r\n    EscapeKeyDirective\r\n  ],\r\n  exports: [\r\n    SelectComponent,\r\n    OptionsComponent\r\n  ]\r\n})\r\nexport class SelectModule { }\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "OptionsComponent"
            },
            {
              "name": "SelectComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClickOutsideDirective"
            },
            {
              "name": "ClickableDirective"
            },
            {
              "name": "EscapeKeyDirective"
            },
            {
              "name": "SafeHtmlPipe"
            },
            {
              "name": "StripHtmlPipe"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "OptionsComponent"
            },
            {
              "name": "SelectComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "SideMenuModule",
      "id": "module-SideMenuModule-6995c5253fe3354457c22c9a1b66af5de44894ab920fc8295ce3f208725fc2c61e7ab5aac3de53498276f25e9a872470980a11aeddb7ae3c60e63416b6a70076",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/shared/components/side-menu/side-menu.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SideMenuComponent } from './side-menu.component';\r\nimport { SideMenuItemComponent } from './side-menu-item/side-menu-item.component';\r\nimport { RouterLinkActive, RouterLink } from '@angular/router';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { ClickableDirective } from '@shared/directives/clickable.directive';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    SideMenuComponent,\r\n    SideMenuItemComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    TranslateModule,\r\n    RouterLinkActive,\r\n    RouterLink,\r\n    ClickableDirective\r\n  ],\r\n  exports: [\r\n    SideMenuComponent,\r\n    SideMenuItemComponent\r\n  ]\r\n})\r\nexport class SideMenuModule { }\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "SideMenuComponent"
            },
            {
              "name": "SideMenuItemComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClickableDirective"
            },
            {
              "name": "RouterLink"
            },
            {
              "name": "RouterLinkActive"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "SideMenuComponent"
            },
            {
              "name": "SideMenuItemComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "TabsModule",
      "id": "module-TabsModule-11770f013a11337e75a6acd1ce67bab8838ee424b20817a96969074c5c604b782e3fa8724623a747d6b938e757dd28e3ca7418bd5895b0454ded5d13bfe3e77a",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/shared/components/tabs/tabs.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ClickableDirective } from '@shared/directives/clickable.directive';\r\nimport { TabsItemComponent } from './tabs-item/tabs-item.component';\r\nimport { TabsComponent } from './tabs.component';\r\nimport { TabLabelDirective } from './directives/tab-label.directive';\r\nimport { TabsFooterComponent } from './tabs-item/tabs-footer/tabs-footer.component';\r\nimport { TabsBodyComponent } from './tabs-item/tabs-body/tabs-body.component';\r\nimport { TabsHeaderComponent } from './tabs-item/tabs-header/tabs-header.component';\r\nimport { TabContentDirective } from './directives/tab-content.directive';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TabsComponent,\r\n    TabsItemComponent,\r\n    TabsHeaderComponent,\r\n    TabsFooterComponent,\r\n    TabsBodyComponent,\r\n    TabLabelDirective\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    ClickableDirective,\r\n    TabContentDirective\r\n  ],\r\n  exports: [\r\n    TabsComponent,\r\n    TabsItemComponent,\r\n    TabsHeaderComponent,\r\n    TabsFooterComponent,\r\n    TabsBodyComponent,\r\n    TabLabelDirective,\r\n    TabContentDirective\r\n  ]\r\n})\r\nexport class TabsModule { }\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "TabLabelDirective"
            },
            {
              "name": "TabsBodyComponent"
            },
            {
              "name": "TabsComponent"
            },
            {
              "name": "TabsFooterComponent"
            },
            {
              "name": "TabsHeaderComponent"
            },
            {
              "name": "TabsItemComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClickableDirective"
            },
            {
              "name": "TabContentDirective"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "TabContentDirective"
            },
            {
              "name": "TabLabelDirective"
            },
            {
              "name": "TabsBodyComponent"
            },
            {
              "name": "TabsComponent"
            },
            {
              "name": "TabsFooterComponent"
            },
            {
              "name": "TabsHeaderComponent"
            },
            {
              "name": "TabsItemComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ThemeToggleModule",
      "id": "module-ThemeToggleModule-700ce0f55d59ae07b5d8f8da11e5cf49add888c6fbafeb77c11c84571925006e114cd2f7fb378b24ebb49e236006fd2371d874fd21adf612b730e9f8be75682a",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/shared/components/theme-toggle/theme-toggle.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { ButtonComponent } from '../button/button.component';\r\nimport { ThemeToggleComponent } from './theme-toggle.component';\r\nimport { CustomThemesDirective } from './directive/custom-themes.directive';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ThemeToggleComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ButtonComponent,\r\n    TranslateModule,\r\n    CustomThemesDirective\r\n  ],\r\n  exports: [\r\n    ThemeToggleComponent,\r\n    CustomThemesDirective\r\n  ]\r\n})\r\nexport class ThemeToggleModule { }\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ThemeToggleComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ButtonComponent"
            },
            {
              "name": "CustomThemesDirective"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "CustomThemesDirective"
            },
            {
              "name": "ThemeToggleComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    }
  ],
  "miscellaneous": {
    "variables": [
      {
        "name": "BreadCrum",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/breadcrum/breadcrum.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\r\n  name: 'Breadcrum',\r\n  args: {\r\n    breadcrumbs: [\r\n      {\r\n        label: 'Page',\r\n        url: '/#'\r\n      },\r\n      {\r\n        label: 'Page 2',\r\n        url: '/#/#'\r\n      }\r\n    ]\r\n  },\r\n}"
      },
      {
        "name": "Button",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/button/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\r\n  name: 'Botón',\r\n  args: {\r\n    color: \"primary\",\r\n    title: 'Título del botón',\r\n  },\r\n}"
      },
      {
        "name": "Card",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/card/card.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\r\n  name: 'Card',\r\n  args: {},\r\n}"
      },
      {
        "name": "DARK_THEME",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/theme-toggle/model/theme.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "string",
        "defaultValue": "'dark'"
      },
      {
        "name": "DEFAULT_FORMAT",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/form-fields/input-date-picker/models/date-picker.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "string",
        "defaultValue": "'YYYY-MM-DD'"
      },
      {
        "name": "DEFAULT_MENU_POSITION",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/side-menu/model/menu.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "SideMenuPosition.LEFT",
        "rawdescription": "Tamaño por defecto y posición por defecto del menú lateral si no se especifica",
        "description": "<p>Tamaño por defecto y posición por defecto del menú lateral si no se especifica</p>\n"
      },
      {
        "name": "DEFAULT_POSITION",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/sidebar-panel/models/sidebar-panel.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "SidebarbarPanelPosition.RIGHT",
        "rawdescription": "Tamaño por defecto y posición por defecto del panel lateral si no se especifica",
        "description": "<p>Tamaño por defecto y posición por defecto del panel lateral si no se especifica</p>\n"
      },
      {
        "name": "DEFAULT_SIZE",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/sidebar-panel/models/sidebar-panel.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "SidebarbarPanelSize.SMALL"
      },
      {
        "name": "DEFAULT_TITLE",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/tabs/models/tabs.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "string",
        "defaultValue": "'Tab title'"
      },
      {
        "name": "FADE_IN_OUT",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/animations/fade-in-out.animation.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "trigger('fadeInOut', [\r\n  transition(':enter', [\r\n    style({ opacity: 0 }),\r\n    animate('350ms', style({ opacity: 1 }))\r\n  ]),\r\n  transition(':leave', [\r\n    style({ opacity: 1 }),\r\n    animate('350ms', style({ opacity: 0 }))\r\n  ])\r\n])"
      },
      {
        "name": "FADE_IN_OUT_MENU",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/side-menu/animations/fade-in-out.animation.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "trigger('fadeInOutMenu', [\r\n    transition(':enter', [\r\n        style({ opacity: 0 }),\r\n        animate('350ms', style({ opacity: 1 }))\r\n    ]),\r\n    transition(':leave', [\r\n        style({ opacity: 1 }),\r\n        animate('350ms', style({ opacity: 0 }))\r\n    ])\r\n])"
      },
      {
        "name": "FADE_IN_OUT_PANEL",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/sidebar-panel/animations/fade-in-out.animation.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "trigger('fadeInOutPanel', [\r\n  transition(':enter', [\r\n    style({ opacity: 0 }),\r\n    animate('350ms', style({ opacity: 1 }))\r\n  ]),\r\n  transition(':leave', [\r\n    style({ opacity: 1 }),\r\n    animate('350ms', style({ opacity: 0 }))\r\n  ])\r\n])"
      },
      {
        "name": "IconButton",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/button/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\r\n  name: 'Botón con icono',\r\n  args: {\r\n    color: \"primary\",\r\n    title: 'Título del botón',\r\n    mode: 'icon',\r\n  },\r\n  render: (args: StoryType) => ({\r\n    props: args,\r\n    template: `\r\n      <neo-button ${argsToTemplate(args)}><i class=\"ri-arrow-up-line\"></i></neo-button>\r\n    `\r\n  })\r\n}"
      },
      {
        "name": "LIGHT_THEME",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/theme-toggle/model/theme.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "string",
        "defaultValue": "'light'"
      },
      {
        "name": "LOGO",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/logo/models/logo.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "string",
        "defaultValue": "\"assets/images/logo/logo_512.png\""
      },
      {
        "name": "LOGO_DARK",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/logo/models/logo.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "string",
        "defaultValue": "\"assets/images/logo/logo_512_dark.png\""
      },
      {
        "name": "LOGO_SMALL",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/logo/models/logo.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "string",
        "defaultValue": "\"assets/images/logo/logo_100.png\""
      },
      {
        "name": "LOGO_SMALL_DARK",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/logo/models/logo.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "string",
        "defaultValue": "\"assets/images/logo/logo_100_dark.png\""
      },
      {
        "name": "meta",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/breadcrum/breadcrum.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Meta<BreadcrumComponent>",
        "defaultValue": "{\r\n  title: 'BreadCrum',\r\n  component: BreadcrumComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [\r\n        TranslateModule.forRoot(),\r\n        RouterTestingModule\r\n      ],\r\n      providers: []\r\n    }),\r\n  ],\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n    },\r\n  }),\r\n  argTypes: {\r\n    ngOnInit: {\r\n      control: { type: null }\r\n    },\r\n  },\r\n}"
      },
      {
        "name": "meta",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/button/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Meta<ButtonComponent>",
        "defaultValue": "{\r\n  title: 'Botones',\r\n  component: ButtonComponent,\r\n  render: (args: ButtonComponent) => ({\r\n    props: {\r\n      ...args,\r\n    },\r\n    template: `\r\n      <neo-button ${argsToTemplate(args)}>Botón</neo-button>\r\n    `\r\n  }),\r\n  argTypes: {\r\n    click: {\r\n      control: { type: null }\r\n    },\r\n    _title: {\r\n      table: { disable: true }\r\n    },\r\n    clickOnButton: {\r\n      control: { type: null }\r\n    },\r\n    ngAfterViewInit: {\r\n      table: { disable: true }\r\n    },\r\n    btnContent: {\r\n      table: { disable: true }\r\n    },\r\n  },\r\n}"
      },
      {
        "name": "meta",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/card/card.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Meta<CardComponent>",
        "defaultValue": "{\r\n  title: 'Cards',\r\n  component: CardComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [],\r\n      imports: [\r\n        CardModule,\r\n        TranslateModule.forRoot(),\r\n      ],\r\n      providers: []\r\n    }),\r\n  ],\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n    },\r\n    template: `\r\n      <neo-card ${argsToTemplate(args)}>\r\n        <span>Contenido de la card</span>\r\n      </neo-card>\r\n      `\r\n  }),\r\n  argTypes: {\r\n    collapsed: {\r\n      control: { type: null }\r\n    },\r\n    _isCollapsed: {\r\n      table: { disable: true }\r\n    },\r\n    isCollapsedIcon: {\r\n      control: { type: null }\r\n    },\r\n    neoCardHeader: {\r\n      control: { type: null }\r\n    },\r\n    toggleCollapse: {\r\n      control: { type: null }\r\n    },\r\n    collapse: {\r\n      control: { type: null }\r\n    },\r\n    expand: {\r\n      control: { type: null }\r\n    }\r\n  },\r\n}"
      },
      {
        "name": "NEO_RADIO_BUTTON_GROUP",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/form-fields/radio-button/radio-button-group/radio-button-group.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new InjectionToken<RadioButtonGroupComponent>('RadioButtonGroupComponent')",
        "rawdescription": "Permite inyectar el componente RadioButtonGroupComponent en el componente RadioButtonComponent\r\npara poder acceder a sus propiedades y métodos desde el componente RadioButtonComponent hijo",
        "description": "<p>Permite inyectar el componente RadioButtonGroupComponent en el componente RadioButtonComponent\npara poder acceder a sus propiedades y métodos desde el componente RadioButtonComponent hijo</p>\n"
      },
      {
        "name": "PREFIX_THEME_CLASS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/theme-toggle/model/theme.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "string",
        "defaultValue": "'theme-'"
      },
      {
        "name": "preview",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": ".storybook/preview.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Preview",
        "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    }\n  },\n}"
      },
      {
        "name": "SLIDE_BY_POSITION",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/side-menu/animations/slide-by-position.animation.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "trigger('slideByPosition', [\r\n\r\n  state('left', style({ transform: 'translateX(0%)' })),\r\n  state('right', style({ transform: 'translateX(0%)' })),\r\n\r\n  // Desplazamiento de derecha hacia izquierda al abrirse y de izquierda hacia derecha al cerrarse\r\n  transition('void => left', [\r\n    style({ transform: 'translateX(-100%)' }),\r\n    animate('350ms ease-in', style({ transform: 'translateX(0%)' })),\r\n  ]),\r\n  transition('left => void', [\r\n    animate('350ms ease-out', style({ transform: 'translateX(-100%)' })),\r\n  ]),\r\n\r\n  // Desplazamiento de izquierda hacia derecha al abrirse y de derecha hacia izquierda al cerrarse\r\n  transition('void => right', [\r\n    style({ transform: 'translateX(100%)' }),\r\n    animate('350ms ease-in', style({ transform: 'translateX(0%)' })),\r\n  ]),\r\n  transition('right => void', [\r\n    animate('350ms ease-out', style({ transform: 'translateX(100%)' })),\r\n  ])\r\n])",
        "rawdescription": "Animación para deslizar el panel hacia arriba, abajo, derecha o izquierda utilizando transform: translateX()\r\nsegún la posición pasado por parámetro que puede ser \"left\" o \"right\".\r\nDeberá desplazarse 100% o -100% según la posición hasta llegar a 0%. Al cerrarse, deberá hacer el recorrido inverso.\r\n--\r\nEl parametro \"left\" o \"right\" indica la posición final del panel",
        "description": "<h2>Animación para deslizar el panel hacia arriba, abajo, derecha o izquierda utilizando transform: translateX()\nsegún la posición pasado por parámetro que puede ser &quot;left&quot; o &quot;right&quot;.\nDeberá desplazarse 100% o -100% según la posición hasta llegar a 0%. Al cerrarse, deberá hacer el recorrido inverso.</h2>\n<p>El parametro &quot;left&quot; o &quot;right&quot; indica la posición final del panel</p>\n"
      },
      {
        "name": "SLIDE_BY_POSITION",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/components/sidebar-panel/animations/slide-by-position.animation.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "trigger('slideByPosition', [\r\n\r\n  state('top', style({ transform: 'translateY(0%)' })),\r\n  state('bottom', style({ transform: 'translateY(0%)' })),\r\n  state('left', style({ transform: 'translateX(0%)' })),\r\n  state('right', style({ transform: 'translateX(0%)' })),\r\n\r\n  // Desplazamiento de arriba hacia abajo al abrirse y de abajo hacia arriba al cerrarse\r\n  transition('void => top', [\r\n    style({ transform: 'translateY(-100%)', top: 0, left: 0, right: 'auto', bottom: 'auto' }),\r\n    animate('350ms ease-in', style({ transform: 'translateY(0%)', top: 0, left: 0, right: 'auto', bottom: 'auto' })),\r\n  ]),\r\n  transition('top => void', [\r\n    animate('350ms ease-out', style({ transform: 'translateY(-100%)', top: 0, left: 0, right: 'auto', bottom: 'auto' })),\r\n  ]),\r\n\r\n  // Desplazamiento de abajo hacia arriba al abrirse y de arriba hacia abajo al cerrarse\r\n  transition('void => bottom', [\r\n    style({ transform: 'translateY(100%)', bottom: 0, left: 0, right: 'auto', top: 'auto' }),\r\n    animate('350ms ease-in', style({ transform: 'translateY(0%)', bottom: 0, left: 0, right: 'auto', top: 'auto' })),\r\n  ]),\r\n  transition('bottom => void', [\r\n    animate('350ms ease-out', style({ transform: 'translateY(100%)', bottom: 0, left: 0, right: 'auto', top: 'auto' })),\r\n  ]),\r\n\r\n  // Desplazamiento de izquierda hacia derecha al abrirse y de derecha hacia izquierda al cerrarse\r\n  transition('void => left', [\r\n    style({ transform: 'translateX(-100%)', top: 0, left: 0, right: 'auto', bottom: 'auto' }),\r\n    animate('350ms ease-in', style({ transform: 'translateX(0%)', top: 0, left: 0, right: 'auto', bottom: 'auto' })),\r\n  ]),\r\n  transition('left => void', [\r\n    animate('350ms ease-out', style({ transform: 'translateX(-100%)', top: 0, left: 0, right: 'auto', bottom: 'auto' })),\r\n  ]),\r\n\r\n  // Desplazamiento de derecha hacia izquierda al abrirse y de izquierda hacia derecha al cerrarse\r\n  transition('void => right', [\r\n    style({ transform: 'translateX(100%)', top: 0, right: 0, left: 'auto', bottom: 'auto' }),\r\n    animate('350ms ease-in', style({ transform: 'translateX(0%)', top: 0, right: 0, left: 'auto', bottom: 'auto' })),\r\n  ]),\r\n  transition('right => void', [\r\n    animate('350ms ease-out', style({ transform: 'translateX(100%)', top: 0, right: 0, left: 'auto', bottom: 'auto' })),\r\n  ])\r\n])",
        "rawdescription": "Animación para deslizar el panel hacia arriba, abajo, derecha o izquierda utilizando transform: translateX() o transform: translateY()\r\nsegún la posición pasado por parámetro que puede ser \"top\", \"bottom\", \"left\" o \"right\".\r\nDeberá desplazarse 100% o -100% según la posición hasta llegar a 0%. Al cerrarse, deberá hacer el recorrido inverso.\r\n--\r\nEl parametro \"top\", \"bottom\", \"left\" o \"right\" indica la posición final del panel",
        "description": "<h2>Animación para deslizar el panel hacia arriba, abajo, derecha o izquierda utilizando transform: translateX() o transform: translateY()\nsegún la posición pasado por parámetro que puede ser &quot;top&quot;, &quot;bottom&quot;, &quot;left&quot; o &quot;right&quot;.\nDeberá desplazarse 100% o -100% según la posición hasta llegar a 0%. Al cerrarse, deberá hacer el recorrido inverso.</h2>\n<p>El parametro &quot;top&quot;, &quot;bottom&quot;, &quot;left&quot; o &quot;right&quot; indica la posición final del panel</p>\n"
      },
      {
        "name": "SLIDE_TO_BOTTOM",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/animations/slide-to-bottom.animation.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "trigger('slideToBottom', [\r\n  transition(':enter', [\r\n    style({ transform: 'translateY(-100%)' }),\r\n    animate('350ms ease-in', style({ transform: 'translateY(0%)' })),\r\n  ]),\r\n  transition(\":leave\", [\r\n    style({ transform: 'translateY(0%)' }),\r\n    animate('350ms ease-out', style({ transform: 'translateY(-100%)' })),\r\n  ])\r\n])",
        "rawdescription": "Animación para deslizar hacia abajo",
        "description": "<p>Animación para deslizar hacia abajo</p>\n"
      },
      {
        "name": "SLIDE_TO_LEFT",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/animations/slide-to-left.animation.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "trigger('slideToLeft',[\r\n  transition(':enter', [\r\n    style({ transform: 'translateX(100%)' }),\r\n    animate('350ms ease-in', style({ transform: 'translateX(0%)' })),\r\n  ]),\r\n  transition(\":leave\", [\r\n    style({ transform: 'translateX(0%)' }),\r\n    animate('350ms ease-out', style({ transform: 'translateX(100%)' })),\r\n  ])\r\n])",
        "rawdescription": "Animación para deslizar hacia la izquierda",
        "description": "<p>Animación para deslizar hacia la izquierda</p>\n"
      },
      {
        "name": "SLIDE_TO_RIGHT",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/animations/slide-to-right.animation.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "trigger('slideToRight', [\r\n  state('previous', style({ transform: 'translateX(-100%)' })),\r\n  transition(':enter', [\r\n    style({ transform: 'translateX(-100%)' }),\r\n    animate('350ms ease-in', style({ transform: 'translateX(0%)' })),\r\n  ]),\r\n  transition(\":leave\", [\r\n    animate('350ms ease-out', style({ transform: 'translateX(-100%)' })),\r\n  ])\r\n])",
        "rawdescription": "Animación para deslizar el hacia la derecha",
        "description": "<p>Animación para deslizar el hacia la derecha</p>\n"
      },
      {
        "name": "SLIDE_TO_TOP",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/animations/slide-to-top.animation.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "trigger('slideToTop', [\r\n  transition(':enter', [\r\n    style({ transform: 'translateY(100%)' }),\r\n    animate('350ms ease-in', style({ transform: 'translateY(0%)' })),\r\n  ]),\r\n  transition(\":leave\", [\r\n    style({ transform: 'translateY(0%)' }),\r\n    animate('350ms ease-out', style({ transform: 'translateY(100%)' })),\r\n  ])\r\n])",
        "rawdescription": "Animación para deslizar hacia arriba",
        "description": "<p>Animación para deslizar hacia arriba</p>\n"
      }
    ],
    "functions": [],
    "typealiases": [
      {
        "name": "ButtonColor",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"primary\" | \"secondary\"",
        "file": "src/app/shared/components/button/models/button.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "ButtonMode",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"button\" | \"icon\"",
        "file": "src/app/shared/components/button/models/button.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "ButtonSize",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"xs\" | \"s\" | \"xm\" | \"m\" | \"l\" | \"xl\"",
        "file": "src/app/shared/components/button/models/button.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "ButtonType",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"submit\" | \"reset\" | \"button\"",
        "file": "src/app/shared/components/button/models/button.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "CalendarType",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"week\" | \"day\" | \"range\"",
        "file": "src/app/shared/components/form-fields/input-date-picker/models/date-picker.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "DatePickerType",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"day\" | \"week\" | \"range\"",
        "file": "src/app/shared/components/form-fields/input-date-picker/models/date-picker.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "DirectionRadioButtonGroup",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"horizontal\" | \"vertical\"",
        "file": "src/app/shared/components/form-fields/radio-button/models/radio-button.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "IconPosition",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"left\" | \"right\"",
        "file": "src/app/shared/components/section-title/models/section-title.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "InputAutocomplete",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"on\" | \"off\"",
        "file": "src/app/shared/components/form-fields/models/form-field.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "InputSize",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"xs\" | \"s\" | \"xm\" | \"m\" | \"l\" | \"xl\"",
        "file": "src/app/shared/components/form-fields/models/form-field.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "InputType",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"text\" | \"number\" | \"hidden\" | \"tel\" | \"color\" | \"url\" | \"email\" | \"range\"",
        "file": "src/app/shared/components/form-fields/models/form-field.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "LogoSize",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"s\" | \"m\"",
        "file": "src/app/shared/components/logo/models/logo.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "PaginationType",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"rangenumber\" | \"fullnumber\" | \"nonumber\" | \"dividenumber\"",
        "file": "src/app/shared/components/paginator/models/paginator.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "PaginatorPosition",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"right\" | \"left\"",
        "file": "src/app/shared/components/paginator/models/paginator.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "ProgressBarSize",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"xs\" | \"s\" | \"xm\" | \"m\" | \"l\" | \"xl\"",
        "file": "src/app/shared/components/progress-bar/models/progress-bar.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "SpinnerPosition",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"fixed\" | \"absolute\"",
        "file": "src/app/shared/components/spinner/models/spinner.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "SpinnerSize",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"xs\" | \"s\" | \"xm\" | \"m\" | \"l\" | \"xl\"",
        "file": "src/app/shared/components/spinner/models/spinner.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<BreadcrumComponent>",
        "file": "src/app/shared/components/breadcrum/breadcrum.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 183
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<ButtonComponent>",
        "file": "src/app/shared/components/button/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 183
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<CardComponent>",
        "file": "src/app/shared/components/card/card.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 183
      },
      {
        "name": "StoryType",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "",
        "file": "src/app/shared/components/button/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 193
      },
      {
        "name": "TabOrientation",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"h\" | \"v\"",
        "file": "src/app/shared/components/tabs/models/tabs.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "TabType",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"tab\" | \"router-tab\"",
        "file": "src/app/shared/components/tabs/models/tabs.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "ThemeType",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": " | ",
        "file": "src/app/shared/components/theme-toggle/model/theme.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "ViewMode",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"years\" | \"months\" | \"default\"",
        "file": "src/app/shared/components/form-fields/input-date-picker/models/date-picker.entity.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      }
    ],
    "enumerations": [
      {
        "name": "SidebarbarPanelPosition",
        "childs": [
          {
            "name": "LEFT",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "left"
          },
          {
            "name": "RIGHT",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "right"
          },
          {
            "name": "TOP",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "top"
          },
          {
            "name": "BOTTOM",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "bottom"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "<p>Enumerado para la posición del panel lateral</p>\n",
        "file": "src/app/shared/components/sidebar-panel/models/sidebar-panel.entity.ts"
      },
      {
        "name": "SidebarbarPanelSize",
        "childs": [
          {
            "name": "SMALL",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "s"
          },
          {
            "name": "MEDIUM",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "m"
          },
          {
            "name": "LARGE",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "l"
          },
          {
            "name": "EXTRA_LARGE",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "xl"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "<p>Enumerado para el tamaño del panel lateral</p>\n",
        "file": "src/app/shared/components/sidebar-panel/models/sidebar-panel.entity.ts"
      },
      {
        "name": "SideMenuPosition",
        "childs": [
          {
            "name": "LEFT",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "left"
          },
          {
            "name": "RIGHT",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "right"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "<p>Enumerado para la posición del menú lateral</p>\n",
        "file": "src/app/shared/components/side-menu/model/menu.entity.ts"
      }
    ],
    "groupedVariables": {
      "src/app/shared/components/breadcrum/breadcrum.stories.ts": [
        {
          "name": "BreadCrum",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/breadcrum/breadcrum.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\r\n  name: 'Breadcrum',\r\n  args: {\r\n    breadcrumbs: [\r\n      {\r\n        label: 'Page',\r\n        url: '/#'\r\n      },\r\n      {\r\n        label: 'Page 2',\r\n        url: '/#/#'\r\n      }\r\n    ]\r\n  },\r\n}"
        },
        {
          "name": "meta",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/breadcrum/breadcrum.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Meta<BreadcrumComponent>",
          "defaultValue": "{\r\n  title: 'BreadCrum',\r\n  component: BreadcrumComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [\r\n        TranslateModule.forRoot(),\r\n        RouterTestingModule\r\n      ],\r\n      providers: []\r\n    }),\r\n  ],\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n    },\r\n  }),\r\n  argTypes: {\r\n    ngOnInit: {\r\n      control: { type: null }\r\n    },\r\n  },\r\n}"
        }
      ],
      "src/app/shared/components/button/button.stories.ts": [
        {
          "name": "Button",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/button/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\r\n  name: 'Botón',\r\n  args: {\r\n    color: \"primary\",\r\n    title: 'Título del botón',\r\n  },\r\n}"
        },
        {
          "name": "IconButton",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/button/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\r\n  name: 'Botón con icono',\r\n  args: {\r\n    color: \"primary\",\r\n    title: 'Título del botón',\r\n    mode: 'icon',\r\n  },\r\n  render: (args: StoryType) => ({\r\n    props: args,\r\n    template: `\r\n      <neo-button ${argsToTemplate(args)}><i class=\"ri-arrow-up-line\"></i></neo-button>\r\n    `\r\n  })\r\n}"
        },
        {
          "name": "meta",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/button/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Meta<ButtonComponent>",
          "defaultValue": "{\r\n  title: 'Botones',\r\n  component: ButtonComponent,\r\n  render: (args: ButtonComponent) => ({\r\n    props: {\r\n      ...args,\r\n    },\r\n    template: `\r\n      <neo-button ${argsToTemplate(args)}>Botón</neo-button>\r\n    `\r\n  }),\r\n  argTypes: {\r\n    click: {\r\n      control: { type: null }\r\n    },\r\n    _title: {\r\n      table: { disable: true }\r\n    },\r\n    clickOnButton: {\r\n      control: { type: null }\r\n    },\r\n    ngAfterViewInit: {\r\n      table: { disable: true }\r\n    },\r\n    btnContent: {\r\n      table: { disable: true }\r\n    },\r\n  },\r\n}"
        }
      ],
      "src/app/shared/components/card/card.stories.ts": [
        {
          "name": "Card",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/card/card.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\r\n  name: 'Card',\r\n  args: {},\r\n}"
        },
        {
          "name": "meta",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/card/card.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Meta<CardComponent>",
          "defaultValue": "{\r\n  title: 'Cards',\r\n  component: CardComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [],\r\n      imports: [\r\n        CardModule,\r\n        TranslateModule.forRoot(),\r\n      ],\r\n      providers: []\r\n    }),\r\n  ],\r\n  render: (args) => ({\r\n    props: {\r\n      ...args,\r\n    },\r\n    template: `\r\n      <neo-card ${argsToTemplate(args)}>\r\n        <span>Contenido de la card</span>\r\n      </neo-card>\r\n      `\r\n  }),\r\n  argTypes: {\r\n    collapsed: {\r\n      control: { type: null }\r\n    },\r\n    _isCollapsed: {\r\n      table: { disable: true }\r\n    },\r\n    isCollapsedIcon: {\r\n      control: { type: null }\r\n    },\r\n    neoCardHeader: {\r\n      control: { type: null }\r\n    },\r\n    toggleCollapse: {\r\n      control: { type: null }\r\n    },\r\n    collapse: {\r\n      control: { type: null }\r\n    },\r\n    expand: {\r\n      control: { type: null }\r\n    }\r\n  },\r\n}"
        }
      ],
      "src/app/shared/components/theme-toggle/model/theme.entity.ts": [
        {
          "name": "DARK_THEME",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/theme-toggle/model/theme.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "defaultValue": "'dark'"
        },
        {
          "name": "LIGHT_THEME",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/theme-toggle/model/theme.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "defaultValue": "'light'"
        },
        {
          "name": "PREFIX_THEME_CLASS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/theme-toggle/model/theme.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "defaultValue": "'theme-'"
        }
      ],
      "src/app/shared/components/form-fields/input-date-picker/models/date-picker.entity.ts": [
        {
          "name": "DEFAULT_FORMAT",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/form-fields/input-date-picker/models/date-picker.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "defaultValue": "'YYYY-MM-DD'"
        }
      ],
      "src/app/shared/components/side-menu/model/menu.entity.ts": [
        {
          "name": "DEFAULT_MENU_POSITION",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/side-menu/model/menu.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "SideMenuPosition.LEFT",
          "rawdescription": "Tamaño por defecto y posición por defecto del menú lateral si no se especifica",
          "description": "<p>Tamaño por defecto y posición por defecto del menú lateral si no se especifica</p>\n"
        }
      ],
      "src/app/shared/components/sidebar-panel/models/sidebar-panel.entity.ts": [
        {
          "name": "DEFAULT_POSITION",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/sidebar-panel/models/sidebar-panel.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "SidebarbarPanelPosition.RIGHT",
          "rawdescription": "Tamaño por defecto y posición por defecto del panel lateral si no se especifica",
          "description": "<p>Tamaño por defecto y posición por defecto del panel lateral si no se especifica</p>\n"
        },
        {
          "name": "DEFAULT_SIZE",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/sidebar-panel/models/sidebar-panel.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "SidebarbarPanelSize.SMALL"
        }
      ],
      "src/app/shared/components/tabs/models/tabs.entity.ts": [
        {
          "name": "DEFAULT_TITLE",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/tabs/models/tabs.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "defaultValue": "'Tab title'"
        }
      ],
      "src/app/shared/animations/fade-in-out.animation.ts": [
        {
          "name": "FADE_IN_OUT",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/animations/fade-in-out.animation.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "trigger('fadeInOut', [\r\n  transition(':enter', [\r\n    style({ opacity: 0 }),\r\n    animate('350ms', style({ opacity: 1 }))\r\n  ]),\r\n  transition(':leave', [\r\n    style({ opacity: 1 }),\r\n    animate('350ms', style({ opacity: 0 }))\r\n  ])\r\n])"
        }
      ],
      "src/app/shared/components/side-menu/animations/fade-in-out.animation.ts": [
        {
          "name": "FADE_IN_OUT_MENU",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/side-menu/animations/fade-in-out.animation.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "trigger('fadeInOutMenu', [\r\n    transition(':enter', [\r\n        style({ opacity: 0 }),\r\n        animate('350ms', style({ opacity: 1 }))\r\n    ]),\r\n    transition(':leave', [\r\n        style({ opacity: 1 }),\r\n        animate('350ms', style({ opacity: 0 }))\r\n    ])\r\n])"
        }
      ],
      "src/app/shared/components/sidebar-panel/animations/fade-in-out.animation.ts": [
        {
          "name": "FADE_IN_OUT_PANEL",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/sidebar-panel/animations/fade-in-out.animation.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "trigger('fadeInOutPanel', [\r\n  transition(':enter', [\r\n    style({ opacity: 0 }),\r\n    animate('350ms', style({ opacity: 1 }))\r\n  ]),\r\n  transition(':leave', [\r\n    style({ opacity: 1 }),\r\n    animate('350ms', style({ opacity: 0 }))\r\n  ])\r\n])"
        }
      ],
      "src/app/shared/components/logo/models/logo.entity.ts": [
        {
          "name": "LOGO",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/logo/models/logo.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "defaultValue": "\"assets/images/logo/logo_512.png\""
        },
        {
          "name": "LOGO_DARK",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/logo/models/logo.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "defaultValue": "\"assets/images/logo/logo_512_dark.png\""
        },
        {
          "name": "LOGO_SMALL",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/logo/models/logo.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "defaultValue": "\"assets/images/logo/logo_100.png\""
        },
        {
          "name": "LOGO_SMALL_DARK",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/logo/models/logo.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "defaultValue": "\"assets/images/logo/logo_100_dark.png\""
        }
      ],
      "src/app/shared/components/form-fields/radio-button/radio-button-group/radio-button-group.component.ts": [
        {
          "name": "NEO_RADIO_BUTTON_GROUP",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/form-fields/radio-button/radio-button-group/radio-button-group.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new InjectionToken<RadioButtonGroupComponent>('RadioButtonGroupComponent')",
          "rawdescription": "Permite inyectar el componente RadioButtonGroupComponent en el componente RadioButtonComponent\r\npara poder acceder a sus propiedades y métodos desde el componente RadioButtonComponent hijo",
          "description": "<p>Permite inyectar el componente RadioButtonGroupComponent en el componente RadioButtonComponent\npara poder acceder a sus propiedades y métodos desde el componente RadioButtonComponent hijo</p>\n"
        }
      ],
      ".storybook/preview.ts": [
        {
          "name": "preview",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": ".storybook/preview.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Preview",
          "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    }\n  },\n}"
        }
      ],
      "src/app/shared/components/side-menu/animations/slide-by-position.animation.ts": [
        {
          "name": "SLIDE_BY_POSITION",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/side-menu/animations/slide-by-position.animation.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "trigger('slideByPosition', [\r\n\r\n  state('left', style({ transform: 'translateX(0%)' })),\r\n  state('right', style({ transform: 'translateX(0%)' })),\r\n\r\n  // Desplazamiento de derecha hacia izquierda al abrirse y de izquierda hacia derecha al cerrarse\r\n  transition('void => left', [\r\n    style({ transform: 'translateX(-100%)' }),\r\n    animate('350ms ease-in', style({ transform: 'translateX(0%)' })),\r\n  ]),\r\n  transition('left => void', [\r\n    animate('350ms ease-out', style({ transform: 'translateX(-100%)' })),\r\n  ]),\r\n\r\n  // Desplazamiento de izquierda hacia derecha al abrirse y de derecha hacia izquierda al cerrarse\r\n  transition('void => right', [\r\n    style({ transform: 'translateX(100%)' }),\r\n    animate('350ms ease-in', style({ transform: 'translateX(0%)' })),\r\n  ]),\r\n  transition('right => void', [\r\n    animate('350ms ease-out', style({ transform: 'translateX(100%)' })),\r\n  ])\r\n])",
          "rawdescription": "Animación para deslizar el panel hacia arriba, abajo, derecha o izquierda utilizando transform: translateX()\r\nsegún la posición pasado por parámetro que puede ser \"left\" o \"right\".\r\nDeberá desplazarse 100% o -100% según la posición hasta llegar a 0%. Al cerrarse, deberá hacer el recorrido inverso.\r\n--\r\nEl parametro \"left\" o \"right\" indica la posición final del panel",
          "description": "<h2>Animación para deslizar el panel hacia arriba, abajo, derecha o izquierda utilizando transform: translateX()\nsegún la posición pasado por parámetro que puede ser &quot;left&quot; o &quot;right&quot;.\nDeberá desplazarse 100% o -100% según la posición hasta llegar a 0%. Al cerrarse, deberá hacer el recorrido inverso.</h2>\n<p>El parametro &quot;left&quot; o &quot;right&quot; indica la posición final del panel</p>\n"
        }
      ],
      "src/app/shared/components/sidebar-panel/animations/slide-by-position.animation.ts": [
        {
          "name": "SLIDE_BY_POSITION",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/components/sidebar-panel/animations/slide-by-position.animation.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "trigger('slideByPosition', [\r\n\r\n  state('top', style({ transform: 'translateY(0%)' })),\r\n  state('bottom', style({ transform: 'translateY(0%)' })),\r\n  state('left', style({ transform: 'translateX(0%)' })),\r\n  state('right', style({ transform: 'translateX(0%)' })),\r\n\r\n  // Desplazamiento de arriba hacia abajo al abrirse y de abajo hacia arriba al cerrarse\r\n  transition('void => top', [\r\n    style({ transform: 'translateY(-100%)', top: 0, left: 0, right: 'auto', bottom: 'auto' }),\r\n    animate('350ms ease-in', style({ transform: 'translateY(0%)', top: 0, left: 0, right: 'auto', bottom: 'auto' })),\r\n  ]),\r\n  transition('top => void', [\r\n    animate('350ms ease-out', style({ transform: 'translateY(-100%)', top: 0, left: 0, right: 'auto', bottom: 'auto' })),\r\n  ]),\r\n\r\n  // Desplazamiento de abajo hacia arriba al abrirse y de arriba hacia abajo al cerrarse\r\n  transition('void => bottom', [\r\n    style({ transform: 'translateY(100%)', bottom: 0, left: 0, right: 'auto', top: 'auto' }),\r\n    animate('350ms ease-in', style({ transform: 'translateY(0%)', bottom: 0, left: 0, right: 'auto', top: 'auto' })),\r\n  ]),\r\n  transition('bottom => void', [\r\n    animate('350ms ease-out', style({ transform: 'translateY(100%)', bottom: 0, left: 0, right: 'auto', top: 'auto' })),\r\n  ]),\r\n\r\n  // Desplazamiento de izquierda hacia derecha al abrirse y de derecha hacia izquierda al cerrarse\r\n  transition('void => left', [\r\n    style({ transform: 'translateX(-100%)', top: 0, left: 0, right: 'auto', bottom: 'auto' }),\r\n    animate('350ms ease-in', style({ transform: 'translateX(0%)', top: 0, left: 0, right: 'auto', bottom: 'auto' })),\r\n  ]),\r\n  transition('left => void', [\r\n    animate('350ms ease-out', style({ transform: 'translateX(-100%)', top: 0, left: 0, right: 'auto', bottom: 'auto' })),\r\n  ]),\r\n\r\n  // Desplazamiento de derecha hacia izquierda al abrirse y de izquierda hacia derecha al cerrarse\r\n  transition('void => right', [\r\n    style({ transform: 'translateX(100%)', top: 0, right: 0, left: 'auto', bottom: 'auto' }),\r\n    animate('350ms ease-in', style({ transform: 'translateX(0%)', top: 0, right: 0, left: 'auto', bottom: 'auto' })),\r\n  ]),\r\n  transition('right => void', [\r\n    animate('350ms ease-out', style({ transform: 'translateX(100%)', top: 0, right: 0, left: 'auto', bottom: 'auto' })),\r\n  ])\r\n])",
          "rawdescription": "Animación para deslizar el panel hacia arriba, abajo, derecha o izquierda utilizando transform: translateX() o transform: translateY()\r\nsegún la posición pasado por parámetro que puede ser \"top\", \"bottom\", \"left\" o \"right\".\r\nDeberá desplazarse 100% o -100% según la posición hasta llegar a 0%. Al cerrarse, deberá hacer el recorrido inverso.\r\n--\r\nEl parametro \"top\", \"bottom\", \"left\" o \"right\" indica la posición final del panel",
          "description": "<h2>Animación para deslizar el panel hacia arriba, abajo, derecha o izquierda utilizando transform: translateX() o transform: translateY()\nsegún la posición pasado por parámetro que puede ser &quot;top&quot;, &quot;bottom&quot;, &quot;left&quot; o &quot;right&quot;.\nDeberá desplazarse 100% o -100% según la posición hasta llegar a 0%. Al cerrarse, deberá hacer el recorrido inverso.</h2>\n<p>El parametro &quot;top&quot;, &quot;bottom&quot;, &quot;left&quot; o &quot;right&quot; indica la posición final del panel</p>\n"
        }
      ],
      "src/app/shared/animations/slide-to-bottom.animation.ts": [
        {
          "name": "SLIDE_TO_BOTTOM",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/animations/slide-to-bottom.animation.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "trigger('slideToBottom', [\r\n  transition(':enter', [\r\n    style({ transform: 'translateY(-100%)' }),\r\n    animate('350ms ease-in', style({ transform: 'translateY(0%)' })),\r\n  ]),\r\n  transition(\":leave\", [\r\n    style({ transform: 'translateY(0%)' }),\r\n    animate('350ms ease-out', style({ transform: 'translateY(-100%)' })),\r\n  ])\r\n])",
          "rawdescription": "Animación para deslizar hacia abajo",
          "description": "<p>Animación para deslizar hacia abajo</p>\n"
        }
      ],
      "src/app/shared/animations/slide-to-left.animation.ts": [
        {
          "name": "SLIDE_TO_LEFT",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/animations/slide-to-left.animation.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "trigger('slideToLeft',[\r\n  transition(':enter', [\r\n    style({ transform: 'translateX(100%)' }),\r\n    animate('350ms ease-in', style({ transform: 'translateX(0%)' })),\r\n  ]),\r\n  transition(\":leave\", [\r\n    style({ transform: 'translateX(0%)' }),\r\n    animate('350ms ease-out', style({ transform: 'translateX(100%)' })),\r\n  ])\r\n])",
          "rawdescription": "Animación para deslizar hacia la izquierda",
          "description": "<p>Animación para deslizar hacia la izquierda</p>\n"
        }
      ],
      "src/app/shared/animations/slide-to-right.animation.ts": [
        {
          "name": "SLIDE_TO_RIGHT",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/animations/slide-to-right.animation.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "trigger('slideToRight', [\r\n  state('previous', style({ transform: 'translateX(-100%)' })),\r\n  transition(':enter', [\r\n    style({ transform: 'translateX(-100%)' }),\r\n    animate('350ms ease-in', style({ transform: 'translateX(0%)' })),\r\n  ]),\r\n  transition(\":leave\", [\r\n    animate('350ms ease-out', style({ transform: 'translateX(-100%)' })),\r\n  ])\r\n])",
          "rawdescription": "Animación para deslizar el hacia la derecha",
          "description": "<p>Animación para deslizar el hacia la derecha</p>\n"
        }
      ],
      "src/app/shared/animations/slide-to-top.animation.ts": [
        {
          "name": "SLIDE_TO_TOP",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/animations/slide-to-top.animation.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "trigger('slideToTop', [\r\n  transition(':enter', [\r\n    style({ transform: 'translateY(100%)' }),\r\n    animate('350ms ease-in', style({ transform: 'translateY(0%)' })),\r\n  ]),\r\n  transition(\":leave\", [\r\n    style({ transform: 'translateY(0%)' }),\r\n    animate('350ms ease-out', style({ transform: 'translateY(100%)' })),\r\n  ])\r\n])",
          "rawdescription": "Animación para deslizar hacia arriba",
          "description": "<p>Animación para deslizar hacia arriba</p>\n"
        }
      ]
    },
    "groupedFunctions": {},
    "groupedEnumerations": {
      "src/app/shared/components/sidebar-panel/models/sidebar-panel.entity.ts": [
        {
          "name": "SidebarbarPanelPosition",
          "childs": [
            {
              "name": "LEFT",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "left"
            },
            {
              "name": "RIGHT",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "right"
            },
            {
              "name": "TOP",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "top"
            },
            {
              "name": "BOTTOM",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "bottom"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "<p>Enumerado para la posición del panel lateral</p>\n",
          "file": "src/app/shared/components/sidebar-panel/models/sidebar-panel.entity.ts"
        },
        {
          "name": "SidebarbarPanelSize",
          "childs": [
            {
              "name": "SMALL",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "s"
            },
            {
              "name": "MEDIUM",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "m"
            },
            {
              "name": "LARGE",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "l"
            },
            {
              "name": "EXTRA_LARGE",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "xl"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "<p>Enumerado para el tamaño del panel lateral</p>\n",
          "file": "src/app/shared/components/sidebar-panel/models/sidebar-panel.entity.ts"
        }
      ],
      "src/app/shared/components/side-menu/model/menu.entity.ts": [
        {
          "name": "SideMenuPosition",
          "childs": [
            {
              "name": "LEFT",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "left"
            },
            {
              "name": "RIGHT",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "right"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "<p>Enumerado para la posición del menú lateral</p>\n",
          "file": "src/app/shared/components/side-menu/model/menu.entity.ts"
        }
      ]
    },
    "groupedTypeAliases": {
      "src/app/shared/components/button/models/button.entity.ts": [
        {
          "name": "ButtonColor",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"primary\" | \"secondary\"",
          "file": "src/app/shared/components/button/models/button.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        },
        {
          "name": "ButtonMode",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"button\" | \"icon\"",
          "file": "src/app/shared/components/button/models/button.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        },
        {
          "name": "ButtonSize",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"xs\" | \"s\" | \"xm\" | \"m\" | \"l\" | \"xl\"",
          "file": "src/app/shared/components/button/models/button.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        },
        {
          "name": "ButtonType",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"submit\" | \"reset\" | \"button\"",
          "file": "src/app/shared/components/button/models/button.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        }
      ],
      "src/app/shared/components/form-fields/input-date-picker/models/date-picker.entity.ts": [
        {
          "name": "CalendarType",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"week\" | \"day\" | \"range\"",
          "file": "src/app/shared/components/form-fields/input-date-picker/models/date-picker.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        },
        {
          "name": "DatePickerType",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"day\" | \"week\" | \"range\"",
          "file": "src/app/shared/components/form-fields/input-date-picker/models/date-picker.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        },
        {
          "name": "ViewMode",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"years\" | \"months\" | \"default\"",
          "file": "src/app/shared/components/form-fields/input-date-picker/models/date-picker.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        }
      ],
      "src/app/shared/components/form-fields/radio-button/models/radio-button.entity.ts": [
        {
          "name": "DirectionRadioButtonGroup",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"horizontal\" | \"vertical\"",
          "file": "src/app/shared/components/form-fields/radio-button/models/radio-button.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        }
      ],
      "src/app/shared/components/section-title/models/section-title.entity.ts": [
        {
          "name": "IconPosition",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"left\" | \"right\"",
          "file": "src/app/shared/components/section-title/models/section-title.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        }
      ],
      "src/app/shared/components/form-fields/models/form-field.entity.ts": [
        {
          "name": "InputAutocomplete",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"on\" | \"off\"",
          "file": "src/app/shared/components/form-fields/models/form-field.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        },
        {
          "name": "InputSize",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"xs\" | \"s\" | \"xm\" | \"m\" | \"l\" | \"xl\"",
          "file": "src/app/shared/components/form-fields/models/form-field.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        },
        {
          "name": "InputType",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"text\" | \"number\" | \"hidden\" | \"tel\" | \"color\" | \"url\" | \"email\" | \"range\"",
          "file": "src/app/shared/components/form-fields/models/form-field.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        }
      ],
      "src/app/shared/components/logo/models/logo.entity.ts": [
        {
          "name": "LogoSize",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"s\" | \"m\"",
          "file": "src/app/shared/components/logo/models/logo.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        }
      ],
      "src/app/shared/components/paginator/models/paginator.entity.ts": [
        {
          "name": "PaginationType",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"rangenumber\" | \"fullnumber\" | \"nonumber\" | \"dividenumber\"",
          "file": "src/app/shared/components/paginator/models/paginator.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        },
        {
          "name": "PaginatorPosition",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"right\" | \"left\"",
          "file": "src/app/shared/components/paginator/models/paginator.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        }
      ],
      "src/app/shared/components/progress-bar/models/progress-bar.entity.ts": [
        {
          "name": "ProgressBarSize",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"xs\" | \"s\" | \"xm\" | \"m\" | \"l\" | \"xl\"",
          "file": "src/app/shared/components/progress-bar/models/progress-bar.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        }
      ],
      "src/app/shared/components/spinner/models/spinner.entity.ts": [
        {
          "name": "SpinnerPosition",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"fixed\" | \"absolute\"",
          "file": "src/app/shared/components/spinner/models/spinner.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        },
        {
          "name": "SpinnerSize",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"xs\" | \"s\" | \"xm\" | \"m\" | \"l\" | \"xl\"",
          "file": "src/app/shared/components/spinner/models/spinner.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        }
      ],
      "src/app/shared/components/breadcrum/breadcrum.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<BreadcrumComponent>",
          "file": "src/app/shared/components/breadcrum/breadcrum.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 183
        }
      ],
      "src/app/shared/components/button/button.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<ButtonComponent>",
          "file": "src/app/shared/components/button/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 183
        },
        {
          "name": "StoryType",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "",
          "file": "src/app/shared/components/button/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 193
        }
      ],
      "src/app/shared/components/card/card.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<CardComponent>",
          "file": "src/app/shared/components/card/card.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 183
        }
      ],
      "src/app/shared/components/tabs/models/tabs.entity.ts": [
        {
          "name": "TabOrientation",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"h\" | \"v\"",
          "file": "src/app/shared/components/tabs/models/tabs.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        },
        {
          "name": "TabType",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"tab\" | \"router-tab\"",
          "file": "src/app/shared/components/tabs/models/tabs.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        }
      ],
      "src/app/shared/components/theme-toggle/model/theme.entity.ts": [
        {
          "name": "ThemeType",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": " | ",
          "file": "src/app/shared/components/theme-toggle/model/theme.entity.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        }
      ]
    }
  },
  "routes": [],
  "coverage": {
    "count": 34,
    "status": "medium",
    "files": [
      {
        "filePath": ".storybook/preview.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "preview",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/animations/fade-in-out.animation.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "FADE_IN_OUT",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/animations/slide-to-bottom.animation.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "SLIDE_TO_BOTTOM",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/app/shared/animations/slide-to-left.animation.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "SLIDE_TO_LEFT",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/app/shared/animations/slide-to-right.animation.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "SLIDE_TO_RIGHT",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/app/shared/animations/slide-to-top.animation.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "SLIDE_TO_TOP",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/app/shared/components/breadcrum/breadcrum.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "BreadcrumComponent",
        "coveragePercent": 60,
        "coverageCount": "3/5",
        "status": "good"
      },
      {
        "filePath": "src/app/shared/components/breadcrum/breadcrum.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "BreadCrum",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/breadcrum/breadcrum.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meta",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/breadcrum/models/breadcrum.entity.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "BreadCrumbEntity",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/button/button.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ButtonComponent",
        "coveragePercent": 80,
        "coverageCount": "12/15",
        "status": "very-good"
      },
      {
        "filePath": "src/app/shared/components/button/button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Button",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/button/button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "IconButton",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/button/button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meta",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/card/card-header/card-header.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "CardHeaderDirective",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/card/card.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "CardComponent",
        "coveragePercent": 100,
        "coverageCount": "12/12",
        "status": "very-good"
      },
      {
        "filePath": "src/app/shared/components/card/card.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Card",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/card/card.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meta",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/error/error.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ErrorComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/filter-columns-table/filter-columns-table.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "FilterColumnsTableComponent",
        "coveragePercent": 66,
        "coverageCount": "14/21",
        "status": "good"
      },
      {
        "filePath": "src/app/shared/components/form-fields/checkbox/checkbox.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "CheckboxComponent",
        "coveragePercent": 29,
        "coverageCount": "8/27",
        "status": "medium"
      },
      {
        "filePath": "src/app/shared/components/form-fields/form-error/form-error.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "FormErrorComponent",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/app/shared/components/form-fields/input-date-picker/calendar-picker/calendar-picker.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "CalendarPickerComponent",
        "coveragePercent": 54,
        "coverageCount": "18/33",
        "status": "good"
      },
      {
        "filePath": "src/app/shared/components/form-fields/input-date-picker/input-date-picker.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "InputDatePickerComponent",
        "coveragePercent": 35,
        "coverageCount": "15/42",
        "status": "medium"
      },
      {
        "filePath": "src/app/shared/components/form-fields/input-date-picker/models/date-picker.entity.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "DateSelected",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/form-fields/input-date-picker/models/date-picker.entity.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DEFAULT_FORMAT",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/form-fields/input-date-picker/services/calendar.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "CalendarService",
        "coveragePercent": 66,
        "coverageCount": "4/6",
        "status": "good"
      },
      {
        "filePath": "src/app/shared/components/form-fields/input-password/input-password.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "InputPasswordComponent",
        "coveragePercent": 29,
        "coverageCount": "10/34",
        "status": "medium"
      },
      {
        "filePath": "src/app/shared/components/form-fields/input/input.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "InputComponent",
        "coveragePercent": 31,
        "coverageCount": "11/35",
        "status": "medium"
      },
      {
        "filePath": "src/app/shared/components/form-fields/radio-button/radio-button-group/radio-button-group.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "RadioButtonGroupComponent",
        "coveragePercent": 48,
        "coverageCount": "16/33",
        "status": "medium"
      },
      {
        "filePath": "src/app/shared/components/form-fields/radio-button/radio-button-group/radio-button-group.component.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "NEO_RADIO_BUTTON_GROUP",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/app/shared/components/form-fields/radio-button/radio-button.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "RadioButtonComponent",
        "coveragePercent": 48,
        "coverageCount": "14/29",
        "status": "medium"
      },
      {
        "filePath": "src/app/shared/components/form-fields/select/options/options.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "OptionsComponent",
        "coveragePercent": 14,
        "coverageCount": "1/7",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/form-fields/select/select.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "SelectComponent",
        "coveragePercent": 19,
        "coverageCount": "8/42",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/form-fields/services/inputs-utils.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "InputsUtilsService",
        "coveragePercent": 33,
        "coverageCount": "1/3",
        "status": "medium"
      },
      {
        "filePath": "src/app/shared/components/form-fields/text-area/text-area.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TextAreaComponent",
        "coveragePercent": 34,
        "coverageCount": "11/32",
        "status": "medium"
      },
      {
        "filePath": "src/app/shared/components/fullscreen-toggle/fullscreen-toggle.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "FullscreenToggleComponent",
        "coveragePercent": 53,
        "coverageCount": "8/15",
        "status": "good"
      },
      {
        "filePath": "src/app/shared/components/logo/logo.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "LogoComponent",
        "coveragePercent": 37,
        "coverageCount": "3/8",
        "status": "medium"
      },
      {
        "filePath": "src/app/shared/components/logo/models/logo.entity.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LOGO",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/logo/models/logo.entity.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LOGO_DARK",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/logo/models/logo.entity.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LOGO_SMALL",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/logo/models/logo.entity.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LOGO_SMALL_DARK",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/menu-context/item-menu-context/item-menu-context.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ItemMenuContextComponent",
        "coveragePercent": 60,
        "coverageCount": "6/10",
        "status": "good"
      },
      {
        "filePath": "src/app/shared/components/menu-context/menu-context.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MenuContextComponent",
        "coveragePercent": 72,
        "coverageCount": "8/11",
        "status": "good"
      },
      {
        "filePath": "src/app/shared/components/modal-spinner/modal-spinner.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ModalSpinnerComponent",
        "coveragePercent": 25,
        "coverageCount": "1/4",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/modal-spinner/models/modal-spinner.entity.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ModalSpinnerEntity",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/modal-spinner/services/modal-spinner.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ModalSpinnerService",
        "coveragePercent": 33,
        "coverageCount": "1/3",
        "status": "medium"
      },
      {
        "filePath": "src/app/shared/components/modal/modal-dialog.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ModalDialogComponent",
        "coveragePercent": 66,
        "coverageCount": "6/9",
        "status": "good"
      },
      {
        "filePath": "src/app/shared/components/modal/models/modal.entity.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ModalOptionsEntity",
        "coveragePercent": 0,
        "coverageCount": "0/15",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/modal/services/modal-dialog.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ModalDialogService",
        "coveragePercent": 57,
        "coverageCount": "4/7",
        "status": "good"
      },
      {
        "filePath": "src/app/shared/components/paginator/paginator.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PaginatorComponent",
        "coveragePercent": 37,
        "coverageCount": "9/24",
        "status": "medium"
      },
      {
        "filePath": "src/app/shared/components/progress-bar/progress-bar.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ProgressBarComponent",
        "coveragePercent": 7,
        "coverageCount": "1/14",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/section-title/section-title.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "SectionTitleComponent",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/side-menu/animations/fade-in-out.animation.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "FADE_IN_OUT_MENU",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/side-menu/animations/slide-by-position.animation.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "SLIDE_BY_POSITION",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/app/shared/components/side-menu/model/menu.entity.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "MenuEntity",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/side-menu/model/menu.entity.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DEFAULT_MENU_POSITION",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/app/shared/components/side-menu/services/menu.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "MenuService",
        "coveragePercent": 72,
        "coverageCount": "8/11",
        "status": "good"
      },
      {
        "filePath": "src/app/shared/components/side-menu/side-menu-item/side-menu-item.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "SideMenuItemComponent",
        "coveragePercent": 83,
        "coverageCount": "10/12",
        "status": "very-good"
      },
      {
        "filePath": "src/app/shared/components/side-menu/side-menu.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "SideMenuComponent",
        "coveragePercent": 53,
        "coverageCount": "7/13",
        "status": "good"
      },
      {
        "filePath": "src/app/shared/components/sidebar-panel/animations/fade-in-out.animation.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "FADE_IN_OUT_PANEL",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/sidebar-panel/animations/slide-by-position.animation.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "SLIDE_BY_POSITION",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/app/shared/components/sidebar-panel/models/sidebar-panel.entity.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "SidebarbarPanelEntity",
        "coveragePercent": 14,
        "coverageCount": "1/7",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/sidebar-panel/models/sidebar-panel.entity.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "SidebarbarPanelInputsEntity",
        "coveragePercent": 33,
        "coverageCount": "1/3",
        "status": "medium"
      },
      {
        "filePath": "src/app/shared/components/sidebar-panel/models/sidebar-panel.entity.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DEFAULT_POSITION",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/app/shared/components/sidebar-panel/models/sidebar-panel.entity.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DEFAULT_SIZE",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/sidebar-panel/services/sidebar-panel.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "SidebarPanelService",
        "coveragePercent": 66,
        "coverageCount": "8/12",
        "status": "good"
      },
      {
        "filePath": "src/app/shared/components/sidebar-panel/sidebar-panel.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "SidebarPanelComponent",
        "coveragePercent": 20,
        "coverageCount": "3/15",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/spinner/spinner.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "SpinnerComponent",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/tabs/directives/tab-content.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "TabContentDirective",
        "coveragePercent": 20,
        "coverageCount": "1/5",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/tabs/directives/tab-label.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "TabLabelDirective",
        "coveragePercent": 33,
        "coverageCount": "1/3",
        "status": "medium"
      },
      {
        "filePath": "src/app/shared/components/tabs/models/tabs.entity.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DEFAULT_TITLE",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/tabs/tabs-item/tabs-body/tabs-body.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TabsBodyComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/tabs/tabs-item/tabs-footer/tabs-footer.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TabsFooterComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/tabs/tabs-item/tabs-header/tabs-header.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TabsHeaderComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/tabs/tabs-item/tabs-item.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TabsItemComponent",
        "coveragePercent": 7,
        "coverageCount": "1/14",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/tabs/tabs.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TabsComponent",
        "coveragePercent": 33,
        "coverageCount": "3/9",
        "status": "medium"
      },
      {
        "filePath": "src/app/shared/components/theme-toggle/directive/custom-themes.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "CustomThemesDirective",
        "coveragePercent": 16,
        "coverageCount": "1/6",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/theme-toggle/model/theme.entity.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DARK_THEME",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/theme-toggle/model/theme.entity.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LIGHT_THEME",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/theme-toggle/model/theme.entity.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "PREFIX_THEME_CLASS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/theme-toggle/service/themes.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ThemesService",
        "coveragePercent": 60,
        "coverageCount": "6/10",
        "status": "good"
      },
      {
        "filePath": "src/app/shared/components/theme-toggle/theme-toggle.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ThemeToggleComponent",
        "coveragePercent": 10,
        "coverageCount": "1/10",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/directives/autofocus.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "AutofocusDirective",
        "coveragePercent": 33,
        "coverageCount": "1/3",
        "status": "medium"
      },
      {
        "filePath": "src/app/shared/directives/caps-lock.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "CapsLockDirective",
        "coveragePercent": 12,
        "coverageCount": "1/8",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/directives/click-outside.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClickOutsideDirective",
        "coveragePercent": 20,
        "coverageCount": "1/5",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/directives/clickable.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClickableDirective",
        "coveragePercent": 20,
        "coverageCount": "1/5",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/directives/escape-key.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "EscapeKeyDirective",
        "coveragePercent": 20,
        "coverageCount": "1/5",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/directives/resize-column.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ResizeColumnDirective",
        "coveragePercent": 0,
        "coverageCount": "0/17",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/pipes/safeHtml/safe-html.pipe.ts",
        "type": "pipe",
        "linktype": "pipe",
        "name": "SafeHtmlPipe",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/app/shared/pipes/snake-text-to-string/snake-text-to-string.pipe.ts",
        "type": "pipe",
        "linktype": "pipe",
        "name": "SnakeTextToStringPipe",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/pipes/striphtml/striphtml.pipe.ts",
        "type": "pipe",
        "linktype": "pipe",
        "name": "StripHtmlPipe",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/app/shared/pipes/truncate/truncate.pipe.ts",
        "type": "pipe",
        "linktype": "pipe",
        "name": "TruncatePipe",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/app/shared/pipes/ucwordcase/ucwordcase.pipe.ts",
        "type": "pipe",
        "linktype": "pipe",
        "name": "UcwordcasePipe",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      }
    ]
  }
}
