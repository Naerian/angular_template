@import "config";

// Mixin para aplicar estilos tipográficos de encabezados
// Utiliza este mixin para definir estilos de encabezados h1 a h6
@mixin heading($level) {
  @if $level == h1 {
    font-size: var(--font-size-h1);
    line-height: var(--line-height-h1);
    font-weight: var(--font-weight-bold);
  } @else if $level == h2 {
    font-size: var(--font-size-h2);
    line-height: var(--line-height-h2);
    font-weight: var(--font-weight-bold);
  } @else if $level == h3 {
    font-size: var(--font-size-h3);
    line-height: var(--line-height-h3);
    font-weight: var(--font-weight-bold);
  } @else if $level == h4 {
    font-size: var(--font-size-h4);
    line-height: var(--line-height-h4);
    font-weight: var(--font-weight-semibold);
  } @else if $level == h5 {
    font-size: var(--font-size-h5);
    line-height: var(--line-height-h5);
    font-weight: var(--font-weight-semibold);
  } @else if $level == h6 {
    font-size: var(--font-size-h6);
    line-height: var(--line-height-h6);
    font-weight: var(--font-weight-semibold);
  }
}

// Mixin para definir tamaños de componentes
// Utiliza este mixin para aplicar tamaños consistentes a los componentes de la aplicación
@mixin component-size($size) {
  height: var(
    --component-height-#{$size},
    #{map-get($component-heights, $size)}
  );
  padding: var(
    --component-padding-#{$size},
    #{map-get($component-paddings, $size)}
  );
  font-size: var(
    --component-font-size-#{$size},
    #{map-get($component-font-sizes, $size)}
  );
}

// Mixin para definir la altura de las barras de progreso
// Utiliza este mixin para aplicar alturas consistentes a las barras de progreso de la aplicación
@mixin progress-bar-heights($size) {
  height: var(
    --progress-bar-heights-#{$size},
    #{map-get($progress-bar-heights, $size)}
  );
}

// Mixin para definir tamaños de componentes de textarea
// Utiliza este mixin para aplicar tamaños consistentes a los componentes de textarea de la aplicación
@mixin component-textarea-size($size) {
  padding: var(
    --component-padding-#{$size},
    #{map-get($component-paddings, $size)}
  );
  font-size: var(
    --component-font-size-#{$size},
    #{map-get($component-font-sizes, $size)}
  );
}

// Mixin para aplicar tamaño de fuente según el tamaño del componente
// Utiliza este mixin para aplicar un tamaño de fuente específico a los componentes
@mixin component-font-size($size) {
  font-size: var(
    --component-font-size-#{$size},
    #{map-get($component-font-sizes, $size)}
  );
}

// Mixin para aplicar tamaño de fuente a los iconos de los componentes
// Utiliza este mixin para aplicar un tamaño de fuente específico a los iconos de los componentes
@mixin component-icon-size($size) {
  height: var(
    --component-height-#{$size},
    #{map-get($component-heights, $size)}
  );
  padding: var(
    --component-padding-#{$size},
    #{map-get($component-paddings, $size)}
  );
  font-size: calc(
    var(
        --component-font-size-#{$size},
        #{map-get($component-font-sizes, $size)}
      ) * 1.2
  );
  line-height: calc(
    var(
        --component-font-size-#{$size},
        #{map-get($component-font-sizes, $size)}
      ) * 1.2
  );
}

// Mixin para aplicar tamaño al checkbox / radiobutton
// Utiliza este mixin para aplicar un tamaño específico al checkbox / radiobutton
@mixin component-control-box-size($size) {
  height: var(
    --control-box-size-#{$size},
    #{map-get($control-box-sizes, $size)}
  );
  width: var(
    --control-box-size-#{$size},
    #{map-get($control-box-sizes, $size)}
  );
}

// Mixin aplicar una transición suave a las propiedades CSS
// Utiliza este mixin para aplicar transiciones suaves a las propiedades CSS de un elemento
@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -o-transition: $args;
  transition: $args;
}

// Mixin para ocultar elementos visualmente
// Utiliza este mixin para ocultar elementos que no deben ser visibles pero aún accesibles
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// Mixin para aplicar estilo a un elemento deshabilitado
// Utiliza este mixin para aplicar estilos a elementos que están deshabilitados
@mixin disabled {
  opacity: 0.6;
  filter: grayscale(30%);
  cursor: default;
  &:focus {
    outline: none !important;
    box-shadow: none !important;
  }
}

@mixin flex-row {
  display: flex;
  flex-direction: row;
}

@mixin flex-col {
  display: flex;
  flex-direction: column;
}

@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin flex-start-between {
  display: flex;
  align-items: flex-start;
  justify-content: space-between;
}

@mixin flex-inline-center {
  display: inline-flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-row-center {
  @include flex-row;
  align-items: center;
}

@mixin flex-row-center-start {
  display: flex;
  align-items: center;
  justify-content: flex-start;
}

@mixin flex-col-center {
  @include flex-col;
  align-items: center;
}

@mixin flex-col-start-center {
  @include flex-col;
  align-items: flex-start;
  justify-content: center;
}

@mixin flex-col-start {
  @include flex-col;
  align-items: flex-start;
}

@mixin flex-col-stretch {
  @include flex-col;
  align-items: stretch;
}

@mixin ellipsis-text {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

// Mixin para aplicar un foco de contorno
// Utiliza este mixin para aplicar un estilo de contorno al enfocar
@mixin outline-focus($color: var(--outline-color)) {
  outline-color: $color;
  outline-style: solid;
  outline-width: var(--border-width-xs);
  box-shadow: 0px 0px 2px var(--border-width-xs) var(--focus-ring-color);
}
