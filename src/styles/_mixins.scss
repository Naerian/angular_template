// Mixin para definir tamaños de componentes
// Utiliza este mixin para aplicar tamaños consistentes a los componentes de la aplicación
@mixin component-size($size) {
  $height: map-get($component-heights, $size);
  $padding: map-get($component-paddings, $size);
  $font-size: map-get($component-font-sizes, $size);

  @if ($height) {
    height: $height;
  } @else {
    height: map-get($component-heights, m);
  }

  @if ($padding) {
    padding: $padding;
  } @else {
    padding: map-get($component-paddings, m);
  }

  @if ($font-size) {
    font-size: $font-size;
    line-height: $font-size;
  } @else {
    font-size: map-get($component-font-sizes, m);
    line-height: map-get($component-font-sizes, m);
  }
}

// Mixin para definir tamaños de componentes de textarea
// Utiliza este mixin para aplicar tamaños consistentes a los componentes de textarea de la aplicación
@mixin component-textarea-size($size) {
  $padding: map-get($component-paddings, $size);
  $font-size: map-get($component-font-sizes, $size);

  @if ($padding) {
    padding: $padding;
  } @else {
    padding: map-get($component-paddings, m);
  }

  @if ($font-size) {
    font-size: $font-size;
    line-height: $font-size;
  } @else {
    font-size: map-get($component-font-sizes, m);
    line-height: map-get($component-font-sizes, m);
  }
}

// Mixin para aplicar tamaño de fuente según el tamaño del componente
// Utiliza este mixin para aplicar un tamaño de fuente específico a los componentes
@mixin component-font-size($size) {
  $font-size: map-get($component-font-sizes, $size);

  @if ($font-size) {
    font-size: $font-size;
    line-height: $font-size *
      1.5; // Ajuste de line-height basado en el tamaño de fuente
  } @else {
    // Manejo de error o valor por defecto si el tamaño no existe
    font-size: map-get($component-font-sizes, m); // Tamaño medio como fallback
    line-height: map-get($component-font-sizes, m) *
      1.5; // Ajuste de line-height para tamaño medio
  }
}

// Mixin para aplicar tamaño de fuente a los iconos de los componentes
// Utiliza este mixin para aplicar un tamaño de fuente específico a los iconos de los componentes
@mixin component-icon-size($size) {
  $height: map-get($component-heights, $size);
  $padding: map-get($component-paddings, $size);
  $font-size: map-get($component-font-sizes, $size);

  @if ($height) {
    height: $height;
  } @else {
    height: map-get($component-heights, m);
  }

  @if ($padding) {
    padding: $padding;
  } @else {
    padding: map-get($component-paddings, m);
  }

  @if ($font-size) {
    font-size: $font-size * 1.2;
    line-height: $font-size * 1.2;
  } @else {
    font-size: map-get($component-font-sizes, m) * 1.2;
    line-height: map-get($component-font-sizes, m) * 1.2;
  }
}

// Mixin para aplicar tamaño al checkbox
// Utiliza este mixin para aplicar un tamaño específico al checkbox
@mixin component-checkbox-size($size) {
  $height: map-get($checkbox-box-sizes, $size);
  $width: map-get($checkbox-box-sizes, $size);

  @if ($height) {
    height: $height;
  } @else {
    height: map-get($component-heights, m);
  }

  @if ($width) {
    width: $width;
  } @else {
    width: map-get($component-paddings, m);
  }
}

// Mixin aplicar una transición suave a las propiedades CSS
// Utiliza este mixin para aplicar transiciones suaves a las propiedades CSS de un elemento
@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -o-transition: $args;
  transition: $args;
}

// Mixin para ocultar elementos visualmente
// Utiliza este mixin para ocultar elementos que no deben ser visibles pero aún accesibles
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// Mixin para aplicar estilo a un elemento deshabilitado
// Utiliza este mixin para aplicar estilos a elementos que están deshabilitados
@mixin disabled {
  opacity: 0.6;
  filter: grayscale(30%);
  cursor: default;
  &:focus {
    outline: none !important;
    box-shadow: none !important;
  }
}

@mixin flex-row {
  display: flex;
  flex-direction: row;
}

@mixin flex-col {
  display: flex;
  flex-direction: column;
  align-items: center;
}

@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin flex-row-center {
  @include flex-row;
  align-items: center;
}

@mixin flex-row-center-start {
  align-items: center;
  justify-content: flex-start;
}

@mixin flex-col-center {
  @include flex-col;
  align-items: center;
}

@mixin flex-col-start-center {
  @include flex-col;
  align-items: flex-start;
  justify-content: center;
}

@mixin flex-col-start {
  @include flex-col;
  align-items: flex-start;
}

@mixin flex-col-stretch {
  @include flex-col;
  align-items: stretch;
}

@mixin ellipsis-text {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin outline-focus($color: var(--outline-color), $width: $border-width-xs) {
  outline-color: $color;
  outline-style: solid;
  outline-width: $width;
  box-shadow: 0px 0px 2px $width var(--focus-ring-color);
}

// Este mixin es específico del spinner, lo mantendremos aquí.
// Asegúrate de que $spinner-border-width esté en _config.scss o pásalo como parámetro por defecto.
@mixin spinner-pseudo-elements(
  $color: var(--primary-color),
  $border-width: $spinner-border-width
) {
  border: $border-width solid $color;
  border-radius: 50%;
  position: absolute;
  content: "";
  display: block;
}
